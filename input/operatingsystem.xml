<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../transforms/pp2html.xsl"?>

<PP xmlns="https://niap-ccevs.org/cc/v1" name="General Purpose Operating System"
    xmlns:h="http://www.w3.org/1999/xhtml">
  <!-- <inline-comment color='green'> Hello World QQQQ </inline-comment> -->
  <!-- <inline-comment color='blue' linebreak='yes'> Hello World QQQQ </inline-comment> -->
  <PPReference title="PP Reference">
    <ReferenceTable>
      <PPTitle>Protection Profile for General Purpose Operating Systems</PPTitle>
      <PPVersion>4.1</PPVersion>
      <PPAuthor>National Information Assurance Partnership</PPAuthor>
      <PPPubDate>2016-03-09</PPPubDate>
      <PPCertificationID>unassigned</PPCertificationID>
      <CCVersion>3.1R4</CCVersion>
      <Keywords>OS; operating system</Keywords>
      <entry>
        <name>Registration</name>
        <description>National Information Assurance Partnership</description>
      </entry>
    </ReferenceTable>
  </PPReference>

  <RevisionHistory role="draft">
    <entry>
      <version>Round 1</version>
      <date>2015-04-23</date>
      <subject>First draft of version 4.0 for comment</subject>
    </entry>
  </RevisionHistory>

  <RevisionHistory role="final">
    <entry>
      <version>4.1</version>
      <date>2016-03-09</date>
      <subject>Minor updates - cryptographic modes</subject>
    </entry>
    <entry>
      <version>4.0</version>
      <date>2015-08-14</date>
      <subject>Release - significant revision</subject>
    </entry>
  </RevisionHistory>

  <chapter title="Introduction" id="int">
    <section title="Overview" id="ppoverview"> The scope of this Protection Profile (PP) is to
      describe the security functionality of operating systems in terms of <cite linkend="bibCC"/>
      and to define functional and assurance requirements for such products.
      An operating system is software that manages computer hardware and software
      resources, and provides common services for application programs. The hardware
      it manages may be physical or virtual.
    </section>
    <section title="Terms" id="glossary"> The following sections provide both Common Criteria and
      technology terms used in this Protection Profile. 
      <glossary>
          <entry>
            <term><abbr title="Address Space Layout Randomization">ASLR</abbr></term>
            <description>An anti-exploitation feature which loads memory mappings into unpredictable
              locations. ASLR makes it more difficult for an attacker to redirect control to code
              that they have introduced into the address space of a process.</description>
          </entry>
          <entry>
            <term>Administrator</term>
			<description>An administrator is responsible for management
			activities, including setting policies that are applied by the
			enterprise on the operating system. This administrator could be
			acting remotely through a management server, from which the system
			receives configuration policies.  An administrator can enforce
			settings on the system which cannot be overridden by
			non-administrator users.
            </description>
		  </entry>
          <entry>
            <term><abbr title="Application">app</abbr></term>
            <description>Software that runs on a platform and performs tasks on behalf of the user
              or owner of the platform, as well as its supporting documentation. </description>
          </entry>
          <entry>
            <term><abbr title="Application Programming Interface">API</abbr></term>
            <description>A specification of routines, data structures, object classes, and variables
              that allows an application to make use of services provided by another software
              component, such as a library. APIs are often provided for a set of libraries included
              with the platform.</description>
          </entry>
          <entry>
            <term><abbr title="Common Criteria">CC</abbr></term>
            <description>Common Criteria for Information Technology Security
              Evaluation.</description>
          </entry>
          <entry>
            <term><abbr title="Common Evaluation Methodology">CEM</abbr></term>
            <description>Common Evaluation Methodology for Information Technology Security
              Evaluation.</description>
          </entry>
          <entry>
            <term>Credential</term>
            <description>Data that establishes the identity of a user, e.g. a cryptographic key or
              password.</description>
          </entry>
          <entry>
            <term><abbr title="Critical Security Parameters">CSP</abbr></term>
            <description>
              Information that is either user or system defined and 
              is used to operate a cryptographic module in processing encryption functions including 
              cryptographic keys and authentication data, such as passwords, the disclosure or modification 
              of which can compromise the security of a cryptographic module or the security of the 
              information protected by the module.
            </description>      
          </entry>
      	  <entry>
      	    <term><abbr title="Data At Rest">DAR</abbr> Protection</term>
      	    <description>
      	      Countermeasures that prevent attackers, even those with physical access, 
      	      from extracting data from non-volatile storage. 
      	      Common techniques include data encryption and wiping.
      	    </description>
      	  </entry>
          <entry>
            <term><abbr title="Data Execution Prevention">DEP</abbr></term>
            <description>An anti-exploitation feature of modern operating systems executing on
              modern computer hardware, which enforces a non-execute permission on pages of memory.
              DEP prevents pages of memory from containing both data and instructions, which makes
              it more difficult for an attacker to introduce and execute code.</description>
          </entry>
          <entry>
            <term>Developer</term>
            <description>An entity that writes OS software. For the purposes of this document,
              vendors and developers are the same.</description>
          </entry>
          <entry>
            <term>Host-based Firewall</term>
            <description>
	      A software-based firewall implementation running on the OS for filtering inbound and 
              outbound network traffic to and from processes running on the OS.
	    </description>
          </entry>
          <entry>
            <term><abbr title="Operating System">OS</abbr></term>
            <description> Software that manages physical and logical resources and provides services
              for applications. The terms <h:i>TOE</h:i> and <h:i>OS</h:i> are interchangeable in this
              document. </description>
          </entry>
          <entry>
            <term><abbr title="Personally Identifiable Information">PII</abbr></term>
            <description>Any information about an individual maintained by an agency, including, but
              not limited to, education, financial transactions, medical history, and criminal or
              employment history and information which can be used to distinguish or trace an
              individual's identity, such as their name, social security number, date and place of
              birth, mother’s maiden name, biometric records, etc., including any other personal
              information which is linked or linkable to an individual. <cite linkend="bibOMB"
              /></description>
          </entry>
          <entry>
            <term><abbr title="Protection Profile">PP</abbr></term>
            <description>An implementation-independent set of security requirements for a category
              of products.</description>
          </entry>
          <entry>
            <term><abbr title="Security Target">ST</abbr></term>
            <description>A set of implementation-dependent security requirements for a specific
              product.</description>
          </entry>
          <entry>
            <term>Sensitive Data</term>
            <description> Sensitive data may include all user or enterprise data or may be specific
              application data such as PII, emails, messaging, documents, calendar items, and contacts.
              Sensitive data must minimally include credentials and keys. Sensitive data shall
              be identified in the OS’s TSS by the <abbr linkend="ST"/> author. </description>
          </entry>
          <entry>
            <term><abbr title="Target of Evaluation">TOE</abbr></term>
            <description>
	      The product under evaluation. In this case, the Operating System as described in section 
	      <xref linkend="TOEboundary"/> and its
              supporting documentation.
	    </description>
          </entry>
          <entry>
            <term><abbr title="TOE Security Functionality">TSF</abbr></term>
            <description>The security functionality of the product under evaluation.</description>
          </entry>
          <entry>
            <term><abbr title="TOE Summary Specification">TSS</abbr></term>
            <description>A description of how a <abbr linkend="TOE"/> satisfies the SFRs in a <abbr
                linkend="ST"/>. </description>
          </entry>
          <entry>
            <term><abbr title="Security Functional Requirement">SFR</abbr></term>
            <description>A requirement for security enforcement by the <abbr linkend="TOE"/>.
            </description>
          </entry>
          <entry>
            <term><abbr title="Security Assurance Requirement">SAR</abbr></term>
            <description>A requirement to assure the security of the <abbr linkend="TOE"/>.
            </description>
          </entry>
          <entry>
            <term>User</term>
	    <description> A user is subject to configuration policies applied
            to the operating system by administrators.  On some systems under certain
            configurations, a normal user can temporarily elevate privileges to that of an administrator.  
            At that time, such a user should be considered an administrator.  
            </description>
          </entry>
        </glossary>
      </section>
    <section title="Compliant Targets of Evaluation" id="TOEdescription">
      <subsection title="TOE Boundary" id="toeboundary">
        The TOE boundary encompasses the OS kernel and its drivers, shared
        software libraries, and some application software included with the OS. The applications considered within the TOE
        are those that provide essential security services, many of which run with elevated
        privileges.  Applications which are covered by more-specific Protection Profiles cannot 
        claim evaluation as part of the OS evaluation, even when it is necessary to evaluate 
        some of their functionality as it relates to their role as part of the OS.
        <figure entity="images/Toe.png" title="General TOE " id="toe"/> 
      </subsection>
      <subsection title="TOE Platform" id="TOEplatform">
	The TOE platform, which consists of the physical or virtual hardware on which the TOE executes,
        is outside the scope of evaluation.  At the same time, the security of the TOE relies upon it.
        Other hardware components which independently run their own software and are
        relevant to overall system security are also outside the scope of evaluation.
      </subsection>
    </section>
    <section title="Use Cases" id="usecases">Requirements in this Protection Profile are designed to
      address the security problems in at least the following use cases. These use cases are intentionally
      very broad, as many specific use cases exist for an operating system. These use cases may also
      overlap with one another.  An operating system's functionality may even be effectively extended by
      privileged applications installed onto it.  However, these are out of scope of this PP. <usecases>
        <usecase title="End User Devices" id="enduserdevices">
          <description>
	    The OS provides a platform to end user devices such as desktops,
	    laptops, convertibles, and tablets. 
	    These devices may optionally be bound to a directory server or management server.
		<h:br/>
            As this Protection Profile does not address threats against data-at-rest,
            enterprises deploying operating systems in mobile scenarios should ensure that these systems
            include data-at-rest protection spelled out in other 
	    Protection Profiles. Specifically, this includes the Protection Profiles for 
	    <h:i>Full Drive Encryption - Encryption Engine</h:i>, 
	    <h:i>Full Drive Encryption - Authorization Acquisition</h:i>, 
	    and <h:i>Software File Encryption</h:i>.  The <h:i>Protection Profile for Mobile
		Device Fundamentals</h:i> includes requirements for data-at-rest protection and is appropriate
		for many mobile devices.
          </description>
        </usecase>
        <usecase title="Server Systems" id="serversystems">
          <description>The OS provides a platform for server-side services, either on
            physical or virtual hardware.  Many specific examples exist in which the OS acts
            as a platform for such services, including file servers, mail servers, and web servers.
          </description>
        </usecase>
        <usecase title="Cloud Systems" id="cloudsystems">
          <description>The OS provides a platform for providing cloud services running on
            physical or virtual hardware.  An OS is typically part of offerings
            identified as Infrastructure as a Service (IaaS), Software as a Service (SaaS),
            and Platform as a Service (PaaS). 
			<h:br/>
			This use case typically involves the use
			of virtualization technology which should be evaluated against the 
			<h:i>Protection Profile for Server Virtualization</h:i>.</description>
        </usecase>
      </usecases>
    </section>
  </chapter>
  <chapter title="Conformance Claims" id="ccl">
    <cclaims>
      <cclaim id="Conformance Statement">
        <description> To be conformant to this PP, a <abbr linkend="ST"/> must demonstrate Exact
          Conformance, a subset of Strict Conformance as defined in <cite linkend="bibCC"/> Part 1
          (ASE_CCL). The <abbr linkend="ST"/> must include all components in this PP that are: <h:ul>
            <h:li>unconditional (which are always required)</h:li>
            <h:li>selection-based (which are required when certain <h:i>selections</h:i> are chosen in the
              unconditional requirements)</h:li>
          </h:ul>and may include components that are <h:ul>
            <h:li>optional or</h:li>
            <h:li>objective.</h:li>
          </h:ul>
          <InsertAppendixExplainer/> The <abbr linkend="ST"/> may iterate any of these components,
          but it must not include any additional component (e.g. from CC Part 2 or 3 or a PP not
          conformant with this one, or extended by the <abbr linkend="ST"/>) not defined in this PP
          or a PP conformant to this one. 
          <h:br/>
		  Some components in this Protection Profile have a dependency on
		  other components.  In accordance with <cite linkend="bibCC"/> Part 1, <appref linkend="satisfiedreqs"/> 
          includes justifications for those cases where the PP does not explicitly contain the component
		  upon which there is a dependency.
        </description>
      </cclaim>
      <cclaim id="CC Conformance Claims">
        <description>This PP is conformant to Parts 2 (extended) and 3 (extended) of Common Criteria
          Version 3.1, Revision 4.<cite linkend="bibCC"/>.</description>
      </cclaim>
      <cclaim id="PP Claim">
        <description>This PP does not claim conformance to any other Protection
          Profile.</description>
      </cclaim>
      <cclaim id="Package Claim">
        <description>This PP does not claim conformance to any packages.</description>
      </cclaim>
    </cclaims>
  </chapter>
  <chapter title="Security Problem Definition" id="spd">The security problem is described in terms
    of the threats that the <abbr linkend="OS"/> is expected to address, assumptions about the
    operational environment, and any organizational security policies that the <abbr linkend="OS"/>
    is expected to enforce. <section title="Threats" id="threats">
      <threats>
        <threat id="T.NETWORK_ATTACK">
          <description> An attacker is positioned on a communications channel or elsewhere on the
            network infrastructure. Attackers may engage in communications with applications and
            services running on or part of the OS with the intent of compromise. Engagement may
            consist of altering existing legitimate communications.</description>
          <objective-refer ref="O.PROTECTED_COMMS">
            <rationale>The threat T.NETWORK_ATTACK is countered by O.PROTECTED_COMMS as this
              provides for integrity of transmitted data.</rationale>
          </objective-refer>
          <objective-refer ref="O.INTEGRITY">
            <rationale>The threat T.NETWORK_ATTACK is countered by O.INTEGRITY as this provides for
              integrity of software that is installed onto the system from the network.</rationale>
          </objective-refer>
          <objective-refer ref="O.MANAGEMENT">
            <rationale>The threat T.NETWORK_ATTACK is countered by O.MANAGEMENT as this provides for
              the ability to configure the OS to defend against network attack.</rationale>
          </objective-refer>
        </threat>
        <threat id="T.NETWORK_EAVESDROP">
          <description> An attacker is positioned on a communications channel or elsewhere on the
            network infrastructure. Attackers may monitor and gain access to data exchanged between
            applications and services that are running on or part of the OS. </description>
          <objective-refer ref="O.PROTECTED_COMMS">
            <rationale>The threat T.NETWORK_EAVESDROP is countered by O.PROTECTED_COMMS as this
              provides for confidentiality of transmitted data.</rationale>
          </objective-refer>
          <objective-refer ref="O.MANAGEMENT">
            <rationale>The threat T.NETWORK_EAVESDROP is countered by O.MANAGEMENT as this provides
              for the ability to configure the OS to protect the confidentiality of its transmitted
              data.</rationale>
          </objective-refer>
        </threat>
        <threat id="T.LOCAL_ATTACK">
          <description> An attacker may compromise applications running on the OS. The
            compromised application may provide maliciously formatted input to the OS through a
            variety of channels including unprivileged system calls and messaging via the
            file system. </description>
          <objective-refer ref="O.INTEGRITY">
            <rationale>The objective O.INTEGRITY protects against the use of mechanisms that weaken
              the <abbr linkend="TOE"/> with regard to attack by other software on the
              platform.</rationale>
          </objective-refer>
        </threat>
        <threat id="T.LIMITED_PHYSICAL_ACCESS">
          <description> An attacker may attempt to access data on the OS while having a limited
            amount of time with the physical device. </description>
          <objective-refer ref="O.PROTECTED_STORAGE">
            <rationale>The objective O.PROTECTED_STORAGE protects against unauthorized attempts to
              access physical storage used by the <abbr linkend="TOE"/>.</rationale>
          </objective-refer>
        </threat>
      </threats>
    </section>
    <section title="Assumptions" id="assumptions">
      <assumptions>
        <assumption id="A.PLATFORM">
          <description> The <abbr linkend="OS"/> relies upon a trustworthy computing platform for
            its execution. This underlying platform is out of scope of this PP. </description>
          <objective-refer ref="OE.PLATFORM">
            <rationale> The operational environment objective OE.PLATFORM is realized through
              A.PLATFORM. </rationale>
          </objective-refer>
        </assumption>
        <assumption id="A.PROPER_USER">
          <description> The user of the OS is not willfully negligent or hostile, and uses the
            software in compliance with the applied enterprise security policy. At the same time,
            malicious software could act <h:i>as</h:i> the user, so requirements which
            confine malicious subjects are still in scope.</description>
          <objective-refer ref="OE.PROPER_USER">
            <rationale>The operational environment objective OE.PROPER_USER is realized through
              A.PROPER_USER.</rationale>
          </objective-refer>
        </assumption>
        <assumption id="A.PROPER_ADMIN">
          <description> The administrator of the OS is not careless, willfully negligent or hostile,
            and administers the OS within compliance of the applied enterprise security policy. </description>
          <objective-refer ref="OE.PROPER_ADMIN">
            <rationale>The operational environment objective OE.PROPER_ADMIN is realized through
              A.PROPER_ADMIN.</rationale>
          </objective-refer>
        </assumption>
      </assumptions>
    </section>
<!--    <section title="Organizational Security Policies" id="OSPs">
      <OSPs>
        <OSP id="P.ENTERPRISE">
          <description>If the OS is bound to a directory or management server, the configuration of
            the OS software must be capable of adhering to the enterprise security policies
            distributed by them.</description>
          <objective-refer ref="O.MANAGEMENT">
            <rationale>The organizational security policy P.ENTERPRISE is enforced through the
              objective O.MANAGEMENT as this objective represents how the enterprise and user assert
              management over the <abbr linkend="OS"/>.</rationale>
          </objective-refer>
        </OSP>
      </OSPs>
    </section> -->
  </chapter>
  <chapter title="Security Objectives" id="obj">
    <section title="Security Objectives for the TOE" id="SecurityObjectivesTOE">
      <SOs>
        <SO id="O.ACCOUNTABILITY">
          <description> Conformant <abbr linkend="OS"/>s ensure that information exists that allows
            administrators to discover unintentional issues with the configuration and operation of
            the operating system and discover its cause.  Gathering event information and immediately 
            transmitting it to another system can also enable incident response in the event
            of system compromise.</description>
          <component-refer ref="fau_gen.1"/>
        </SO>
        <SO id="O.INTEGRITY">
          <description>Conformant <abbr linkend="OS"/>s ensure the integrity of their update
            packages. <abbr linkend="OS"/>s are seldom if ever shipped without errors, and the
            ability to deploy patches and updates with integrity is critical to enterprise network
            security. Conformant <abbr linkend="OS"/>s provide execution environment-based
            mitigations that increase the cost to attackers by adding complexity to the task of
            compromising systems. </description>
          <component-refer ref="fpt_sbop_ext.1"/>
          <component-refer ref="fpt_aslr_ext.1"/>
          <component-refer ref="fpt_tud_ext.1"/>
          <component-refer ref="fpt_tud_ext.2"/>
          <component-refer ref="fcs_cop.1.1(2)"/>
          <component-refer ref="fcs_cop.1.1(3)"/>
          <component-refer ref="fcs_cop.1.1(4)"/>
          <component-refer ref="fpt_acf_ext.1"/>
          <component-refer ref="fpt_srp_ext.1"/>
          <component-refer ref="fia_x509_ext.2"/>
          <component-refer ref="fpt_tst_ext.1"/>
	  <component-refer ref="ftp_itc_ext.1"/>
	  <component-refer ref="fpt_w^x_ext.1.1"/>
	  <component-refer ref="fia_afl.1"/>
	  <component-refer ref="fia_uau.5"/>
        </SO>
        <SO id="O.MANAGEMENT">
          <description> To facilitate management by users and the enterprise, conformant <abbr
              linkend="OS"/>es provide consistent and supported interfaces for their
            security-relevant configuration and maintenance. This includes the deployment of
            applications and application updates through the use of platform-supported deployment
            mechanisms and formats, as well as providing mechanisms for configuration and
            application execution control. </description>
          <component-refer ref="fmt_mof_ext.1"/>
          <component-refer ref="ftp_trp.1"/>
        </SO>
	<!-- <SO id="O.RESILIENCE"> -->
	<!--   <description>  -->
	<!--     To address the issue of exploitation in the event of software vulnerabilities,  -->
	<!--     conformant <abbr linkend="OS"/>s employ industry-standard exploitation countermeasures. -->
	<!--   </description> -->
	<!-- </SO> -->
        <SO id="O.PROTECTED_STORAGE">
          <description> To address the issue of loss of confidentiality of credentials in the event of
            loss of physical control of the storage medium, conformant <abbr linkend="OS"/>s 
            provide data-at-rest protection for credentials.  Conformant OSes also provide
			access controls which allow users to keep their files private from other
			users of the same system.
          </description>
          <component-refer ref="fcs_sto_ext.1"/>
          <component-refer ref="fcs_rbg_ext.1"/>
          <component-refer ref="fcs_cop.1.1(1)"/>
	  <component-refer ref="fdp_acf_ext.1"/>
        </SO>
        <SO id="O.PROTECTED_COMMS">
          <description> To address both passive (eavesdropping) and active (packet modification)
            network attack threats, conformant <abbr linkend="OS"/>s provide mechanisms to create
            trusted channels for <abbr linkend="CSP"/> and sensitive data. Both CSP and sensitive data
            should not be exposed outside of the platform. </description>
          <component-refer ref="fcs_tlsc_ext.1"/>
          <component-refer ref="fcs_tlsc_ext.2"/>
          <component-refer ref="fcs_tlsc_ext.3"/>
          <component-refer ref="fcs_tlsc_ext.4"/>
          <component-refer ref="fcs_dtls_ext.1"/>
          <component-refer ref="fcs_rbg_ext.1"/>
          <component-refer ref="fcs_ckm.1(1)"/>
          <component-refer ref="fcs_ckm.2(1)"/>
          <component-refer ref="fcs_cop.1.1(1)"/>
          <component-refer ref="fdp_ifc_ext.1"/>
          <component-refer ref="fia_x509_ext.1"/>
          <component-refer ref="fia_x509_ext.2"/>
	  <component-refer ref="ftp_itc_ext.1"/>
        </SO>
      </SOs>
    </section>
    <section title="Security Objectives for the Operational Environment"
      id="SecurityObjectivesTOEorEnvironment">The following security objectives for the operational
      environment assist the <abbr linkend="OS"/> in correctly providing its security functionality.
      These track with the assumptions about the environment. <SOEs>
        <SOE id="OE.PLATFORM">
          <description>The <abbr linkend="OS"/> relies on being installed on trusted
            hardware.</description>
        </SOE>
        <SOE id="OE.PROPER_USER">
          <description> The user of the <abbr linkend="OS"/> is not willfully negligent or hostile,
            and uses the software within compliance of the applied enterprise security policy.
            Standard user accounts are provisioned in accordance with the least privilege model.
            Users requiring higher levels of access should have a separate account dedicated for
            that use. </description>
        </SOE>
        <SOE id="OE.PROPER_ADMIN">
          <description> The administrator of the <abbr linkend="OS"/> is not careless, willfully
            negligent or hostile, and administers the OS within compliance of the applied enterprise
            security policy. </description>
        </SOE>
      </SOEs></section>
    <section title="Security Objectives Rationale" id="SOR">This section describes how the
      assumptions, threats, and organizational security policies map to the security objectives.
      <InsertSPDCorrespondence/></section>
  </chapter>
  <chapter title="Security Requirements" id="req">This chapter describes the security requirements
    which have to be fulfilled by the <abbr linkend="OS"/>. Those requirements comprise functional
    components from Part 2 and assurance components from Part 3 of <cite linkend="bibCC"/>. The
    following notations are used: <h:ul>
      <h:li>
        <h:b>Refinement</h:b> operation (denoted by <h:b>bold text</h:b>): is used to add details to a
        requirement, and thus further restricts a requirement.</h:li>
      <h:li>
        <h:b>Selection</h:b> (denoted by <h:i>italicized text</h:i>): is used to select one or more options
        provided by the [CC] in stating a requirement.</h:li>
      <h:li>
        <h:b>Assignment</h:b> operation (denoted by <h:span class="assignable-content">italicized text</h:span>): is used to assign a
        specific value to an unspecified parameter, such as the length of a password. Showing the
        value in square brackets indicates assignment.</h:li>
      <h:li>
        <h:b>Iteration</h:b> operation: are identified with a number inside parentheses (e.g.
        "(1)")</h:li>
    </h:ul>
    <section title="Security Functional Requirements" id="SFRs">The Security Functional Requirements
      included in this section are derived from Part 2 of the Common Criteria for Information
      Technology Security Evaluation, Version 3.1, Revision 4, with additional extended functional
      components. 
      <subsection title="Cryptographic Support (FCS)" id="fcs">
        <f-component id="fcs_ckm.1(1)" name="Cryptographic Key Generation (Refined)" status="threshold">
          <f-element id="fcs_ckm.1.1(1)">
            <title> The <h:b>OS</h:b> shall generate <h:b>asymmetric</h:b> cryptographic keys in accordance with a
              specified cryptographic key generation algorithm <selectables linebreak="yes">
                <selectable>
                  <h:b>RSA schemes</h:b> using cryptographic key sizes of 2048-bit or greater
                  that meet the following: 
		  <selectables>
		    <selectable>
		      <h:b>FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Appendix B.3</h:b>
		    </selectable>
		    <selectable><h:b>ANSI X9.31-1998, Section 4.1</h:b></selectable>
		  </selectables>
                </selectable>
                <selectable>
                  <h:b>ECC schemes</h:b> using “NIST curves” P-256, P-384 and 
		  <selectables>
                    <selectable> P-521 </selectable>
                    <selectable> no other curves </selectable>
                    </selectables> 
		    that meet the following: FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Appendix B.4
                </selectable>                
                <selectable>
                  <h:b>FFC schemes</h:b> using cryptographic key sizes of 2048-bit 
                  or greater that meet the following: FIPS PUB 186-4, “Digital Signature 
                  Standard (DSS)”, Appendix B.1
                </selectable>
              </selectables>
              <h:strike>
                and specified cryptographic key sizes [assignment: cryptographic key sizes] 
                that meet the following: [assignment: list of standards]
              </h:strike>
              .
            </title>
            <note role="application"> The <abbr linkend="ST"/> author shall select all key
              generation schemes used for key establishment and entity authentication. When key
              generation is used for key establishment, the schemes in 
	      <linkref linkend="FCS_CKM.2.1(1)"/> and selected cryptographic protocols must match the
              selection. When key generation is used for entity authentication, the public key is
              expected to be associated with an X.509v3 certificate. <h:br/> If the <abbr
                linkend="OS"/> acts only as a receiver in the RSA key establishment scheme, the <abbr
                linkend="OS"/> does not need to implement RSA key generation. <h:br/> The ANSI
              X9.31-1998 option will be removed from the selection in a future publication of this
              document. Presently, the selection is not exclusively limited to the FIPS PUB 186-4
              options in order to allow industry some further time to complete the transition to the
              modern FIPS PUB 186-4 standard. </note>
            <aactivity> The evaluator will ensure that the <abbr linkend="TSS"/> identifies the key
              sizes supported by the <abbr linkend="OS"/>. If the <abbr linkend="ST"/> specifies
              more than one scheme, the evaluator will examine the <abbr linkend="TSS"/> to verify
              that it identifies the usage for each scheme. <h:br/> The evaluator will verify that
              the AGD guidance instructs the administrator how to configure the <abbr linkend="OS"/> 
	      to use the selected key generation scheme(s) and key size(s) for all uses defined
              in this PP. <h:br/> Assurance Activity Note: The following tests may require the
              vendor to furnish a developer environment and developer 
	      tools that are typically not available to end-users of the OS. 
              <h:br/>
              <h:b>Key Generation for FIPS PUB 186-4 RSA Schemes</h:b><h:br/> The evaluator will verify
              the implementation of RSA Key Generation by the <abbr linkend="OS"/> using the Key
              Generation test. This test verifies the ability of the <abbr linkend="TSF"/> to
              correctly produce values for the key components including the public verification
              exponent e, the private prime factors p and q, the public modulus n and the
              calculation of the private signature exponent d. Key Pair generation specifies 5 ways
              (or methods) to generate the primes p and q. These include: 
	      <h:ol>
                <h:li> Random Primes: 
		<h:ul>
                  <h:li>Provable primes</h:li>
                  <h:li>Probable primes</h:li>
                </h:ul>
                </h:li>
                <h:li> Primes with Conditions: <h:ul>
                    <h:li>Primes p1, p2, q1,q2, p and q shall all be provable primes</h:li>
                    <h:li>Primes p1, p2, q1, and q2 shall be provable primes and p and q shall be
                      probable primes</h:li>
                    <h:li>Primes p1, p2, q1,q2, p and q shall all be probable primes</h:li>
                  </h:ul>
                </h:li>
              </h:ol>
	      To test the key generation method for the Random Provable primes method and for
              all the Primes with Conditions methods, the evaluator must seed the <abbr
                linkend="TSF"/> key generation routine with sufficient data to deterministically
              generate the RSA key pair. This includes the random seed(s), the public exponent of
              the RSA key, and the desired key length. For each key length supported, the evaluator
              shall have the <abbr linkend="TSF"/> generate 25 key pairs. The evaluator will verify
              the correctness of the <abbr linkend="TSF"/>’s implementation by comparing values
              generated by the <abbr linkend="TSF"/> with those generated from a known good
              implementation. <h:br/> If possible, the Random Probable primes method should also be
              verified against a known good implementation as described above. Otherwise, the
              evaluator will have the <abbr linkend="TSF"/> generate 10 keys pairs for each
              supported key length nlen and verify: <h:ul>
                <h:li>n = p&#x22c5;q,</h:li>
                <h:li>p and q are probably prime according to Miller-Rabin tests,</h:li>
                <h:li>GCD(p-1,e) = 1,</h:li>
                <h:li>GCD(q-1,e) = 1,</h:li>
                <h:li>2<h:sup>16</h:sup> &#x2264; e &#x2264; 2<h:sup>256</h:sup> and e is an odd integer,</h:li>
                <h:li>|p-q| > 2<h:sup>nlen/2 - 100</h:sup>,</h:li>
                <h:li>p &#x2265; 2<h:sup>nlen/2 -1/2</h:sup>,</h:li>
                <h:li>q &#x2265; 2<h:sup>nlen/2 -1/2</h:sup>,</h:li>
                <h:li>2<h:sup>(nlen/2)</h:sup> &lt; d &lt; LCM(p-1,q-1),</h:li>
                <h:li>e&#x22c5;d = 1 mod LCM(p-1,q-1).</h:li>
              </h:ul>
              <h:b>Key Generation for ANSI X9.31-1998 RSA Schemes</h:b><h:p/> If the <abbr linkend="TSF"/>
              implements the ANSI X9.31-1998 scheme, the evaluator will check to ensure that the
                <abbr linkend="TSS"/> describes how the key-pairs are generated. In order to show
              that the <abbr linkend="TSF"/> implementation complies with ANSI X9.31-1998, the
              evaluator will ensure that the <abbr linkend="TSS"/> contains the following
              information: <h:ul>
                <h:li> The <h:abbr linkend="TSS"/> shall list all sections of the standard to which the
                    <h:abbr linkend="OS"/> complies;</h:li>
                <h:li> For each applicable section listed in the <h:abbr linkend="TSS"/>, for all
                  statements that are not "shall" (that is, "shall not", "should", and "should not")
                  , if the <h:abbr linkend="OS"/> implements such options it shall be described in
                  the <h:abbr linkend="TSS"/>. If the included functionality is indicated as "shall
                  not" or "should not" in the standard, the <h:abbr linkend="TSS"/> shall provide a
                  rationale for why this will not adversely affect the security policy implemented
                  by the <h:abbr linkend="OS"/>; </h:li>
                <h:li> For each applicable section of Appendix B, any omission of functionality
                  related to "shall" or “should” statements shall be described. </h:li>
              </h:ul>
              <h:b>Key Generation for Elliptic Curve Cryptography (ECC)</h:b>
	      <h:p> FIPS 186-4 ECC Key Generation Test</h:p>
              For each supported NIST curve, i.e., P-256, P-384 and P-521, the
              evaluator will require the implementation under test (IUT) to generate 10
              private/public key pairs. The private key shall be generated using an approved random
              bit generator (RBG). To determine correctness, the evaluator will submit the
              generated key pairs to the public key verification (PKV) function of a known good
              implementation. 
	      <h:br/>
	      <h:p>FIPS 186-4 Public Key Verification (PKV) Test</h:p> 
	      For each supported
              NIST curve, i.e., P-256, P-384 and P-521, the evaluator will generate 10
              private/public key pairs using the key generation function of a known good
              implementation and modify five of the public key values so that they are incorrect,
              leaving five values unchanged (i.e., correct). The evaluator will obtain in response
              a set of 10 PASS/FAIL values.
              <h:br/>
              <h:b>Key Generation for Finite-Field Cryptography (FFC)</h:b>
              <h:br/>
              The evaluator shall verify the implementation of the Parameters Generation 
              and the Key Generation for FFC by the TOE using the Parameter Generation 
              and Key Generation test. This test verifies the ability of the TSF to correctly 
              produce values for the field prime p, the cryptographic prime q (dividing p-1), 
              the cryptographic group generator g, and the calculation of the private 
              key x and public key y.
              <h:br/>
              The Parameter generation specifies 2 ways (or methods) to generate the 
              cryptographic prime q and the field prime p:
              <h:br/>            
              
              <h:li>Cryptographic and Field Primes:<h:ul>
                <h:li>Primes q and p shall both be provable primes</h:li>
                <h:li>Primes q and field prime p shall both be probable primes</h:li>
              </h:ul>
              </h:li>
              and two ways to generate the cryptographic group generator g:
              
              <h:li>Cryptographic Group Generator:<h:ul>
                <h:li>Generator g constructed through a verifiable process</h:li>
                <h:li>Generator g constructed through an unverifiable process</h:li>
              </h:ul>
              </h:li>

              The Key generation specifies 2 ways to generate the private key x:              
              
              <h:li>Private Key:<h:ul>
                <h:li>len(q) bit output of RBG where 1 &#x2264; x &#x2264; q-1</h:li>
                <h:li>len(q) + 64 bit output of RBG, followed by a mod q-1 operation where 1 &#x2264; x &#x2264; q-1</h:li>
              </h:ul>
              </h:li>
              
              The security strength of the RBG must be at least that of the security offered by the FFC parameter set.
              
              To test the cryptographic and field prime generation method for the provable primes method and/or the
              group generator g for a verifiable process, the evaluator must seed the TSF parameter 
              generation routine with sufficient data to deterministically generate the parameter set.
              
              For each key length supported, the evaluator shall have the TSF generate 25 parameter sets 
              and key pairs. The evaluator shall verify the correctness of the TSF’s implementation 
              by comparing values generated by the TSF with those generated from a known good 
              implementation. Verification must also confirm:
              <h:ul>
                <h:li>g != 0,1</h:li>
                <h:li>q divides p-1</h:li>
                <h:li>g<h:sup>q</h:sup> mod p = 1</h:li>
                <h:li>g<h:sup>x</h:sup> mod p = y</h:li>
              </h:ul>
              for each FFC parameter set and key pair.
              
	    </aactivity>
          </f-element>
        </f-component>
        <f-component id="fcs_ckm.2(1)" name="Cryptographic Key Establishment (Refined)" status="threshold">
          <f-element id="fcs_ckm.2.1(1)">
            <title> The <h:b>OS</h:b> shall <h:b>implement functionality to perform</h:b> cryptographic <h:b>key establishment</h:b>
              in accordance with a specified cryptographic key <h:b>establishment</h:b> method:
	      <h:p/>
              <h:b>RSA-based key establishment schemes</h:b> that meets the following: 
	      NIST Special Publication 800-56B, “Recommendation for Pair-Wise Key Establishment Schemes
              Using Integer Factorization Cryptography”
	      <h:p/> 
	      and 
	      <selectables linebreak="yes">
                <selectable>
                  <h:b>Elliptic curve-based key establishment schemes</h:b> that meets the following:
                    NIST Special Publication 800-56A, “Recommendation for Pair-Wise Key
                    Establishment Schemes Using Discrete Logarithm Cryptography”
                </selectable>
	        <selectable>
	          <h:b>Finite field-based key establishment schemes</h:b> that meets the following:
	          NIST Special Publication 800-56A, “Recommendation for Pair-Wise Key
	          Establishment Schemes Using Discrete Logarithm Cryptography”
	        </selectable>
                <selectable>No other schemes</selectable>
              </selectables>
              <h:strike>that meets the following: [assignment: list of standards]</h:strike>
              . 
            </title>
            <note role="application">
	      The ST author shall select all key establishment schemes used
              for the selected cryptographic protocols. <linkref linkend="FCS_TLSC_EXT.1"/> requires
              cipher suites that use RSA-based key establishment schemes. <h:br/> The RSA-based key
              establishment schemes are described in Section 9 of NIST SP 800-56B; however, Section 9
              relies on implementation of other sections in SP 800-56B. If the OS acts as a receiver
              in the RSA key establishment scheme, the OS does not need to implement RSA key generation.
              <h:br/> The elliptic curves used for the key establishment scheme shall correlate with
              the curves specified in <linkref linkend="FCS_CKM.1.1(1)"/>. The domain parameters 
              used for the finite field-based key establishment scheme are specified by the 
              key generation according to <linkref linkend="FCS_CKM.1.1(1)"/>.
              <h:br/> 
	    </note>
            <aactivity> The evaluator will ensure that the supported key establishment schemes
              correspond to the key generation schemes identified in FCS_CKM.1.1. If the ST
              specifies more than one scheme, the evaluator will examine the TSS to verify that it
              identifies the usage for each scheme. <h:br/> The evaluator will verify that the AGD
              guidance instructs the administrator how to configure the OS to use the selected key
              establishment scheme(s). <h:br/> Assurance Activity Note: The following tests require
              the developer to provide access to a test platform that provides the evaluator with
              tools that are typically not found on factory products. <h:br/>
              <h:b>Key Establishment Schemes</h:b><h:p/> The evaluator will verify the implementation of
              the key establishment schemes supported by the OS using the applicable tests below. <h:br/>
              <h:b>SP800-56A Key Establishment Schemes</h:b><h:p/> The evaluator will verify the OS's
              implementation of SP800-56A key agreement schemes using the following Function and
              Validity tests. These validation tests for each key agreement scheme verify that the OS
              has implemented the components of the key agreement scheme according to the
              specifications in the Recommendation. These components include the calculation of the
              discrete logarithm cryptography (DLC) primitives (the shared secret value Z) and the
              calculation of the derived keying material (DKM) via the Key Derivation Function
              (KDF). If key confirmation is supported, the evaluator will also verify that the
              components of key confirmation have been implemented correctly, using the test
              procedures described below. This includes the parsing of the DKM, the generation of
              MAC data and the calculation of MAC tag. <h:br/>
              <indent>
                <h:b>Function Test</h:b><h:p/> The Function test verifies the ability of the OS to
                implement the key agreement schemes correctly. To conduct this test the evaluator
                shall generate or obtain test vectors from a known good implementation of the OS's
                supported schemes. For each supported key agreement scheme-key agreement role
                combination, KDF type, and, if supported, key confirmation role- key confirmation
                type combination, the tester shall generate 10 sets of test vectors. 
		The data set consists of the NIST approved curve (ECC) per 10 sets of public keys.
		These keys are static, ephemeral or both depending
                on the scheme being tested. <h:br/> The evaluator will obtain the DKM, the
                corresponding OS's public keys (static and/or ephemeral), the MAC tag(s), and any
                inputs used in the KDF, such as the Other Information field OI and OS id fields.
                <h:br/> If the OS does not use a KDF defined in SP 800-56A, the evaluator will
                obtain only the public keys and the hashed value of the shared secret. <h:br/> The
                evaluator will verify the correctness of the TSF’s implementation of a given scheme
                by using a known good implementation to calculate the shared secret value, derive
                the keying material DKM, and compare hashes or MAC tags generated from these values.
                <h:br/> If key confirmation is supported, the OS shall perform the above for each
                implemented approved MAC algorithm. <h:br/>
                <h:b>Validity Test</h:b><h:p/> The Validity test verifies the ability of the OS to
                recognize another party’s valid and invalid key agreement results with or without
                key confirmation. To conduct this test, the evaluator will obtain a list of the
                supporting cryptographic functions included in the SP800-56A key agreement
                implementation to determine which errors the OS should be able to recognize. The
                evaluator generates a set of 30 test vectors consisting of data
                sets including domain parameter values or NIST approved curves, the evaluator’s
                public keys, the OS’s public/private key pairs, MAC tag, and any inputs used in the
                KDF, such as the other info and OS id fields. <h:br/> The evaluator will inject an
                error in some of the test vectors to test that the OS recognizes invalid key
                agreement results caused by the following fields being incorrect: the shared secret
                value Z, the DKM, the other information field OI, the data to be MAC'd, or the
                generated MAC tag. If the OS contains the full or partial (only ECC) public key
                validation, the evaluator will also individually inject errors in both parties’
                static public keys, both parties’ ephemeral public keys and the OS’s static private
                key to assure the OS detects errors in the public key validation function and/or
                the partial key validation function (in ECC only). At least two of the test vectors
                shall remain unmodified and therefore should result in valid key agreement results
                (they should pass). <h:br/> The OS shall use these modified test vectors to emulate
                the key agreement scheme using the corresponding parameters. The evaluator will
                compare the OS’s results with the results using a known good implementation
                verifying that the OS detects these errors. <h:br/>
              </indent>
              <h:b>SP800-56B Key Establishment Schemes</h:b><h:p/> The evaluator will verify that the TSS
              describes whether the OS acts as a sender, a recipient, or both for RSA-based key
              establishment schemes. <h:br/> If the OS acts as a sender, the following assurance
              activity shall be performed to ensure the proper operation of every OS supported
              combination of RSA-based key establishment scheme: <h:br/>
              <indent> To conduct this test the evaluator will generate or obtain test vectors from
                a known good implementation of the OS's supported schemes. For each combination of
                supported key establishment scheme and its options (with or without key confirmation
                if supported, for each supported key confirmation MAC function if key confirmation
                is supported, and for each supported mask generation function if KTS-OAEP is
                supported), the tester shall generate 10 sets of test vectors. Each test vector
                shall include the RSA public key, the plaintext keying material, any additional
                input parameters if applicable, the MAC key and MAC tag if key confirmation is
                incorporated, and the outputted ciphertext. For each test vector, the evaluator
                shall perform a key establishment encryption operation on the OS with the same
                inputs (in cases where key confirmation is incorporated, the test shall use the MAC
                key from the test vector instead of the randomly generated MAC key used in normal
                operation) and ensure that the outputted ciphertext is equivalent to the ciphertext
                in the test vector. </indent>
              <h:br/> If the OS acts as a receiver, the following assurance activities shall be
              performed to ensure the proper operation of every OS supported combination of
              RSA-based key establishment scheme: <h:br/>
              <indent> To conduct this test the evaluator will generate or obtain test vectors from
                a known good implementation of the OS's supported schemes. For each combination of
                supported key establishment scheme and its options (with our without key
                confirmation if supported, for each supported key confirmation MAC function if key
                confirmation is supported, and for each supported mask generation function if
                KTS-OAEP is supported), the tester shall generate 10 sets of test vectors. Each test
                vector shall include the RSA private key, the plaintext keying material, any
                additional input parameters if applicable, the MAC tag in cases where key
                confirmation is incorporated, and the outputted ciphertext. For each test vector,
                the evaluator will perform the key establishment decryption operation on the OS
                and ensure that the outputted plaintext keying material is equivalent to the
                plaintext keying material in the test vector. In cases where key confirmation is
                incorporated, the evaluator will perform the key confirmation steps and ensure that
                the outputted MAC tag is equivalent to the MAC tag in the test vector. </indent>
              <h:br/> The evaluator will ensure that the TSS describes how the OS handles decryption
              errors. In accordance with NIST Special Publication 800-56B, the OS must not reveal
              the particular error that occurred, either through the contents of any outputted or
              logged error message or through timing variations. If KTS-OAEP is supported, the
              evaluator will create separate contrived ciphertext values that trigger each of the
              three decryption error checks described in NIST Special Publication 800-56B section
              7.2.2.3, ensure that each decryption attempt results in an error, and ensure that any
              outputted or logged error message is identical for each. If KTS-KEM-KWS is supported,
              the evaluator will create separate contrived ciphertext values that trigger each of
              the three decryption error checks described in NIST Special Publication 800-56B
              section 7.2.3.3, ensure that each decryption attempt results in an error, and ensure
              that any outputted or logged error message is identical for each. </aactivity>
          </f-element>
        </f-component>
                
        <f-component id="fcs_ckm_ext.4" name="Cryptographic Key Destruction" status="threshold">
          <f-element id="fcs_ckm_ext.4.1">
            <title> The TSF shall cause disused cryptographic keys in volatile memory to be
                    destroyed or rendered unrecoverable.
            </title>
            <note role="application">
              The threat addressed by this element is the recovery of disused cryptographic
              keys from volatile memory by unauthorized processes.

              The TSF is expected to destroy or cause to be destroyed all copies of
              cryptographic keys created and managed by the TOE once the keys are no longer
              needed. This requirement is the same for all instances of keys within TOE volatile
              memory regardless of whether the memory is controlled by TOE manufacturer
              software or by 3rd party TOE modules. The assurance activities are designed with
              flexibility to address cases where the TOE manufacturer has limited insight into
              the behavior of 3rd party TOE components.

              The preferred method for destroying keys in TOE volatile memory is by direct
              overwrite of the memory occupied by the keys. The values used for overwriting
              can be all zeros, all ones, or any other pattern or combination of values
              significantly different than the value of the key itself such that the keys are
              rendered inaccessible to running processes.

              Some implementations may find that direct overwriting of memory is not
              feasible or possible due to programming language constraints. Many memory-
              and type-safe languages provide no mechanism for programmers to specify that
              a particular memory location be accessed or written. The value of such
              languages is that it is much harder for a programming error to result in a buffer
              or heap overflow. The downside is that multiple copies of keys might be
              scattered throughout language-runtime memory. In such cases, the TOE should
              take whatever actions are feasible to cause the keys to become inaccessible—
              freeing memory, destroying objects, closing applications, programming using
              the minimum possible scope for variables containing keys.

              Likewise, if keys reside in memory within the execution context of a third-party
              module, then the TOE should take whatever feasible actions it can to cause the
              keys to be destroyed.

              Cryptographic keys in non-TOE volatile memory are not covered by this
              requirement.
            </note>
          <f-element id="fcs_ckm_ext.4.2">
            <title> The TSF shall cause disused cryptographic keys in non-volatile storage
                    to be destroyed or rendered unrecoverable.
            </title>
            <note role="application">
              The ultimate goal of this element is to ensure that disused cryptographic keys
              are inaccessible not only to components of the running system, but are also
              unrecoverable through forensic analysis of discarded storage media. The
              element is designed to reflect the fact that the latter may not be wholly practical
              at this time due to the way some storage technologies are implemented (e.g.,
              wear-leveling of flash storage).

              Key storage areas in non-volatile storage can be overwritten with any value that
              renders the keys unrecoverable. The value used can be all zeros, all ones, or any
              other pattern or combination of values significantly different than the value of
              the key itself.

              The TSF is expected to destroy all copies of cryptographic keys created and
              managed by the TOE once the keys are no longer needed. Since this is a
              software-only TOE, the hardware controllers that manage non-volatile storage
              media are necessarily outside the TOE boundary. Thus, the TOE manufacturer is
              likely to have little control over—or insight into—the functioning of these
              storage devices. The TOE is expected to make a “best-effort” to destroy disused
              cryptographic keys by invoking the appropriate platform interfaces—recognizing
              that the specific actions taken by the platform are out of the TOE’s control.
              But in cases where the TOE has insight into the non-volatile storage technologies
              used by the platform, or where the TOE can specify a preference or method for
              destroying keys, the destruction should be executed by a single, direct overwrite
              consisting of pseudo-random data or a new key, by a repeating pattern of
              any static value, or by a block erase.

              For keys stored on encrypted media, it is sufficient for the media encryption keys
              to be destroyed for all keys stored on the media to be considered destroyed.
            </note>
            <aactivity>
              The evaluator shall check to ensure the TSS lists each type of key and its
              origin and location in memory or storage. The evaluator shall verify that the
              TSS describes when each type of key is cleared.

              For each key clearing situation the evaluator shall perform one of the following activities:
            <testlist>
              <test>
                The evaluator shall use appropriate combinations of specialized
                operational or development environments, development tools
                (debuggers, emulators, simulators, etc.), or instrumented builds
                (developmental, debug, or release) to demonstrate that keys are
                cleared correctly, including all intermediate copies of the key that
                may have been created internally by the TOE during normal
                cryptographic processing.
              </test>
                In cases where testing reveals that 3rd party software modules or
                programming language run-time environments do not properly
                overwrite keys, this fact must be documented. Likewise, it must be
                documented if there is no practical way to determine whether such
                modules or environments destroy keys properly.
              <test>
              </test>
              <test>
                In cases where it is impossible or impracticable to perform the above
                tests, the evaluator shall describe how keys are destroyed in such
                cases, to include:
                <h:li>Which keys are affected,</h:li>
                <h:li>The reasons why testing is impossible or impracticable,</h:li>
                <h:li>Evidence that keys are destroyed appropriately (e.g., citations
                  to component documentation, component developer/vendor
                  attestation, component vendor test results),</h:li>
                <h:li>Aggravating and mitigating factors that may affect the
                  timeliness or execution of key destruction (e.g., caching,
                  garbage collection, operating system memory management).</h:li>
              </test>
            </testlist>
              Note: using debug or instrumented builds of the TOE and TOE components is
              permitted in order to demonstrate that the TOE takes appropriate action to
              destroy keys. It is expected that these builds are based on the same source
              code as are release builds (of course, with instrumentation and debug-specific
              code added).
            </aactivity>
          </f-element>
        </f-component>
 
        <f-component id="fcs_cop.1(1)" name="Cryptographic Operation - Encryption/Decryption (Refined)" status="threshold">
          <f-element id="fcs_cop.1.1(1)">
            <title>
              The <h:b>OS</h:b> shall perform encryption/decryption services for data in 
	      accordance with a specified cryptographic algorithm 
	      <selectables linebreak="yes">
	              <selectable>AES-XTS (as defined in NIST SP 800-38E)</selectable>
	              <selectable>AES-CBC (as defined in NIST SP 800-38A)</selectable>
              </selectables> 
	      and 
	      <selectables linebreak="yes">
	        <selectable>AES-CCMP (as defined in FIPS PUB 197, NIST SP 800-38C and IEEE 802.11-2012)</selectable>
                <selectable>AES Key Wrap (KW) (as defined in NIST SP 800-38F)</selectable>
                <selectable>AES Key Wrap with Padding (KWP) (as defined in NIST SP 800-38F)</selectable>
                <selectable>AES-GCM (as defined in NIST SP 800-38D)</selectable>
                <selectable>AES-CCM (as defined in NIST SP 800-38C)</selectable>
                <selectable>AES-CCMP-256 (as defined in NIST SP800-38C and IEEE 802.11ac-2013)</selectable>
                <selectable>AES-GCMP-256 (as defined in NIST SP800-38D and IEEE 802.11ac-2013)</selectable>
                <selectable>no other modes</selectable>
              </selectables> 
              and cryptographic key sizes 
              <selectables>
                <selectable>128-bit</selectable>
                <selectable>256-bit</selectable>
              </selectables>
        <h:strike>that meet the following: [assignment: list of standards]</h:strike>
	      .
	    </title>
            <note role="application"> 
              AES CCMP (which uses AES in CCM as specified in SP 800-38C) becomes mandatory and must
              be selected if the ST includes the WLAN Client Extended Package.
              <h:br/> 
	            For the second selection, the ST author should choose the mode
              or modes in which AES operates. For the third selection, the ST author should choose
              the key sizes that are supported by this functionality. 128-bit key size is required
              in order to comply with <linkref linkend="FCS_TLSC_EXT.1"/> and <linkref
                linkend="FCS_CKM.1(1)"/>, if those are selected. 
	    </note>
            <aactivity> 
	      The evaluator will verify that the AGD documents contains instructions required 
	      to configure the OS to use the required modes and key sizes. 
	      The evaluator will execute all instructions as specified to configure the OS
	      to the appropriate state.
	      The evaluator will perform all of the following tests for each
              algorithm implemented by the OS and used to satisfy the requirements of this PP: <h:br/>
              <h:b>AES-CBC Known Answer Tests</h:b>
              <h:p/>There are four Known Answer Tests (KATs), described below. In all KATs, the
              plaintext, ciphertext, and IV values shall be 128-bit blocks. The results from each
              test may either be obtained by the evaluator directly or by supplying the inputs to
              the implementer and receiving the results in response. To determine correctness, the
              evaluator will compare the resulting values to those obtained by submitting the same
              inputs to a known good implementation. <h:ul>
                <h:li>KAT-1. To test the encrypt functionality of AES-CBC, the evaluator will supply
                  a set of 10 plaintext values and obtain the ciphertext value that results from
                  AES-CBC encryption of the given plaintext using a key value of all zeros and an IV
                  of all zeros. Five plaintext values shall be encrypted with a 128-bit all-zeros
                  key, and the other five shall be encrypted with a 256-bit all- zeros key. To test
                  the decrypt functionality of AES-CBC, the evaluator will perform the same test as
                  for encrypt, using 10 ciphertext values as input and AES-CBC decryption.</h:li>
                <h:li>KAT-2. To test the encrypt functionality of AES-CBC, the evaluator will supply
                  a set of 10 key values and obtain the ciphertext value that results from AES-CBC
                  encryption of an all-zeros plaintext using the given key value and an IV of all
                  zeros. Five of the keys shall be 128-bit keys, and the other five shall be 256-bit
                  keys. To test the decrypt functionality of AES-CBC, the evaluator will perform
                  the same test as for encrypt, using an all-zero ciphertext value as input and
                  AES-CBC decryption.</h:li>
                <h:li>KAT-3. To test the encrypt functionality of AES-CBC, the evaluator will supply
                  the two sets of key values described below and obtain the ciphertext value that
                  results from AES encryption of an all-zeros plaintext using the given key value
                  and an IV of all zeros. The first set of keys shall have 128 128-bit keys, and the
                  second set shall have 256 256-bit keys. Key i in each set shall have the leftmost
                  i bits be ones and the rightmost N-i bits be zeros, for i in [1,N]. To test the
                  decrypt functionality of AES-CBC, the evaluator will supply the two sets of key
                  and ciphertext value pairs described below and obtain the plaintext value that
                  results from AES-CBC decryption of the given ciphertext using the given key and an
                  IV of all zeros. The first set of key/ciphertext pairs shall have 128 128-bit
                  key/ciphertext pairs, and the second set of key/ciphertext pairs shall have 256
                  256-bit key/ciphertext pairs. Key i in each set shall have the leftmost i bits be
                  ones and the rightmost N-i bits be zeros, for i in [1,N]. The ciphertext value in
                  each pair shall be the value that results in an all-zeros plaintext when decrypted
                  with its corresponding key.</h:li>
                <h:li>KAT-4. To test the encrypt functionality of AES-CBC, the evaluator will supply
                  the set of 128 plaintext values described below and obtain the two ciphertext
                  values that result from AES-CBC encryption of the given plaintext using a 128-bit
                  key value of all zeros with an IV of all zeros and using a 256-bit key value of
                  all zeros with an IV of all zeros, respectively. Plaintext value i in each set
                  shall have the leftmost i bits be ones and the rightmost 128-i bits be zeros, for
                  i in [1,128].</h:li>
              </h:ul>To test the decrypt functionality of AES-CBC, the evaluator will perform the
              same test as for encrypt, using ciphertext values of the same form as the plaintext in
              the encrypt test as input and AES-CBC decryption. <h:br/>
              <h:b>AES-CBC Multi-Block Message Test</h:b>
	      <h:p/>
              The evaluator will test the encrypt functionality by encrypting an i-block
              message where 1 &lt; i &#x2264; 10. The evaluator will choose a key, an IV and plaintext
              message of length i blocks and encrypt the message, using the mode to be tested, with
              the chosen key and IV. The ciphertext shall be compared to the result of encrypting
              the same plaintext message with the same key and IV using a known good implementation.
              The evaluator will also test the decrypt functionality for each mode by decrypting an
              i-block message where 1 &lt; i &#x2264;10. The evaluator will choose a key, an IV and a
              ciphertext message of length i blocks and decrypt the message, using the mode to be
              tested, with the chosen key and IV. The plaintext shall be compared to the result of
              decrypting the same ciphertext message with the same key and IV using a known good
              implementation. 
	      <h:br/>
	      <h:b>AES-CBC Monte Carlo Tests</h:b>
	      <h:p/>
	      The evaluator will test the encrypt
              functionality using a set of 200 plaintext, IV, and key 3- tuples. 100 of these shall
              use 128 bit keys, and 100 shall use 256 bit keys. The plaintext and IV values shall be
              128-bit blocks. For each 3-tuple, 1000 iterations shall be run as follows:
              <h:pre>
              # Input: PT, IV, Key
              for i = 1 to 1000:
                if i == 1:
                      CT[1] = AES-CBC-Encrypt(Key, IV, PT)
                      PT = IV
                else:
                  CT[i] = AES-CBC-Encrypt(Key, PT) 
                  PT = CT[i-1]
              </h:pre>The
              ciphertext computed in the 1000th iteration (i.e., CT[1000]) is the result for that
              trial. This result shall be compared to the result of running 1000 iterations with the
              same values using a known good implementation. <h:br/>The evaluator will test the
              decrypt functionality using the same test as for encrypt, exchanging CT and PT and
              replacing AES-CBC-Encrypt with AES-CBC-Decrypt. <h:br/>
              <h:b>AES-GCM Monte Carlo Tests</h:b>
              <h:p/>The evaluator will test the authenticated encrypt functionality of AES-GCM for
              each combination of the following input parameter lengths: <h:ul>
                <h:li>128 bit and 256 bit keys</h:li>
                <h:li>Two plaintext lengths. One of the plaintext lengths shall be a non-zero integer
                  multiple of 128 bits, if supported. The other plaintext length shall not be an
                  integer multiple of 128 bits, if supported.</h:li>
                <h:li>Three AAD lengths. One AAD length shall be 0, if supported. One AAD length shall
                  be a non-zero integer multiple of 128 bits, if supported. One AAD length shall not
                  be an integer multiple of 128 bits, if supported.</h:li>
                <h:li>Two IV lengths. If 96 bit IV is supported, 96 bits shall be one of the two IV
                  lengths tested.</h:li>
              </h:ul>The evaluator will test the encrypt functionality using a set of 10 key,
              plaintext, AAD, and IV tuples for each combination of parameter lengths above and
              obtain the ciphertext value and tag that results from AES-GCM authenticated encrypt.
              Each supported tag length shall be tested at least once per set of 10. The IV value
              may be supplied by the evaluator or the implementation being tested, as long as it is
              known. <h:br/>The evaluator will test the decrypt functionality using a set of 10 key,
              ciphertext, tag, AAD, and IV 5-tuples for each combination of parameter lengths above
              and obtain a Pass/Fail result on authentication and the decrypted plaintext if Pass.
              The set shall include five tuples that Pass and five that Fail. <h:br/>The results from
              each test may either be obtained by the evaluator directly or by supplying the inputs
              to the implementer and receiving the results in response. To determine correctness,
              the evaluator will compare the resulting values to those obtained by submitting the
              same inputs to a known good implementation.<h:br/>
              <h:b>AES-CCM Tests</h:b>
              <h:p/>The evaluator will test the generation-encryption and decryption-verification
              functionality of AES-CCM for the following input parameter and tag lengths: <h:ul>
                <h:li>128 bit and 256 bit keys</h:li>
                <h:li>Two payload lengths. One payload length shall be the shortest supported payload
                  length, greater than or equal to zero bytes. The other payload length shall be the
                  longest supported payload length, less than or equal to 32 bytes (256 bits).
                </h:li>
                <h:li>Two or three associated data lengths. One associated data length shall be 0, if
                  supported. One associated data length shall be the shortest supported payload length,
                  greater than or equal to zero bytes. One associated data length shall be the longest
                  supported payload length, less than or equal to 32 bytes (256 bits). If the
                  implementation supports an associated data length of 2
                  16 bytes, an associated data length of 216 bytes shall be tested.
                </h:li>
                <h:li>Nonce lengths. All supported nonce lengths between 7 and 13 bytes, inclusive, shall
                  be tested.
                </h:li>
                <h:li>Tag lengths. All supported tag lengths of 4, 6, 8, 10, 12, 14 and 16 bytes shall be
                  tested.
                </h:li>
              </h:ul>
              To test the generation-encryption functionality of AES-CCM, the evaluator will perform the
              following four tests: 
	      <testlist>
		<test> For EACH supported key and associated data length and ANY supported
                  payload, nonce and tag length, the evaluator will supply one key value, one nonce
                  value and 10 pairs of associated data and payload values and obtain the resulting
                  ciphertext.
		</test>
		<test>For EACH supported key and payload length and ANY supported associated
                  data, nonce and tag length, the evaluator will supply one key value, one nonce value
                  and 10 pairs of associated data and payload values and obtain the resulting ciphertext.
		</test>

                <test>For EACH supported key and nonce length and ANY supported associated
                  data, payload and tag length, the evaluator will supply one key value and 10
                  associated data, payload and nonce value 3-tuples and obtain the resulting ciphertext.
                </test>
                <test>For EACH supported key and tag length and ANY supported associated data,
                  payload and nonce length, the evaluator will supply one key value, one nonce value
                  and 10 pairs of associated data and payload values and obtain the resulting ciphertext.
                </test>
	      </testlist>
              To determine correctness in each of the above tests, the evaluator will compare the
              ciphertext with the result of generation-encryption of the same inputs with a known good
              implementation. <h:br/>
              To test the decryption-verification functionality of AES-CCM, for EACH combination of
              supported associated data length, payload length, nonce length and tag length, the evaluator
              shall supply a key value and 15 nonce, associated data and ciphertext 3-tuples and obtain
              either a FAIL result or a PASS result with the decrypted payload. The evaluator will supply
              10 tuples that should FAIL and 5 that should PASS per set of 15. <h:br/>
              Additionally, the evaluator will use tests from the IEEE 802.11-02/362r6 document
              “Proposed Test vectors for IEEE 802.11 TGi”, dated September 10, 2002, Section 2.1 AESCCMP
              Encapsulation Example and Section 2.2 Additional AES CCMP Test Vectors to
              further verify the IEEE 802.11-2007 implementation of AES-CCMP. <h:br/>
              <h:b>AES-GCM Test</h:b>
              <h:p/>The evaluator will test the authenticated encrypt functionality of AES-GCM for each
                combination of the following input parameter lengths:
              <h:ul>
                <h:li>128 bit and 256 bit keys</h:li>
                <h:li>Two plaintext lengths. One of the plaintext lengths shall be a non-zero integer
                  multiple of 128 bits, if supported. The other plaintext length shall not be an integer
                  multiple of 128 bits, if supported.
                </h:li>
                <h:li>Three AAD lengths. One AAD length shall be 0, if supported. One AAD length shall
                  be a non-zero integer multiple of 128 bits, if supported. One AAD length shall not be
                  an integer multiple of 128 bits, if supported.
                </h:li>
                <h:li>Two IV lengths. If 96 bit IV is supported, 96 bits shall be one of the two IV lengths
                  tested.
                </h:li>
              </h:ul>
              The evaluator will test the encrypt functionality using a set of 10 key, plaintext, AAD, and
              IV tuples for each combination of parameter lengths above and obtain the ciphertext value
              and tag that results from AES-GCM authenticated encrypt. Each supported tag length shall be
              tested at least once per set of 10. The IV value may be supplied by the evaluator or the
              implementation being tested, as long as it is known.<h:br/>
              The evaluator will test the decrypt functionality using a set of 10 key, ciphertext, tag, AAD,
              and IV 5-tuples for each combination of parameter lengths above and obtain a Pass/Fail result
              on authentication and the decrypted plaintext if Pass. The set shall include five tuples that
              Pass and five that Fail.<h:br/>
              The results from each test may either be obtained by the evaluator directly or by supplying
              the inputs to the implementer and receiving the results in response. To determine correctness,
              the evaluator will compare the resulting values to those obtained by submitting the same
              inputs to a known good implementation.<h:br/>
              <h:b>XTS-AES Test</h:b>
              <h:p/>The evaluator will test the encrypt functionality of XTS-AES for each combination of the
              following input parameter lengths:
              <h:ul>
                <h:li>256 bit (for AES-128) and 512 bit (for AES-256) keys</h:li>
                <h:li>Three data unit (i.e., plaintext) lengths. One of the data unit lengths shall be a nonzero
                  integer multiple of 128 bits, if supported. One of the data unit lengths shall be an
                  integer multiple of 128 bits, if supported. The third data unit length shall be either the
                  longest supported data unit length or 216 bits, whichever is smaller.
                </h:li>
              </h:ul>
              using a set of 100 (key, plaintext and 128-bit random tweak value) 3-tuples and obtain the
              ciphertext that results from XTS-AES encrypt.<h:br/>
              The evaluator may supply a data unit sequence number instead of the tweak value if the
              implementation supports it. The data unit sequence number is a base-10 number ranging
              between 0 and 255 that implementations convert to a tweak value internally.<h:br/>
              The evaluator will test the decrypt functionality of XTS-AES using the same test as for
              encrypt, replacing plaintext values with ciphertext values and XTS-AES encrypt with XTSAES
              decrypt.<h:br/>
              <h:b>AES Key Wrap (AES-KW) and Key Wrap with Padding (AES-KWP) Test</h:b>
              <h:p/>The evaluator will test the authenticated encryption functionality of AES-KW for EACH
              combination of the following input parameter lengths:
              <h:ul>
                <h:li>128 and 256 bit key encryption keys (KEKs)</h:li>
                <h:li>Three plaintext lengths. One of the plaintext lengths shall be two semi-blocks (128
                  bits). One of the plaintext lengths shall be three semi-blocks (192 bits). The third data
                  unit length shall be the longest supported plaintext length less than or equal to 64
                  semi-blocks (4096 bits).
                </h:li>
              </h:ul>
              using a set of 100 key and plaintext pairs and obtain the ciphertext that results from AES-KW
              authenticated encryption. To determine correctness, the evaluator will use the AES-KW
              authenticated-encryption function of a known good implementation.<h:br/>
              The evaluator will test the authenticated-decryption functionality of AES-KW using the
              same test as for authenticated-encryption, replacing plaintext values with ciphertext values
              and AES-KW authenticated-encryption with AES-KW authenticated-decryption.<h:br/>
              The evaluator will test the authenticated-encryption functionality of AES-KWP using the
              same test as for AES-KW authenticated-encryption with the following change in the three
              plaintext lengths:
              <h:ul>
                <h:li>One plaintext length shall be one octet. One plaintext length shall be 20 octets (160
                  bits).</h:li>
                <h:li>
                  One plaintext length shall be the longest supported plaintext length less than or equal
                  to 512 octets (4096 bits).
                </h:li>
              </h:ul>
              The evaluator will test the authenticated-decryption functionality of AES-KWP using the
              same test as for AES-KWP authenticated-encryption, replacing plaintext values with
              ciphertext values and AES-KWP authenticated-encryption with AES-KWP authenticated-decryption.
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="fcs_cop.1(2)" name="Cryptographic Operation - Hashing (Refined)" status="threshold">
          <f-element id="fcs_cop.1.1(2)">
            <title>The <h:b>OS</h:b> shall perform cryptographic hashing services in accordance with a
              specified cryptographic algorithm SHA-1 and <selectables linebreak="yes">
                <selectable>SHA-256</selectable>
                <selectable>SHA-384</selectable>
                <selectable>SHA-512</selectable>
                <selectable>no other algorithms</selectable>
              </selectables> and message digest sizes 160 bits and <selectables linebreak="yes">
                <selectable>256 bits</selectable>
                <selectable>384 bits</selectable>
                <selectable>512 bits</selectable>
                <selectable>no other sizes</selectable>
              </selectables> that meet the following: FIPS Pub 180-4. </title>
            <note role="application"> 
	      Per NIST SP 800-131A, SHA-1 for generating digital signatures
              is no longer allowed, and SHA-1 for verification of digital signatures is strongly
              discouraged as there may be risk in accepting these signatures. 
	      <h:br/>
	      SHA-1 is currently required in order to comply with <linkref linkend="FCS_TLSC_EXT.1"/>
	      and, depending on selections, <linkref linkend="FCS_DTLS_EXT.1"/>.
              Vendors are strongly encouraged to implement updated protocols that support the SHA-2
              family; until updated protocols are supported, this PP allows support for SHA-1
              implementations in compliance with SP 800-131A. 
	      <h:br/> 
	      The intent of this requirement is to specify the hashing function. 
	      The hash selection must support the message digest
              size selection. The hash selection should be consistent with the overall strength of
              the algorithm used. </note>
            <aactivity> The evaluator will check that the association of the hash function with
              other application cryptographic functions (for example, the digital signature
              verification function) is documented in the TSS. <h:br/> The <abbr linkend="TSF"/>
              hashing functions can be implemented in one of two modes. The first mode is the
              byte-oriented mode. In this mode the <abbr linkend="TSF"/> only hashes messages that
              are an integral number of bytes in length; i.e., the length (in bits) of the message
              to be hashed is divisible by 8. The second mode is the bit-oriented mode. In this mode
              the <abbr linkend="TSF"/> hashes messages of arbitrary length. As there are different
              tests for each mode, an indication is given in the following sections for the
              bit-oriented vs. the byte-oriented testmacs. The evaluator will perform all of the
              following tests for each hash algorithm implemented by the <abbr linkend="TSF"/> and
              used to satisfy the requirements of this PP. <h:br/> The following tests require the
              developer to provide access to a test application that provides the evaluator with
              tools that are typically not found in the production application.<testlist>
                <test>Short Messages Test (Bit oriented Mode) - The evaluator will generate an input set
                  consisting of m+1 messages, where m is the block length of the hash algorithm. The
                  length of the messages range sequentially from 0 to m bits. The message text shall
                  be pseudorandomly generated. The evaluator will compute the message digest for each of
                  the messages and ensure that the correct result is produced when the messages are
                  provided to the <abbr linkend="TSF"/>.</test>
                <test>Short Messages Test (Byte oriented Mode) - The evaluator will generate an input set
                  consisting of m/8+1 messages, where m is the block length of the hash algorithm.
                  The length of the messages range sequentially from 0 to m/8 bytes, with each
                  message being an integral number of bytes. The message text shall be
                  pseudorandomly generated. The evaluator will compute the message digest for each of
                  the messages and ensure that the correct result is produced when the messages are
                  provided to the <abbr linkend="TSF"/>.</test>
                <test>Selected Long Messages Test (Bit oriented Mode) - The evaluator will generate an input
                  set consisting of m messages, where m is the block length of the hash algorithm.
                  The length of the <h:i>i</h:i>th message is 512 + 99&#x22c5;i, where 1 ≤ i ≤ m. The message
                  text shall be pseudorandomly generated. The evaluator will compute the message digest
                  for each of the messages and ensure that the correct result is produced when the
                  messages are provided to the <abbr linkend="TSF"/>.</test>
                <test>Selected Long Messages Test (Byte oriented Mode) - The evaluator will generate an
                  input set consisting of m/8 messages, where m is the block length of the hash
                  algorithm. The length of the <h:i>i</h:i>th message is 512 + 8&#x22c5;99&#x22c5;i, 
		  where 1 ≤ i ≤ m/8. The message text shall be pseudorandomly generated. 
		  The evaluator will compute
                  the message digest for each of the messages and ensure that the correct result is
                  produced when the messages are provided to the <abbr linkend="TSF"/>.</test>
                <test>Pseudorandomly Generated Messages Test -  This test is for byte-oriented
                  implementations only. The evaluator will randomly generate a seed that is n bits long,
                  where n is the length of the message digest produced by the hash function to be
                  tested. The evaluator will then formulate a set of 100 messages and associated digests
                  by following the algorithm provided in Figure 1 of [SHAVS]. The evaluator will then
                  ensure that the correct result is produced when the messages are provided to the
                  <abbr linkend="TSF"/>.
		</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="fcs_cop.1(3)" name="Cryptographic Operation - Signing (Refined)" status="threshold">
          <f-element id="fcs_cop.1.1(3)">
            <title>The <h:b>OS</h:b> shall perform cryptographic signature services (generation and
              verification) in accordance with a specified cryptographic algorithm <selectables
                linebreak="yes">
                <selectable>
		  <h:b>RSA schemes</h:b> using cryptographic key sizes of 2048-bit or greater
                  that meet the following: FIPS PUB 186-4, “Digital Signature Standard (DSS)”,  Section 4 
		</selectable>
                <selectable>
		  <h:b>ECDSA schemes</h:b> using “NIST curves” P-256, P-384 and 
		  <selectables>
                    <selectable>P-521</selectable>
                    <selectable>no other curves</selectable>
                  </selectables> 
		  that meet the following: FIPS PUB 186-4, “Digital Signature   Standard (DSS)”, Section 5 
		</selectable>
              </selectables>
              <h:strike>and cryptographic key sizes [assignment: cryptographic algorithm] 
                that meet the following: [assignment: list of standards].</h:strike>
              . 
            </title>
            <note role="application"> The ST Author should choose the algorithm implemented to
              perform digital signatures; if more than one algorithm is available, this requirement
              should be iterated to specify the functionality. For the algorithm chosen, the ST
              author should make the appropriate assignments/selections to specify the parameters
              that are implemented for that algorithm. RSA signature generation and verification is
              currently required in order to comply with <linkref linkend="FCS_TLSC_EXT.1"/>. </note>
            <aactivity>The evaluator will perform the following activities based on the selections
              in the <abbr linkend="ST"/>. <h:br/> The following tests require the developer to
              provide access to a test application that provides the evaluator with tools that are
              typically not found in the production application. <h:br/> 

	      <h:b>ECDSA Algorithm Tests</h:b>
	      <testlist>
                <test>ECDSA FIPS 186-4 Signature Generation Test. For each supported NIST curve
                  (i.e., P-256, P-384 and P-521) and SHA function pair, the evaluator will generate
                  10 1024-bit long messages and obtain for each message a public key and the
                  resulting signature values R and S. To determine correctness, the evaluator will
                  use the signature verification function of a known good implementation. </test>
                <test>
		  ECDSA FIPS 186-4 Signature Verification Test. For each supported NIST curve
                  (i.e., P-256, P-384 and P-521) and SHA function pair, the evaluator will generate
                  a set of 10 1024-bit message, public key and signature tuples and modify one of
                  the values (message, public key or signature) in five of the 10 tuples.
		  The evaluator will verify that 5 responses indicate success and
		  5 responses indicate failure.
		</test>
              </testlist> 
	      <h:b>RSA Signature Algorithm Tests </h:b>
	      <testlist>
                <test>Signature Generation Test. The evaluator will verify the implementation of
                  RSA Signature Generation by the <abbr linkend="OS"/> using the Signature
                  Generation Test. To conduct this test the evaluator must generate or obtain 10
                  messages from a trusted reference implementation for each modulus size/SHA
                  combination supported by the <abbr linkend="TSF"/>. 
		  The evaluator will have the
                    <abbr linkend="OS"/> use its private key and modulus value to sign these
                  messages. The evaluator will verify the correctness of the <abbr linkend="TSF"
                  />’s signature using a known good implementation and the associated public keys to
                  verify the signatures. </test>
                <test>Signature Verification Test. The evaluator will perform the Signature
                  Verification test to verify the ability of the <abbr linkend="OS"/> to recognize
                  another party’s valid and invalid signatures. The evaluator will inject errors
                  into the test vectors produced during the Signature Verification Test by
                  introducing errors in some of the public keys, e, messages, IR format, and/or
                  signatures. 
		  The evaluator will verify that the <abbr linkend="OS"/> returns failure when
		  validating each signature.
		</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="fcs_cop.1(4)" status="threshold" name="Cryptographic Operation - Keyed-Hash Message Authentication (Refined)">
          <f-element id="fcs_cop.1.1(4)">
            <title>The <h:b>OS</h:b> shall perform keyed-hash message authentication services 
	    in accordance with a specified cryptographic algorithm
	      <selectables linebreak="yes">
                <selectable>SHA-1</selectable>
		<selectable>SHA-256</selectable>
                <selectable>SHA-384</selectable>
                <selectable>SHA-512</selectable>
              </selectables> 
	      with key sizes <assignable>key size (in bits) used in HMAC</assignable>
              <h:b>and message digest sizes 
	      <selectables>
                <selectable>160 bits</selectable>
                <selectable>256 bits</selectable>
                <selectable>384 bits</selectable>
                <selectable>512 bits</selectable>
	      </selectables></h:b> that meet the following: FIPS Pub 198-1 <h:i>The Keyed-Hash Message
                Authentication Code</h:i> and FIPS Pub 180-4 <h:i>Secure Hash Standard</h:i>. </title>
            <note role="application">
	      The intent of this requirement is to specify the keyed-hash
              message authentication function used for key establishment purposes for the various
              cryptographic protocols used by the OS (e.g., trusted channel). 
	      The hash selection must support the message digest size selection.
	      The hash selection should be consistent with the overall strength of the 
	      algorithm used for <linkref linkend="FCS_COP.1(1)"/>. 
	      Though HMAC with SHA-256 (HMAC-SHA-256) is listed as a selectable cipher suite
	      in this requirement, <linkref linkend="FCS_TLSC_EXT.1"/> effectively makes its 
	      implementation mandatory for compliant OSs.
	      <h:br/>
	      SHA-1 is currently required in order to comply with <linkref linkend="FCS_TLSC_EXT.1"/>
	      and, depending on selections, <linkref linkend="FCS_DTLS_EXT.1"/>.
	      SHA-1 is currently required in order to comply with <linkref linkend="FCS_TLSC_EXT.1"/>,
	      but has been deprecated and should not be used for any other purpose beyond TLS and DTLS	          </note>
            <aactivity>The evaluator will perform the following activities based on the selections
              in the <abbr linkend="ST"/>. <h:br/> For each of the supported parameter sets, the
              evaluator will compose 15 sets of test data. Each set shall consist of a key and
              message data. The evaluator will have the OS generate HMAC tags for these sets of
              test data. The resulting MAC tags shall be compared against the result of generating HMAC
              tags with the same key and IV using a known-good implementation. </aactivity>
          </f-element>
        </f-component>
        <f-component id="fcs_dtls_ext.1" name="DTLS Implementation" status="sel-based">
	  <selection-depends req="ftp_itc_ext.1.1"/>
          <f-element id="fcs_dtls_ext.1.1">
            <title>The OS shall implement the DTLS protocol in accordance with 
              <selectables>
                <selectable>DTLS 1.0 (RFC 4347)</selectable>
                <selectable>DTLS 1.2 (RFC 6347)</selectable>
              </selectables>.
            </title>
            <aactivity>
              <testlist>
                <test> The evaluator will attempt to establish a connection with a DTLS server,
                  observe the traffic with a packet analyzer, and verify that the connection
                  succeeds and that the traffic is identified as DTLS. </test>
                <h:br/> Other tests are performed in conjunction with the Assurance Activity listed
                for <linkref linkend="FCS_TLSC_EXT.1"/>. </testlist>
            </aactivity>
          </f-element>
          <f-element id="fcs_dtls_ext.1.2">
            <title>The OS shall implement the requirements in TLS (<linkref linkend="FCS_TLSC_EXT.1"
            />) for the DTLS implementation, except where variations are allowed according to DTLS
              1.2 (RFC 6347). </title>
            <note role="application"> Differences between DTLS 1.2 and TLS 1.2 are outlined in RFC
              6347; otherwise the protocols are the same. In particular, for the applicable security
              characteristics defined for the <abbr linkend="TSF"/>, the two protocols do not
              differ. Therefore, all application notes and assurance activities that are listed for
              <abbr title="Transport Layer Security">TLS</abbr> apply to the DTLS implementation. </note>
            <aactivity> The evaluator will perform the assurance activities listed for <linkref
              linkend="FCS_TLSC_EXT.1"/>. </aactivity>
          </f-element>
        </f-component>
        <f-component id="fcs_rbg_ext.1" name="Random Bit Generation" status="threshold">
          <f-element id="fcs_rbg_ext.1.1">
            <title> 
              The OS shall perform all deterministic random bit generation (DRBG) services in
              accordance with NIST Special Publication 800-90A using
                <selectables linebreak="yes">
                    <selectable>Hash_DRBG (any)</selectable>
                    <selectable>HMAC_DRBG (any)</selectable>
                    <selectable>CTR_DRBG (AES)</selectable>
                  </selectables>
            </title>
            <note role="application">
              NIST SP 800-90A contains three different methods of generating random numbers; each
              of these, in turn, depends on underlying cryptographic primitives (hash
              functions/ciphers). 
	      The <abbr linkend="ST"/> author will select the function used and include the specific underlying cryptographic primitives
              used in the requirement or in the TSS. 
	      While any of the identified hash functions
              (SHA-1, SHA-224, SHA-256, SHA-384, SHA-512) are allowed for Hash_DRBG or HMAC_DRBG,
              only AES-based implementations for CTR_DRBG are allowed. 
            </note>
            <aactivity>
              The evaluator will perform 15 trials for the RNG implementation. If the RNG
                  is configurable, the evaluator will perform 15 trials for each configuration. The
                  evaluator will also confirm that the operational guidance contains appropriate
                  instructions for configuring the RNG functionality. <h:br/> If the RNG has
                  prediction resistance enabled, each trial consists of (1) instantiate DRBG, (2)
                  generate the first block of random bits (3) generate a second block of random bits
                  (4) uninstantiate. The evaluator verifies that the second block of random bits is
                  the expected value. The evaluator will generate eight input values for each
                  trial. The first is a count (0 – 14). The next three are entropy input, nonce, and
                  personalization string for the instantiate operation. The next two are additional
                  input and entropy input for the first call to generate. The final two are
                  additional input and entropy input for the second call to generate. These values
                  are randomly generated. “generate one block of random bits” means to generate
                  random bits with number of returned bits equal to the Output Block Length (as
                  defined in NIST SP 800-90A). <h:br/> If the RNG does not have prediction resistance,
                  each trial consists of (1) instantiate DRBG, (2) generate the first block of
                  random bits (3) reseed, (4) generate a second block of random bits (5)
                  uninstantiate. The evaluator verifies that the second block of random bits is the
                  expected value. The evaluator will generate eight input values for each trial.
                  The first is a count (0 – 14). The next three are entropy input, nonce, and
                  personalization string for the instantiate operation. The fifth value is
                  additional input to the first call to generate. The sixth and seventh are
                  additional input and entropy input to the call to reseed. The final value is
                  additional input to the second generate call. 
                  <h:br/> The following values should be set/generated as described:<h:ul>
                  <h:li> <h:b>Entropy input:</h:b> The length of the entropy input value must equal the seed
                  length.</h:li>
		  
                  <h:li><h:b>Nonce:</h:b> If a nonce is supported (CTR_DRBG with no Derivation Function does
                  not use a nonce), the nonce bit length is one-half the seed length. </h:li>
                  <h:li><h:b>Personalization string:</h:b> The length of the personalization string must be
                  less than or equal to seed length. If the implementation only supports one
                  personalization string length, then the same length can be used for both values.
                  If more than one string length is support, the evaluator will use personalization
                  strings of two different lengths. If the implementation does not use a
                  personalization string, no value needs to be supplied. </h:li>
                  <h:li><h:b>Additional input:</h:b> The additional input bit lengths have the same defaults
                  and restrictions as the personalization string lengths.</h:li>
		</h:ul>
            </aactivity>
          </f-element>
          
          <f-element id="fcs_rbg_ext.1.2">
            <title>
              The deterministic RBG used by the OS shall be seeded by an entropy source that
              accumulates entropy from a
              <selectables linebreak="yes">
                <selectable>software-based noise source</selectable>
                <selectable>platform-based noise source</selectable>
              </selectables>
              with a minimum of
              <selectables linebreak="yes">
                <selectable>128 bits</selectable>
                <selectable>256 bits</selectable>
              </selectables>
              of entropy at least equal to the greatest security strength (according to NIST SP 800-57) 
              of the keys and hashes that it will generate. 
	    </title>
            <note role="application">For the first
              selection in this requirement, the <abbr linkend="ST"/> author selects 'software-based noise source' if 
              any additional noise sources are used as input to the DRBG.
              <h:br />In the second selection in this requirement, the <abbr linkend="ST"/> author selects the 
              appropriate number of bits of entropy that corresponds to the greatest security 
              strength of the algorithms included in the <abbr linkend="ST"/>. Security strength is defined in Tables 
              2 and 3 of NIST SP 800-57A. For example, if the implementation includes 2048-bit RSA 
              (security strength of 112 bits), AES 128 (security strength 128 bits), and 
              HMAC-SHA-256 (security strength 256 bits), then the <abbr linkend="ST"/> author would select 256 bits.
            </note>
            <aactivity>Documentation shall be produced - and the evaluator will perform the
              activities - in accordance with <appref linkend="entropyappendix"/> and
              the 
	      <h:a href="https://www.niap-ccevs.org/Documents_and_Guidance/ccevs/Entropy%20Documentation%20and%20Assessment%20Clarification.pdf"
	      >Clarification to the Entropy Documentation and Assessment Annex</h:a>.
              <h:br />In the future, specific statistical testing (in line with NIST SP 800-90B) will 
              be required to verify the entropy estimates.
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="fcs_sto_ext.1" name="Storage of Sensitive Data" status="threshold">
          <f-element id="fcs_sto_ext.1.1">
            <title>
	      The OS shall implement functionality to encrypt sensitive data 
	      stored in non-volatile storage and provide interfaces to applications to invoke this functionality.
            </title>
			<note role="application">Sensitive data shall be identified in the TSS by the ST 
			author, and minimally includes credentials and keys.  The interface for invoking the
			functionality could take a variety of forms: it could consist of an API, 
			or simply well-documented conventions for accessing credentials stored as files.
			</note>
            <aactivity>The evaluator will check the TSS to ensure that it lists all persistent
              sensitive data for which the OS provides a storage capability.  For each of these
              items, the evaluator will confirm that the TSS lists for what purpose it can be used,
              and how it is stored.  The evaluator will confirm that 
			  cryptographic operations used to protect the data occur as specified in <linkref linkend="fcs_cop.1(1)"/>.
	      <h:br/>
	      The evaluator will also consult the developer documentation to verify that an interface
	      exists for applications to securely store credentials.  
            </aactivity>
          </f-element>
<!--          <f-element id="fcs_sto_ext.1.2">
            <title>The TSF shall associate stored credentials with users.</title>
            <aactivity>
              <testlist>
                <test>The evaluators shall create a new user account on the system with a
                  credential. The evaluator will ensure that the user can authenticate using this credential. </test>
                <test> The evaluators shall create a second user account on the system with a
                  credential. The evaluator will then attempt to access the first user's credential
                  from the second user's session. The evaluator will ensure that the second user is
                  unable to access or authenticate using the first user's credential. </test>
                <test> The evaluator will then re-log into the system with the first user. The
                  evaluator then shall attempt to access the second user's credential from the first
                  user's session. The evaluator will ensure that the first user is unable to access or authenticate using
                  the second user's credential. </test>
              </testlist>
            </aactivity>
          </f-element> -->
        </f-component>

        <f-component id="fcs_tlsc_ext.1" name="TLS Client Protocol" status="threshold">
          <f-element id="fcs_tlsc_ext.1.1">
            <title> The OS shall implement <abbr title="Transport Layer Security">TLS</abbr> 1.2
              (RFC 5246)  supporting the following cipher suites:
              <h:p/>Mandatory cipher suites: TLS_RSA_WITH_AES_128_CBC_SHA as defined in RFC 5246
              <h:p/>Optional cipher suites: 
	      <selectables linebreak="yes">
                <selectable>TLS_DHE_RSA_WITH_AES_128_CBC_SHA as defined in RFC 5246</selectable>
                <selectable>TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>TLS_DHE_RSA_WITH_AES_256_CBC_SHA as defined in RFC 5246</selectable>
                <selectable>TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA as defined in RFC 4492</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA as defined in RFC 4492</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA as defined in RFC 4492</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA as defined in RFC 4492</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
                <selectable>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
                <selectable>TLS_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>TLS_RSA_WITH_AES_256_CBC_SHA as defined in RFC 5246</selectable>
                <selectable>TLS_RSA_WITH_AES_256_CBC_SHA256 as defined in RFC 5246</selectable>
                <selectable>no other cipher suite</selectable>
              </selectables> . </title>
            <note role="application">The cipher suites to be tested in the evaluated configuration
              are limited by this requirement. The <abbr title="Security Target" linkend="ST">ST
              </abbr> author should select the optional cipher suites that are supported; if there
              are no cipher suites supported other than the mandatory suites, 
	      then “No other cipher suite” should be selected. 
	      It is necessary to limit the cipher suites that can be used in an evaluated
              configuration administratively on the server in the test environment. The Suite B
              algorithms listed above (RFC 6460) are the preferred algorithms for implementation.
              TLS_RSA_WITH_AES_128_CBC_SHA is required in order to ensure compliance with RFC 5246.
              <h:br/> These requirements will be revisited as new <abbr
                title="Transport Layer Security">TLS</abbr> versions are standardized by the IETF.
              <h:br/> If any cipher suites are selected using ECDHE, then <linkref
                linkend="FCS_TLSC_EXT.2.1"/> is required. 
            </note>
            <aactivity>
              The evaluator will check the description of the implementation of this
              protocol in the <abbr title="TOE Summary Specification" linkend="TSS">TSS</abbr> to
              ensure that the cipher suites supported are specified. The evaluator will check the
                <abbr title="TOE Summary Specification" linkend="TSS">TSS</abbr> to ensure that the
              cipher suites specified include those listed for this component. The evaluator will
              also check the operational guidance to ensure that it contains instructions on
              configuring the OS so that
              TLS conforms to the description in the <abbr title="TOE Summary Specification"
                linkend="TSS">TSS</abbr>. The evaluator will also perform the following tests: 
              <testlist>
                <test> 
                  The evaluator will establish a <abbr title="Transport Layer Security">TLS</abbr> connection 
                  using each of the cipher suites specified by the
                  requirement. This connection may be established as part of the establishment of a
                  higher-level protocol, e.g., as part of an EAP session. It is sufficient to
                  observe the successful negotiation of a cipher suite to satisfy the intent of the
                  test; it is not necessary to examine the characteristics of the encrypted traffic
                  in an attempt to discern the cipher suite being used (for example, that the
                  cryptographic algorithm is 128-bit AES and not 256-bit AES). 
                </test>
                <test> 
                  The evaluator will attempt to establish the connection using a server with a
                  server certificate that contains the Server Authentication purpose in the
                  extendedKeyUsage field and verify that a connection is established. The evaluator
                  will then verify that the client rejects an otherwise valid server certificate
                  that lacks the Server Authentication purpose in the extendedKeyUsage field and a
                  connection is not established. Ideally, the two certificates should be identical
                  except for the extendedKeyUsage field. 
                </test>
                <test> 
                  The evaluator will send a server certificate in the <abbr title="Transport Layer Security">TLS</abbr> connection 
                  that does not match the server-selected cipher suite (for example, send a ECDSA certificate while using the
                  TLS_RSA_WITH_AES_128_CBC_SHA cipher suite or send a RSA certificate while using one
                  of the ECDSA cipher suites.) The evaluator will verify that the OS disconnects after
                  receiving the server’s Certificate handshake message. 
                </test>
                <test> 
                  The evaluator will configure the server to select the
                  TLS_NULL_WITH_NULL_NULL cipher suite and verify that the client denies the
                  connection. 
                </test>
                <test> 
                  The evaluator will perform the following modifications to the traffic: 
                  <testlist>
                    <test> 
                      Change the <abbr title="Transport Layer Security">TLS</abbr> version
                      selected by the server in the Server Hello to a non-supported <abbr 
                      title="Transport Layer Security">TLS</abbr> version (for example 1.3
                      represented by the two bytes 03 04) and verify that the client rejects the
                      connection. 
                    </test>
                    <test>
                      Modify at least one byte in the server’s nonce in the Server Hello
                      handshake message, and verify that the client rejects the Server Key Exchange
                      handshake message (if using a DHE or ECDHE cipher suite) or that the server
                      denies the client’s Finished handshake message. 
                    </test>
                    <test>
                      Modify the server’s selected cipher suite in the Server Hello handshake
                      message to be a cipher suite not presented in the Client Hello handshake
                      message. The evaluator will verify that the client rejects the connection
                      after receiving the Server Hello.
                    </test>
                    <test>
                      Modify the signature block in the Server’s Key Exchange handshake
                      message, and verify that the client rejects the connection after receiving the
                      Server Key Exchange message.
                    </test>
                    <test> 
                      Modify a byte in the Server Finished handshake message, and verify that
                      the client sends a fatal alert upon receipt and does not send any application
                      data. 
                    </test>
                    <test>
                      Send a garbled message from the Server after the Server has issued the
                      Change Cipher Spec message and verify that the client denies the connection.
                    </test>
                  </testlist>
                </test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="fcs_tlsc_ext.1.2">
            <title> The OS shall verify that the presented identifier matches the reference
              identifier according to RFC 6125. </title>
            <note role="application"> The rules for verification of identity are described in
              Section 6 of RFC 6125. The reference identifier is established by the user (e.g.
              entering a URL into a web browser or clicking a link), by configuration (e.g.
              configuring the name of a mail server or authentication server), or by an application
              (e.g. a parameter of an API) depending on the OS service. Based on a singular
              reference identifier’s source domain and application service type (e.g. HTTP, SIP,
              LDAP), the client establishes all reference identifiers which are acceptable, such as
              a Common Name for the Subject Name field of the certificate and a (case-insensitive)
              DNS name, URI name, and Service Name for the Subject Alternative Name field. The
              client then compares this list of all acceptable reference identifiers to the
              presented identifiers in the <abbr title="Transport Layer Security">TLS</abbr>
              server’s certificate. <h:br/> The preferred method for verification is the Subject
              Alternative Name using DNS names, URI names, or Service Names. Verification using the
              Common Name is required for the purposes of backwards compatibility. Additionally,
              support for use of IP addresses in the Subject Name or Subject Alternative name is
              discouraged, as against best practices, but may be implemented. Finally, the client
              should avoid constructing reference identifiers using wildcards. However, if the
              presented identifiers include wildcards, the client must follow the best practices
              regarding matching; these best practices are captured in the assurance activity. 
            </note>
            <aactivity> 
              The evaluator will ensure that the <abbr title="TOE Summary Specification"
                linkend="TSS">TSS</abbr> describes the client’s method of establishing all reference
              identifiers from the application-configured reference identifier, including which
              types of reference identifiers are supported (e.g. Common Name, DNS Name, URI Name,
              Service Name, or other application-specific Subject Alternative Names) and whether IP
              addresses and wildcards are supported. The evaluator will ensure that this
              description identifies whether and the manner in which certificate pinning is
              supported or used by the OS.
              <h:br/> The evaluator will verify that the AGD guidance includes instructions for
              setting the reference identifier to be used for the purposes of certificate validation
              in <abbr title="Transport Layer Security">TLS</abbr>. <h:br/> The evaluator will
              configure the reference identifier according to the AGD guidance and perform the
              following tests during a <abbr title="Transport Layer Security">TLS</abbr> connection: 
              <testlist>
                <test> The evaluator will present a server certificate that does not contain an
                  identifier in either the Subject Alternative Name (SAN) or Common Name (CN) that
                  matches the reference identifier. The evaluator will verify that the connection
                  fails. 
                </test>
                <test> 
                  The evaluator will present a server certificate that contains a CN that
                  matches the reference identifier, contains the SAN extension, but does not contain
                  an identifier in the SAN that matches the reference identifier. The evaluator
                  shall verify that the connection fails. The evaluator will repeat this test for
                  each supported SAN type. 
                </test>
                <test> 
                  The evaluator will present a server certificate that contains a CN that
                  matches the reference identifier and does not contain the SAN extension. The
                  evaluator will verify that the connection succeeds. 
                </test>
                <test> 
                  The evaluator will present a server certificate that contains a CN that does
                  not match the reference identifier but does contain an identifier in the SAN that
                  matches. The evaluator will verify that the connection succeeds. 
                </test>
                <test> 
                  The evaluator will perform the following wildcard tests with each supported
                  type of reference identifier: 
                  <testlist>
                    <test>
                      The evaluator will present a server certificate containing a wildcard
                      that is not in the left-most label of the presented identifier (e.g.
                      foo.*.example.com) and verify that the connection fails. 
                    </test>
                    <test>
                      The evaluator will present a server certificate containing a wildcard in
                      the left-most label but not preceding the public suffix (e.g. *.example.com).
                      The evaluator will configure the reference identifier with a single left-most
                      label (e.g. foo.example.com) and verify that the connection succeeds. The
                      evaluator will configure the reference identifier without a left-most label
                      as in the certificate (e.g. example.com) and verify that the connection fails.
                      The evaluator will configure the reference identifier with two left-most
                      labels (e.g. bar.foo.example.com) and verify that the connection fails. 
                    </test>
                    <test> 
                      The evaluator will present a server certificate containing a wildcard in
                      the left-most label immediately preceding the public suffix (e.g. *.com). The
                      evaluator will configure the reference identifier with a single left-most
                      label (e.g. foo.com) and verify that the connection fails. The evaluator will
                      configure the reference identifier with two left-most labels (e.g.
                      bar.foo.com) and verify that the connection fails. 
                    </test>
                  </testlist>
                </test>
                <test> 
                  [conditional] If URI or Service name reference identifiers are supported, the
                  evaluator will configure the <abbr title="Domain Name System">DNS</abbr> name and
                  the service identifier. The evaluator will present a server certificate
                  containing the correct <abbr title="Domain Name System">DNS</abbr> name and
                  service identifier in the URIName or SRVName fields of the SAN and verify that the
                  connection succeeds. The evaluator will repeat this test with the wrong service
                  identifier (but correct <abbr title="Domain Name System">DNS</abbr> name) and
                  verify that the connection fails. 
                </test>
                <test> 
                  [conditional] If pinned certificates are supported the evaluator will
                  present a certificate that does not match the pinned certificate and verify that
                  the connection fails. 
                </test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="fcs_tlsc_ext.1.3">
            <title>The OS shall only establish a trusted channel if the peer certificate is valid. </title>
            <note role="application"> Validity is determined by the identifier verification,
              certificate path, the expiration date, and the revocation status in accordance with
              RFC 5280. Certificate validity shall be tested in accordance with testing performed
              for <linkref linkend="FIA_X509_EXT.1"/>. <h:br/> For <abbr
                title="Transport Layer Security">TLS</abbr> connections, this channel shall not be
              established if the peer certificate is invalid.
	    </note>
            <aactivity> The evaluator will use <abbr title="Transport Layer Security">TLS</abbr> as
              a function to verify that the validation rules in <linkref linkend="FIA_X509_EXT.1.1"
              /> are adhered to and shall perform the following additional test: <testlist>
                <test> The evaluator will demonstrate that a peer using a certificate without a
                  valid certification path results in an authenticate failure. Using the
                  administrative guidance, the evaluator will then load the trusted CA
                  certificate(s) needed to validate the peer's certificate, and demonstrate that the
                  connection succeeds. The evaluator then shall delete one of the CA certificates,
                  and show that the connection fails. </test>
                <test> The evaluator will demonstrate that a peer using a certificate which has
                  been revoked results in an authentication failure. </test>
                <test> The evaluator will demonstrate that a peer using a certificate which has
                  passed its expiration date results in an authentication failure. </test>
                <test> the evaluator will demonstrate that a peer using a certificate which does
                  not have a valid identifier shall result in an authentication failure. </test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="fcs_tlsc_ext.2" name="TLS Client Protocol" status="sel-based">
	  <selection-depends req="fcs_tlsc_ext.1.1"/>
          <f-element id="fcs_tlsc_ext.2.1">
            <title> The OS shall present the Supported Elliptic Curves Extension in the Client Hello
              with the following NIST curves: <selectables>
                <selectable>secp256r1</selectable>
                <selectable>secp384r1</selectable>
                <selectable>secp521r1</selectable>
              </selectables> and no other curves. </title>
            <note role="application"> This requirement limits the elliptic curves allowed for
              authentication and key agreement to the NIST curves from <linkref
                linkend="FCS_COP.1(3)"/> and <linkref linkend="FCS_CKM.1(1)"/> and <linkref
                linkend="FCS_CKM.2(1)"/>. This extension is required for clients supporting Elliptic
              Curve cipher suites. </note>
            <aactivity> The evaluator will verify that <abbr title="TOE Summary Specification"
                linkend="TSS">TSS</abbr> describes the supported Elliptic Curves Extension and
              whether the required behavior is performed by default or may be configured. If the
                <abbr title="TOE Summary Specification" linkend="TSS">TSS</abbr> indicates that the
              supported Elliptic Curves Extension must be configured to meet the requirement, the
              evaluator will verify that AGD guidance includes configuration of the supported
              Elliptic Curves Extension. <h:br/> The evaluator will also perform the following test: 
              <h:br/>
              The evaluator will configure the server to perform an ECDHE key exchange
              message in the <abbr title="Transport Layer Security">TLS</abbr> connection using
              a non-supported ECDHE curve (for example, P-192) and shall verify that the OS disconnects after
              receiving the server's Key Exchange handshake message. 
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="fcs_tlsc_ext.3" name="TLS Client Protocol" status="objective">
          <f-element id="fcs_tlsc_ext.3.1">
            <title> The OS shall present the signature_algorithms extension in the Client Hello with
              the supported_signature_algorithms value containing the following hash algorithms: <selectables>
                <selectable>SHA256</selectable>
                <selectable>SHA384</selectable>
                <selectable>SHA512</selectable>
              </selectables> and no other hash algorithms. </title>
            <note role="application"> This requirement limits the hashing algorithms supported for
              the purpose of digital signature verification by the client and limits the server to
              the supported hashes for the purpose of digital signature generation by the server.
              The signature_algorithm extension is only supported by <abbr
                title="Transport Layer Security">TLS</abbr> 1.2. </note>
            <aactivity> The evaluator will verify that <abbr title="TOE Summary Specification"
                linkend="TSS">TSS</abbr> describes the signature_algorithm extension and whether the
              required behavior is performed by default or may be configured. If the <abbr
                title="TOE Summary Specification" linkend="TSS">TSS</abbr> indicates that the
              signature_algorithm extension must be configured to meet the requirement, the
              evaluator will verify that AGD guidance includes configuration of the
              signature_algorithm extension. <h:br/> The evaluator will also perform the following
              test:
              <h:br/>
                The evaluator will configure the server to send a certificate in the <abbr
                title="Transport Layer Security">TLS</abbr> connection that is not supported
                according to the Client’s HashAlgorithm enumeration within the
                signature_algorithms extension (for example, send a certificate with a SHA-1
                signature). The evaluator will verify that the OS disconnects after receiving the server’s Certificate
                handshake message.
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="fcs_tlsc_ext.4" name="TLS Client Protocol" status="optional">
          <f-element id="fcs_tlsc_ext.4.1">
            <title> The OS shall support mutual authentication using X.509v3 certificates. </title>
            <note role="application"> The use of X.509v3 certificates for <abbr
                title="Transport Layer Security">TLS</abbr> is addressed in <linkref
                linkend="FIA_X509_EXT.2.1"/>. This requirement adds that a client must be capable of
              presenting a certificate to a <abbr title="Transport Layer Security">TLS</abbr> server
              for <abbr title="Transport Layer Security">TLS</abbr> mutual authentication. </note>
            <aactivity> The evaluator will ensure that the <abbr title="TOE Summary Specification"
                linkend="TSS">TSS</abbr> description required per <linkref
                linkend="FIA_X509_EXT.2.1"/> includes the use of client-side certificates for TLS
              mutual authentication. <h:br/> The evaluator will verify that the AGD guidance required
              per <linkref linkend="FIA_X509_EXT.2.1"/> includes instructions for configuring the
              client-side certificates for <abbr title="Transport Layer Security">TLS</abbr> mutual
              authentication. <h:br/> The evaluator will also perform the following test: 
              <h:br/>
              Configure the server to require mutual authentication and then modify a
              byte in a CA field in the Server’s Certificate Request handshake message. The
              modified CA field must not be the CA used to sign the client’s certificate.
              The evaluator will verify the connection is unsuccessful.
            </aactivity>
          </f-element>
	</f-component>
	<!--
	    <f-component id="fcs_srv_ext.1" name="Cryptographic Algorithm Services" status="threshold">
          <f-element id="fcs_srv_ext.1.1">
	    <title> 
	      The <h:b>OS</h:b> shall provide a mechanism for applications and services to request 
	      the OS to perform the following cryptographic operations:
	      <ul>
		<li>
		  All selected algorithms in <linkref linkend="FCS_CKM.1.1(1)"/>,
		</li>
		<li>All mandatory and selected algorithms in <linkref linkend="FCS_CKM.2.1(1)"/> </li>
		<li>All selected algorithms in <linkref linkend="FCS_CKM_EXT.4.1"/></li>
		<li>All selected algorithms in <linkref linkend="FCS_CKM_EXT.4.2"/></li>
		<li>All selected algorithms in <linkref linkend="FCS_RBG_EXT.1.1"/></li>
		<li>
		  The following algorithms in <linkref linkend="FCS_COP.1.1(1)"/>: 
		  AES-CBC, 
		  <selectables>
		    <selectable>AES Key Wrap</selectable>
		    <selectable>AES Key Wrap with Padding</selectable>
		    <selectable>AES-GCM</selectable>
		    <selectable>AES-CCM</selectable>
		    <selectable>no other modes</selectable> 
		  </selectables>
		</li>
		<li>
		  All mandatory and selected algorithms in <linkref linkend="FCS_COP.1.1(2)"/>
		</li>
                <li>
		  All mandatory and selected algorithms in <linkref linkend="FCS_COP.1.1(3)"/>
		</li>
		<li> 
		  All mandatory and selected algorithms in <linkref linkend="FCS_COP.1.1(4)"/>
		</li>
	      </ul>
	    </title>
	    <note role="application">
	    </note>
	    <aactivity>
	    </aactivity>
	  </f-element>
	</f-component>-->
      </subsection>
      <subsection title="User Data Protection (FDP)" id="fdp">
        <f-component id="fdp_acf_ext.1" name="Access Controls for Protecting User Data" status="threshold">
          <f-element id="fdp_acf_ext.1.1">
            <title>
	      The OS shall implement access controls which can prohibit unprivileged users from
              accessing files and directories owned by other users.
            </title>
	    <note role="application">
	      Effective protection by access controls may also depend
	      upon system configuration.  This requirement is designed to ensure
	      that, for example, files and directories owned by one user in a multi user system
	      can be protected from access by another user in that system.  
            </note>
            <aactivity>
	      The evaluator will confirm that the TSS comprehensively describes the access control policy enforced by the OS.
              The description must include the rules by which accesses to particular files and directories
	      are determined for particular users.
              The evaluator will inspect the TSS to ensure that it describes the access control rules 
              in such detail that given any possible scenario between a user and a file governed by
              the OS the access control decision is unambiguous.
              <h:br/>
              The evaluator will create two new standard user accounts on the system and conduct the following tests:
              <testlist>
                <test>
                  The evaluator will authenticate to the system as the first user and create a file within that user's home directory. 
		  The evaluator will then log off the system and log in as the second user.
		  The evaluator will then attempt to read the file created in the first user's home directory.
		  The evaluator will ensure that the read attempt is denied.
                </test>
                <test>
                  The evaluator will authenticate to the system as the first user and create a file within that user's home directory. 
		  The evaluator will then log off the system and log in as the second user.
		  The evaluator will then attempt to modify the file created in the first user's home directory.
		  The evaluator will ensure that the modification is denied.
                </test>
                <test>
                  The evaluator will authenticate to the system as the first user and create a file within that user's user directory. 
		  The evaluator will then log off the system and log in as the second user.
		  The evaluator will then attempt to delete the file created in the first user's home directory.
		  The evaluator will ensure that the deletion is denied.
                </test>
                <test>
                  The evaluator will authenticate to the system as the first user.
		  The evaluator will attempt to create a file in the second user's home directory.
                  The evaluator will ensure that the creation of the file is denied.
                </test>       
                <test>
                  The evaluator will authenticate to the system as the first user and attempt to modify the file created in the first user's home directory.
                  The evaluator will ensure that the modification of the file is accepted.
                </test>       
                <test>
                  The evaluator will authenticate to the system as the first user and attempt to delete the file created in the first user's directory.
                  The evaluator will ensure that the deletion of the file is accepted.
                </test>
              </testlist>
            </aactivity>
          </f-element>          
        </f-component>
        <f-component id="fdp_ifc_ext.1" name="Information flow control " status="threshold">
          <f-element id="fdp_ifc_ext.1.1">
            <title> The OS shall
			<selectables linebreak="yes">
              <selectable>provide an interface which allows a VPN client to protect all IP traffic using IPsec
              </selectable>
              <selectable>provide a VPN client which can protects all IP traffic using IPsec
			  </selectable>
            </selectables>with the exception of IP traffic required to establish the VPN connection.
            </title>
	    <note role="application">
	      Typically, the traffic required to establish the VPN connection is referred to as "Control Plane" traffic 
	      whereas the IP traffic protected by the IPsec VPN is referred to as "Data Plane" traffic. 
	      All "Data Plane" traffic must flow through the VPN connection and the VPN must not split-tunnel.
		  <h:br/>
		  If no native IPsec client is validated or third-party VPN clients may
		  also implement the required Information Flow Control, the first
		  option shall be selected. In these cases, the TOE provides an API to
		  third-party VPN clients that allows them to configure the TOE’s
		  network stack to perform the required Information Flow Control.  
		  <h:br/>
		  The ST author shall select the second option if the TSF implements a
		  native VPN client (IPsec is selected in FTP_ITC_EXT.1). If the native
		  VPN client is to be validated (IPsec is selected in 
		  <linkref linkend="FTP_ITC_EXT.1"/> and
		  the TSF is validated against the <h:i>Extended Package for IPsec
		  Virtual Private Network (VPN) Clients</h:i>), the ST author shall also
		  include FDP_IFC_EXT from this package.  In the
		  future, this requirement may also make a distinction between the
		  current requirement (which requires that when the IPsec trusted
		  channel is enabled, all traffic from the TSF is routed through that
		  channel) and having an option to force the establishment of an IPsec
		  trusted channel to allow any communication by the TSF.
	    </note>
            <aactivity> The evaluator will verify that the TSS section of the ST describes the
              routing of IP traffic when a VPN client is enabled. The
              evaluator will ensure that the description indicates which traffic does not go
              through the VPN and which traffic does, and that a configuration exists for each
              in which only the traffic identified by the ST author as necessary
              for establishing the VPN connection (IKE traffic and perhaps HTTPS or DNS traffic) is
              not encapsulated by the VPN protocol (IPsec).
			</aactivity>
          </f-element>
        </f-component>
      </subsection>
      <subsection title="Security Management (FMT)" id="fmt">
        <f-component id="fmt_mof_ext.1" name="Management of security functions behavior" status="threshold">
	  <f-element id="fmt_mof_ext.1.1">
	    <title> 
	      The OS shall be capable of performing the following management functions, controlled by the user
		  and overridden by an administrator as shown:
              <h:ul>
                <h:li> X: Mandatory</h:li>
                <h:li> O: Optional</h:li>
              </h:ul>
		<!-- NB: the transform will auto-fill "O" for both admin
			admin and user.  If you override it (with whatever
			character you specify in the attribute text), it will change. -->
	      <management-function-set>
		<manager>Administrator</manager>
		<manager>User</manager>
		<management-function>
		  configure minimum password length
		</management-function>
		<management-function>
			configure minimum number of special characters in password
		</management-function>
		<management-function>
			configure minimum number of numeric characters in password
		</management-function>
		<management-function>
			configure minimum number of uppercase characters in password
		</management-function>
		<management-function>
			configure minimum number of lowercase characters in password
		</management-function>
		<management-function>
		  enable/disable screen lock
		</management-function> 
		<management-function>
		  configure screen lock inactivity timeout
		</management-function> 
		<management-function>
		  configure remote connection inactivity timeout
		</management-function> 
		<management-function admin="X" user="X">
		  enable/disable unauthenticated logon
		</management-function> 
		<management-function>
		  configure lockout policy for unsuccessful authentication attempts through
		<selectables>
		<selectable>timeouts between attempts</selectable>
		<selectable>limiting number of attempts during a time period</selectable>
		</selectables>
		</management-function> 
		<management-function> 
		  configure host-based firewall
		</management-function>
		<management-function> 
		  configure name/address of directory server to bind with
		</management-function>
		<management-function> 
		  configure name/address of remote management server from which to receive management settings
		</management-function>
		<management-function> 
		  configure name/address of audit/logging server to which to send audit/logging records
		</management-function>
		<management-function> 
		  configure local audit storage capacity
		</management-function>
		<management-function> 
		  configure audit rules
		</management-function>
		<management-function> 
		  configure name/address of network time server
		</management-function>
		<management-function> 
		  enable/disable automatic software update
		</management-function>
		<management-function>
		  configure WiFi interface
		</management-function>
		<management-function>
		  enable/disable Bluetooth interface
		</management-function>
		<management-function>
		  configure USB interfaces
		</management-function>
		<management-function>
		  enable/disable 
		  <assignable>list of other external interfaces</assignable>
		</management-function>
		<management-function>
		<assignable>list of other management functions to be provided by the TSF</assignable>
                </management-function>
	      </management-function-set>

	    </title>
		<note role="application">The
		terms "Administrator" and "User" are defined in <secref linkend="techterms"/>.
		The intent of this requirement is to ensure that the ST is populated
		with the management functions that are provided by the OS.  This enables developers of 
		compliance checklists, including those provided as operational user guidance as specified 
		in <linkref linkend="AGD_OPE.1.3C"/>, to leverage this table
		by providing enterprise-specific values for each evaluated item.
                <h:br/>
				Sophisticated account management policies, such as intricate password complexity requirements 
				and handling of temporary accounts, are a function of directory servers.  The OS
				can enroll in such account management and enable the overall information system
				to achieve such policies by binding to a directory server.
				<h:br/>
		In cases where both the user and administrator can control a particular
		management function, if an administrator has not set a
		policy then the user may be permitted to perform that function.  The ST author
		should use a "-" (instead of "X") to indicate where management is not provided.
		</note>
            <aactivity>
                 The evaluator will verify that every management function captured in the ST is
                 described in the operational guidance and that the description contains the information
                 required to perform the management duties associated with the management function.
                 The evaluator will test the operating system's ability to provide the management
                 functions by configuring the operating system and testing each option selected
                 from above. The evaluator is expected to test these functions in all the ways in which
                 the ST and guidance documentation state the configuration can be managed.
            </aactivity>
	  </f-element>
	</f-component>
      </subsection>
      <subsection title="Protection of the TSF (FPT)" id="fpt">
        <f-component id="fpt_acf_ext.1" name="Access controls" status="threshold">
          <f-element id="fpt_acf_ext.1.1">
            <title> The OS shall implement access controls which prohibit unprivileged users from
              modifying: <h:ul>
                <h:li>Kernel and its drivers/modules</h:li>
                <h:li>Security audit logs</h:li>
                <h:li>Shared libraries</h:li>
                <h:li>System executables</h:li>
                <h:li>System configuration files</h:li>
                <h:li><assignable>other objects</assignable></h:li>
              </h:ul>
            </title>
            <aactivity> 
	      The evaluator will confirm that the TSS specifies the locations of kernel drivers/modules, security
	      audit logs, shared libraries, system executables, and system configuration files.  Every
		  file does not need to be individually identified, but the system's conventions for storing and protecting
		  such files must be specified.
	      The evaluator will create an unprivileged user account. 
	      Using this account, the evaluator will ensure that the following tests result in a negative
              outcome (i.e., the action results in the OS denying the evaluator permission to
              complete the action): 
              <testlist>
                <test>The evaluator will attempt to modify all kernel drivers and modules.</test>
                <test>The evaluator will attempt to modify all security audit logs generated by the logging subsystem.</test>
                <test>The evaluator will attempt to modify all shared libraries that are used throughout the system.</test>
                <test>The evaluator will attempt to modify all system executables.</test>
                <test>The evaluator will attempt to modify all system configuration files.</test>
                <test>The evaluator will attempt to modify any additional components selected.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="fpt_acf_ext.1.2">
            <title> The OS shall implement access controls which prohibit unprivileged users from
              reading: <h:ul>
                <h:li>Security audit logs</h:li>
                <h:li>System-wide credential repositories</h:li>
                <h:li><assignable>list of other objects</assignable></h:li>
              </h:ul>
            </title>
            <aactivity>
	      The evaluator will create an unprivileged user account. 
	      Using this account, the evaluator will ensure that the following tests result in a negative
              outcome (i.e., the action results in the OS denying the evaluator permission to
              complete the action): 
              <testlist>
                <test>The evaluator will attempt to read security audit logs generated by the auditing subsystem</test>
                <test>The evaluator will attempt to read system-wide credential repositories</test>
                <test>The evaluator will attempt to read any other object specified in the assignment</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="fpt_aslr_ext.1" name="Address Space Layout Randomization" status="threshold">
          <f-element id="fpt_aslr_ext.1.1">
            <title>The OS shall always randomize process address space memory locations except for
                <assignable>list of explicit exceptions</assignable>.
            </title>
            <aactivity>
	      The evaluator will select 3 executables included with the TSF. 
	      These must include any web browser or mail client included with the TSF. 
	      For each of these apps, the evaluator will launch the same executables on two separate instances of the 
	      OS on identical hardware and compare all memory mapping locations. 
	      The evaluator will ensure that no memory mappings are placed in the same location.
	      If the rare chance occurs that two mappings are the same for a single executable and
	      not the same for the other two, the evaluator will repeat the test with that executable to verify
	      that in the second test the mappings are different.
	    </aactivity>
          </f-element>
<!--          <f-element id="fpt_aslr_ext.1.2" status="optional">
            <title>The OS shall always randomize kernel address space memory locations</title>
                <note role="application">
                  Randomizing the location of the kernel address spaces provides some defense against
		  kernel-level exploits.
                </note>
            <aactivity> 
	      The evaluator will review the TSS to ensure that ASLR applies to the kernel.
	    </aactivity>
          </f-element> -->
	</f-component>
        <!-- <f-component id="fpt_php_ext.1" name="External Interface Controls" status="threshold">-->
        <!--   <f-element id="fpt_php_ext.1.1"> -->
        <!--     <title> -->
	<!--       The OS shall provide a mechanism to  -->
	<!--       <selectables> -->
	<!-- 	<selectable>users</selectable> -->
	<!-- 	<selectable>administrators</selectable> -->
	<!--       </selectables> -->
	<!--       to disable external interfaces (physical and logical) and -->
        <!--       services exposed to untrusted networks and devices:  -->
        <!--       <selectables linebreak="yes"> -->
        <!--         <selectable>WiFi</selectable> -->
        <!--         <selectable>Bluetooth</selectable> -->
        <!--         <selectable>NFC</selectable> -->
        <!--         <selectable>USB</selectable> -->
        <!--         <selectable>FireWire</selectable> -->
        <!--         <selectable><assignable>list of other external interfaces</assignable></selectable> -->
        <!--       </selectables> -->
	<!--       . -->
        <!--     </title> -->
        <!--     <note role="application"> -->
	<!--       Different hardware platforms present different external interfaces. -->
	<!--       The selection of tests to run against an OS varies depending on the hardware the OS  -->
	<!--       is running on.  -->
	<!--       However, where an OS supports an external interface -->
        <!--       type (e.g., FireWire) it is important that the OS also offers the ability to disable -->
        <!--       that interface.  -->
	<!--       Requirements that ensure secure communication over WiFi are defined in the  -->
	<!--       <a href="https://www.niap-ccevs.org/pp/PP_WLAN_AS_EP_V1.0/" -->
	<!-- 	 >ND CPP EP Wireless LAN Access System</a>. -->
	      
	<!--     </note> -->
        <!--     <aactivity> -->
	<!--       The evaluator will install the OS onto a platform that has capabilities commiserate -->
	<!--       with the OS capabilities (e.g., a USB capable OS must be evaluated on a USB capable -->
	<!--       platform) and ensure that the following tests (where applicable) -->
        <!--       succeed: <testlist> -->
        <!--         <test> The evaluator will attempt to connect to a Wireless network and ensure that the OS successfully connects and allows network traffic to flow.</test> -->
        <!--         <test>  -->
	<!-- 	  The evaluator will connect to a Wireless network and then disable the WiFi -->
        <!--           network interface from within the OS.  -->
	<!-- 	  The evaluator will ensure that the WiFi connection is terminated and that the OS -->
	<!-- 	  does not list any wireless network as accessible. -->
	<!-- 	  The evaluator will run a wireless sniffer (e.g. Kismet, aircrack) and ensure that -->
	<!-- 	  no signals, attributable to the test platform, are detected. -->
	<!-- 	</test> -->
        <!--         <test> The evaluator will attempt to pair, and connect, a Bluetooth device to the OS and ensure that the OS successfully connects to the device.</test> -->
        <!--         <test> -->
	<!-- 	  The evaluator will pair, and connect, a Bluetooth device to the OS and then -->
        <!--           disable the Bluetooth interface within the OS.  -->
	<!-- 	  The evaluator will ensure that the Bluetooth connection is terminated and that -->
	<!-- 	  the OS does not list any devices as accessible. -->
	<!-- 	  The evaluator will run a Bluetooth sniffer (e.g. UberTooth, Wireshark) -->
	<!-- 	  and ensure that no signals, attributable to the test platform, are detected. -->
	<!-- 	</test> -->
        <!--         <test> The evaluator will attempt to pair, and connect, a NFC device to the OS and ensure that the OS successfully connects to the device.</test> -->
        <!--         <test> The evaluator will pair, and connect, an NFC device to the OS and then disable -->
        <!--           the NFC interface within the OS. The evaluator will ensure that the NFC connection -->
        <!--           is terminated. -->
	<!-- 	  The evaluator will run a NFC sniffer  -->
	<!-- 	  and ensure that no signals, attributable to the test platform, are detected. -->
	<!-- 	</test> -->
        <!--         <test> The evaluator will connect a USB device to the OS and then disable the USB -->
        <!--           interface within the OS. The evaluator will ensure that the USB device no longer -->
        <!--           functions within the OS. </test> -->
        <!--         <test> The evaluator will connect a FireWire device to the OS and ensure that the OS successfully connects to the device.</test> -->
        <!--         <test> The evaluator will connect a FireWire device to the OS and then disable the -->
        <!--           FireWire interface within the OS. The evaluator will ensure that the FireWire -->
        <!--           device no longer functions within the OS. </test> -->
        <!--         <test>If any additional components have been listed in the selection, the evaluator will connect each component to the OS and ensure that the OS successfully connects to it.</test> -->
        <!--         <test> If any additional components have been listed in the selection, the evaluator -->
        <!--           shall connect each component to the OS and then disable the component interface -->
        <!--           within the OS. The evaluator will ensure that the component device no longer -->
        <!--           functions within the OS. </test> -->
        <!--       </testlist> -->
        <!--     </aactivity> -->
        <!--   </f-element> -->
        <!-- </f-component> -->
        <f-component id="fpt_sbop_ext.1" name="Stack Buffer Overflow Protection" status="threshold">
          <f-element id="fpt_sbop_ext.1.1">
            <title>The OS shall be compiled with stack-based buffer overflow protections enabled.
            </title>
            <note role="application">It is expected that most of the OS, to include the kernel, libraries, and 
              application software from the OS vendor be compiled with stack-based buffer overflow 
              protection enabled.
            </note>
            <aactivity>
            The evaluator will determine that the <abbr linkend="TSS"/> contains a description of stack-based buffer
            overflow protections used by the OS. Example implementations may be activated
            through compiler options such as "-fstack-protector-all", "-fstack-protector", and "/GS" flags. 
            These are referred to by a variety of terms, such as stack cookie, stack guard, and stack canaries.
            The TSS must include a rationale for any binaries that are not protected in this manner.
            <testlist>
                <test>
                  The evaluator will inventory the kernel, libraries, and application binaries
                  to determine those that do not implement stack-based buffer overflow protections. This list should
                  match up with the list provided in the TSS.
                </test>
            </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="fpt_srp_ext.1" name="Software Restriction Policies" status="objective">
          <f-element id="fpt_srp_ext.1.1">
            <title> The OS shall restrict execution to only programs which match an administrator-specified
              <selectables linebreak="yes">
                <selectable>file path</selectable>
                <selectable>file digital signature</selectable>
                <selectable>version</selectable>
                <selectable>hash</selectable>
                <selectable><assignable>other characteristics</assignable></selectable>
              </selectables>
            </title>
            <note role="application">
              The assignment permits implementations which provide a low 
              level of granularity such as a volume.  The restriction is only against direct execution of 
              executable programs.  It does not forbid interpreters which may take data as an input, even if
              this data can subsequently result in arbitrary computation.
            </note>
            <aactivity>For each selection specified in the ST, the evaluator will ensure that the corresponding tests result in a negative
              outcome (i.e., the action results in the OS denying the evaluator permission to
              complete the action): 
              <testlist>
                <test>
                  The evaluator will configure the OS to only allow code execution from the core
                  OS directories. The evaluator will then attempt to execute code from a directory
                  that is in the allowed list. The evaluator will ensure that the code they
                  attempted to execute has been executed.
                </test>                
                <test>
                  The evaluator will configure the OS to only allow code execution from the core
                  OS directories. The evaluator will then attempt to execute code from a directory
                  that is not in the allowed list. The evaluator will ensure that the code they
                  attempted to execute has not been executed.
                </test>
                <test>
                  The evaluator will configure the OS to only allow code that has been signed by
                  the OS vendor to execute. The evaluator will then attempt to execute code signed
                  by the OS vendor. The evaluator will ensure that the code they
                  attempted to execute has been executed.
                </test>                
                <test>
                  The evaluator will configure the OS to only allow code that has been signed by
                  the OS vendor to execute. The evaluator will then attempt to execute code signed
                  by another digital authority. The evaluator will ensure that the code they
                  attempted to execute has not been executed.
                </test>
                <test>
                  The evaluator will configure the OS to allow execution of a specific
                  application based on version. The evaluator will then attempt to execute the same
                  version of the application. The evaluator will ensure that the code they attempted
                  to execute has been executed.
                </test>                
                <test>
                  The evaluator will configure the OS to allow execution of a specific
                  application based on version. The evaluator will then attempt to execute an older
                  version of the application. The evaluator will ensure that the code they attempted
                  to execute has not been executed.
                </test>
                <test>
                  The evaluator will configure the OS to allow execution based on the hash of the application
                  executable. The evaluator will then attempt to execute 
                  the application with the matching hash. The evaluator will
                  ensure that the code they attempted to execute has been executed.
                </test>
                <test>
                  The evaluator will configure the OS to allow execution based on the hash of the application
                  executable. The evaluator will modify the
                  application in such a way that the application hash is changed. The evaluator 
                  will then attempt to execute the application with the matching hash. The evaluator will
                  ensure that the code they attempted to execute has not been executed.
                </test>
              </testlist>
              
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="fpt_tst_ext.1" name="Boot Integrity" status="threshold">
          <f-element id="fpt_tst_ext.1.1">
            <title>The OS shall verify the integrity of the bootchain up through the OS kernel and 
              <selectables linebreak="yes">
                <selectable>all executable code stored in mutable media</selectable>
                <selectable><assignable>list of other executable code</assignable></selectable>
                <selectable>no other executable code</selectable>
              </selectables> 
	      prior to its execution through the use of
              <selectables linebreak="yes">
                <selectable>a digital signature using a hardware-protected asymmetric key</selectable>
                <selectable>a hardware-protected hash</selectable>
              </selectables>
            </title>
            <note role="application">
              The bootchain of the OS is the sequence of software, to include the OS loader, the kernel, system 
              drivers or modules, and system files, which ultimately result in loading the OS. 
	      The first part of the OS, usually referred to as the first-stage bootloader, 
	      must be loaded by the platform. 
	      Assessing its integrity, while critical, is the platform's responsibility; and therefore outside
	      the scope of this PP.  All software loaded after this stage is potentially 
		  within the control of the OS and is in scope.
              <h:br/>
              The verification may be transitive in nature: 
	      a hardware-protected public key or hash may be used to verify the mutable bootloader code 
              which contains a key or hash used by the bootloader to verify the mutable OS kernel code,
              which contains a key or hash to verify the next layer of executable code, and so on. 
	      However, the way in which the hardware stores and protects these keys is out of scope.
              <h:br/>
              If all executable code (including bootloader(s), kernel, device drivers, pre-loaded applications, user-loaded
              applications, and libraries) is verified, “all executable code stored in mutable media” should
              be selected.
              <h:br/>
            </note>
            <aactivity>
              The evaluator will verify that the TSS section of the ST includes a comprehensive description of the boot
              procedures, including a description of the entire bootchain, for the TSF. 
              The evaluator will ensure that the OS cryptographically verifies each
	      piece of software it loads in the bootchain to include bootloaders and the kernel.
	      Software loaded for execution directly by the platform (e.g. first-stage bootloaders) is out of scope.
	      For each additional category of executable code verified before
              execution, the evaluator will verify that the description in the TSS describes how that
              software is cryptographically verified.
              <h:br/>
              <!-- Out of scope, for now:
			  The evaluator will verify that the TSS contains a justification for the protection of the
              cryptographic key or hash, preventing it from being modified by unverified or
              unauthenticated software.
              <br/> -->
              The evaluator will verify that the TSS contains a description of the
              protection afforded to the mechanism performing the cryptographic verification.
              <h:br/>
              The evaluator will perform the following tests:
              <testlist>
                <test>
                  The evaluator will perform actions to cause TSF software to load and observe that the
                  integrity mechanism does not flag any executables as containing integrity errors and that the
                  OS properly boots.
                </test>
                <test>
                  The evaluator will modify a TSF executable that is part of the bootchain verified by the TSF (i.e. Not the first-stage bootloader) 
		  and attempt to boot.
		  The evaluator will ensure that an integrity violation is triggered and the OS does not boot 
		  (Care must be taken so that the integrity
                  violation is determined to be the cause of the failure to load the module, and not the fact that
                  in such a way to invalidate the structure of the module.).
                </test>
                <test>
                  If the ST author indicates that the integrity verification is performed
                  using a public key, the evaluator will verify that the update mechanism includes a certificate
                  validation according to <linkref linkend="FIA_X509_EXT.1"/>. The evaluator will digitally sign the TSF
                  executable with a certificate that does not have the Code Signing purpose in the
                  extendedKeyUsage field and verify that an integrity violation is triggered. The evaluator
                  shall repeat the test using a certificate that contains the Code Signing purpose and verify that
                  the integrity verification succeeds. Ideally, the two certificates should be identical except for
                  the extendedKeyUsage field.
                </test>
              </testlist>
             </aactivity>
          </f-element>
        </f-component>

        <f-component id="fpt_tud_ext.1" name="Trusted Update" status="threshold">
          <f-element id="fpt_tud_ext.1.1">
            <title>The OS shall provide the ability to check for updates to the OS
              software itself. </title>
            <note role="application">This requirement is about the ability to check for the availability of 
			authentic updates, while the installation of authentic updates is covered by <linkref
            linkend="FPT_TUD_EXT.1.2"/>. 
			</note>
            <aactivity> 
              The evaluator will check for an update using procedures described in the 
              documentation and verify that the OS provides a list of available updates. 
			  Testing this capability may require
			  installing and temporarily placing the system into a
			  configuration in conflict with secure configuration guidance
			  which specifies automatic update.
			  (The evaluator is also to ensure that this query occurs over a
			  trusted channel as described in <linkref linkend="ftp_itc_ext.1"/>.)  
            </aactivity>
          </f-element>
          <f-element id="fpt_tud_ext.1.2">
            <title>
              The OS shall cryptographically verify updates to itself using a digital
              signature prior to installation using schemes specified in <linkref linkend="FCS_COP.1(3)"/>.
	    </title>
            <aactivity> 
                  For the following tests, the evaluator will initiate the download of an update and 
				  capture the update prior to installation.  
				  The download could originate from the vendor's website, an enterprise-hosted 
				  update repository, or another system (e.g. network peer).  
				  All supported origins
				  for the update must be indicated in the TSS and evaluated.
              <testlist>
                <test>
				  The evaluator will ensure that the update has a digital
				  signature belonging to the vendor prior to its installation.
				  The evaluator will modify the downloaded update in such a way
				  that the digital signature is no longer valid. The evaluator
				  will then attempt to install the modified update. The
				  evaluator will ensure that the OS does not install the
				  modified update.
                </test>
                <test>
				  The evaluator will ensure that the update has a digital
				  signature belonging to the vendor. The evaluator will then
				  attempt to install the update (or permit installation to continue). 
				  The evaluator will ensure that
				  the OS successfully installs the update.
                </test>                
              </testlist>
            </aactivity>
          </f-element>
	</f-component>
        <f-component id="fpt_tud_ext.2" name="Trusted Update for Application Software" status="threshold">
          <!-- TO DO: Cite references. -->
          <f-element id="fpt_tud_ext.2.1">
            <title>
	      The OS shall provide the ability to check for updates to 
              application software.
	    </title>
            <note role="application">This requirement is about the ability to check for authentic updates,
              while the actual installation of such updates is covered by <linkref
                linkend="FPT_TUD_EXT.2.2"/>. 
            </note>
            <aactivity>The evaluator will check for updates to application software
			  using procedures described in the
			  documentation and verify that the OS provides a list of available
			  updates.  Testing this capability may require 
			  temporarily placing the system into a configuration in conflict
			  with secure configuration guidance which specifies automatic
			  update.  (The evaluator is also to ensure that this query occurs
			  over a trusted channel as described in <linkref
			  linkend="ftp_itc_ext.1"/>.)  
            </aactivity>
          </f-element>
          <f-element id="fpt_tud_ext.2.2">
            <title>
	      The OS shall cryptographically verify the integrity of updates 
	      to applications using a digital signature specified by 
	      <linkref linkend="FCS_COP.1(3)"/> prior to installation.
	    </title>
            <aactivity>
                  The evaluator will initiate an update to an application.  This may vary depending on the application,
		          but it could be through the application vendor's website, a commercial app store, or another system.
				  All origins supported by the OS must be indicated in the TSS and evaluated.  However, this only includes
				  those mechanisms for which the OS is providing a trusted installation and update functionality.  
				  It does not include user or administrator-driven download and installation of arbitrary files.
              <testlist>
                <test>
				  The evaluator will ensure that the update has a digital
				  signature which chains to the OS vendor or another trusted
				  root managed through the OS.  The evaluator will modify the
				  downloaded update in such a way that the
                  digital signature is no longer valid. The evaluator will then attempt to install the
                  modified update. The evaluator will ensure that the OS does not install the modified
                  update.
                </test>
                <test>
				  The evaluator will ensure that the update has a digital
				  signature belonging to the OS vendor or another trusted root
				  managed through the OS. The evaluator will then attempt to
				  install the update.  The evaluator will ensure that the OS
				  successfully installs the update.
                </test>                
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="fpt_w^x_ext.1" name="Write XOR Execute Memory Pages" status="objective">
          <f-element id="fpt_w^x_ext.1.1">
            <title> The OS shall prevent allocation of any memory region with both write and 
              execute permissions except for <assignable>list of exceptions</assignable>.
            </title>
            <note role="application">Requesting a memory mapping with both write and execute
              permissions subverts the platform protection provided by <abbr linkend="DEP"/>.
	      If the OS provides no exceptions (such as for just-in-time compilation),
	      then "no exceptions" should be indicated in the assignment.  
	      Full realization of this requirement requires hardware support, but this is commonly available.  
            </note>
            <aactivity> 
              The evaluator will inspect the vendor-provided developer documentation and 
	      verify that no memory-mapping can be made with
              write and execute permissions except for the cases listed in the assignment.
	      <testlist>
		<test>
                  The evaluator will acquire or construct a test program which attempts 
		  to allocate memory that is both writable and executable.  
		  The evaluator will run the program and confirm that it fails to
		  allocate memory that is both writable and executable.
		</test>
		<test>
                  The evaluator will acquire or construct a test program which 
		  allocates memory that is executable and then
		  subsequently requests additional write/modify permissions on that memory.
		  The evaluator will run the program and confirm that at no time
		  during the lifetime of the process is the memory both writable and executable.
		</test>
		<test>
                  The evaluator will acquire or construct a test program which 
		  allocates memory that is writable and then
		  subsequently requests additional execute permissions on that memory.
		  The evaluator will run the program and confirm that at no time
		  during the lifetime of the process is the memory both writable and executable.
		</test>
	      </testlist>
            </aactivity>
          </f-element>
        </f-component>
      </subsection>    
      <subsection title="Audit Data Generation (FAU)" id="fau">
        <f-component id="fau_gen.1" name="Audit Data Generation" status="threshold">
          <f-element id="fau_gen.1.1">
            <title> The OS shall be able to generate an audit record of the following auditable
              events: 
              <h:ol type='a'>
                <h:li>Start-up and shut-down of the audit functions;</h:li>
                <h:li>All auditable events for the not specified level of audit; and</h:li>
                <h:li>
		  <h:ul><h:li>Authentication events (Success/Failure);</h:li>
                  <h:li>Use of privileged/special rights events (Successful and unsuccessful security, audit, and configuration changes);</h:li>
                  <h:li>Privilege or role escalation events (Success/Failure);</h:li>
		  <h:li><selectables linebreak='yes'>
                      <selectable>File and object events (Successful and unsuccessful attempts to create, access, delete, modify, modify permissions)</selectable>
                      <selectable>User and Group management events (Successful and unsuccessful add, delete, modify, disable</selectable>
                      <selectable>Audit and log data access events (Success/Failure)</selectable>
                      <selectable>Cryptographic verification of software (Success/Failure)</selectable>
                      <selectable>Program initiations (Success/Failure e.g. due to software restriction policy) </selectable>
                      <selectable>System reboot, restart, and shutdown events (Success/Failure)</selectable>
                      <selectable>Kernel module loading and unloading events (Success/Failure)</selectable>
                      <selectable>Administrator or root-level access events (Success/Failure)</selectable>
                      <selectable>Command line input (Success/Failure)</selectable>
                      <selectable> 
			<assignable>other specifically defined auditable events</assignable>.
                      </selectable>
                    </selectables>
		  </h:li>
		  </h:ul>
		</h:li>
	      </h:ol>
            </title>
            <aactivity>
			  The evaluator shall check the administrative guide and ensure
			  that it lists all of the auditable events.  The evaluator shall
			  check to make sure that every audit event type selected in the ST
			  is included.
              <h:br/>
			  The evaluator shall test the OS's ability to correctly generate
			  audit records by having the TOE generate audit records for the
			  events listed in the ST.  This should include all instance types
			  of an event specified.  
			  When verifying the test results, the evaluator shall ensure the
			  audit records generated during testing match the format specified
			  in the administrative guide, and that the fields in each audit
			  record have the proper entries.
           </aactivity>
          </f-element>
          <f-element id="fau_gen.1.2">
            <title> The OS shall record within each audit record at least the following information: 
	    <h:ol type='a'>
	      <h:li>Date and time of the event, type of event, subject identity (if applicable),
	      and outcome (success or failure) of the event; and </h:li>
	      <h:li>For each audit event type, based on the auditable event
              definitions of the functional components included in the PP/ST,
              <assignable>other audit relevant information</assignable>
	      </h:li>
	    </h:ol>
	    .
            </title>
	    <note role="application">
	      The term <h:i>subject</h:i> here is understood to be the user that the process
	      is acting on behalf of.  If no auditable event definitions of 
		  functional components are provided, then no additional audit-relevant information 
		  is required.
	    </note>
            <aactivity>
			  The evaluator shall check the administrative guide and ensure
			  that it provides a format
			  for audit records. Each audit record format type must be covered,
			  along with a brief description of each field. The evaluator shall
			  ensure that the fields contains the information required. 
			  <h:br/>
			  The evaluator shall test the OS's ability to correctly generate
			  audit records by having the TOE generate audit records for the
			  events listed in the ST.
			  The evaluator shall
			  ensure the audit records generated during testing match the
			  format specified in the administrative guide, and that the fields
			  in each audit record provide the required information.
           </aactivity>


        </f-element>
        </f-component>
      </subsection>
      <subsection title="Identification and Authentication (FIA)" id="fia">
        <f-component id="fia_afl.1" name="Authentication failure handling" status="threshold">
          <f-element id="fia_afl.1.1">
            <title>
            The OS shall detect when 
            <selectables linebreak='yes'>
              <selectable><assignable> a positive integer number</assignable></selectable> 
              <selectable>an administrator configurable positive integer within a <assignable>range of acceptable values</assignable></selectable>
            </selectables>
            unsuccessful authentication attempts for 
            <selectables linebreak="yes">
              <selectable>authentication based on user name and password</selectable>
              <selectable>authentication based on user name and a PIN that
	      releases an asymmetric key stored in OE-protected storage</selectable>
              <selectable>authentication based on X.509 certificates</selectable>
            </selectables>
              occur related to <assignable>list of authentication events</assignable>. 
	    </title>
            <aactivity>
		  The evaluator will set an administrator-configurable threshold for
		  failed attempts, or note the ST-specified assignment.  The evaluator
		  will then (per selection) repeatedly attempt to authenticate with an
		  incorrect password, PIN, or certificate until the number of attempts
		  reaches the threshold.  Note that the authentication attempts and
		  lockouts must also be logged as specified in <linkref
		  linkend="fau_gen.1"/>.

	    </aactivity>
          </f-element>
          <f-element id="fia_afl.1.2">
            <title> 
	      When the defined number of unsuccessful authentication attempts for an 
	      account has been met, the OS shall:
	      <selectables>
		<selectable>Account Lockout</selectable>
		<selectable>Account Disablement</selectable>
		<selectable>Mandatory Credential Reset</selectable>
		<selectable><assignable>list of actions</assignable></selectable>
	      </selectables>
            </title>
            <note role="application">
            	The action to be taken shall be populated in the assignment of the ST and defined 
            	in the administrator guidance. 
            </note>
            <aactivity> 
              <testlist>
                <test>
                  The evaluator will attempt to authenticate repeatedly to the system with a
                  known bad password. Once the defined number of failed authentication attempts has been
                  reached the evaluator will ensure that the account that was being used for testing
                  has had the actions detailed in the assignment list above applied to it. The evaluator will ensure that 
                  an event has been logged to the security event log detailing that the account has had these actions applied. 
                </test>
                <test>
                  The evaluator will attempt to authenticate repeatedly to the system with a
                  known bad certificate. Once the defined number of failed authentication attempts has been
                  reached the evaluator will ensure that the account that was being used for testing
                  has had the actions detailed in the assignment list above applied to it. The evaluator will ensure that 
                  an event has been logged to the security event log detailing that the account has had these actions applied. 
                </test>
                <test>
                  The evaluator will attempt to authenticate repeatedly to the system using both a bad password and a bad certificate. 
                  Once the defined number of failed authentication attempts has been
                  reached the evaluator will ensure that the account that was being used for testing
                  has had the actions detailed in the assignment list above applied to it. The evaluator will ensure that 
                  an event has been logged to the security event log detailing that the account has had these actions applied. 
                </test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>        
        <f-component id="fia_uau.5" name="Multiple Authentication Mechanisms" status="threshold">
          <f-element id="fia_uau.5.1">
            <title>
              The OS shall provide the following authentication mechanisms
              <selectables linebreak='yes'>
                <selectable>authentication based on user name and password</selectable>
                <selectable>authentication based on user name and a PIN that releases an asymmetric key stored in OE-protected storage</selectable>
                <selectable>authentication based on X.509 certificates</selectable>
              </selectables>
              to support user authentication.
            </title>
            <aactivity>
              If user name and password authentication is selected, the evaluator will configure the OS with a 
			  known user name and password and conduct the following tests:
              <testlist>
                <test>
				  The evaluator will attempt to authenticate to the OS using
				  the known user name and password. The evaluator will ensure
				  that the authentication attempt is successful.
                </test>
                <test>
				  The evaluator will attempt to authenticate to the OS using
				  the known user name but an incorrect password. The evaluator
				  will ensure that the authentication attempt is unsuccessful.
                </test>
              </testlist>
			  If user name and PIN that releases an asymmetric key is selected,
			  the evaluator will examine the TSS for guidance on supported
			  protected storage and will then configure the TOE or OE to establish a PIN
			  which enables release of the asymmetric key from the protected storage (such as a TPM, a hardware token, or
			  isolated execution environment) with which the
			  OS can interface.  The evaluator will then conduct the following tests:
			  <testlist> 
			    <test> The evaluator will attempt to
			    authenticate to the OS using the known user name and PIN. The
			    evaluator will ensure that the authentication attempt is
			    successful. 
			    </test> 
				<test> The evaluator will attempt to
			    authenticate to the OS using the known user name but an incorrect
			    PIN. The evaluator will ensure that the authentication attempt is
			    unsuccessful.
				</test> 
			  </testlist>
			  If X.509 certificate authentication is selected, the evaluator
			  will generate an X.509v3 certificate for a user with the Client
			  Authentication Enhanced Key Usage field set. The evaluator will
			  provision the OS for authentication with the X.509v3 certificate.
			  The evaluator will ensure that the
			  certificates are validated by the OS as per <linkref
			  linkend="FIA_X509_EXT.1.1"/> and then conduct the following tests:
              <testlist>
                 <test>
					The evaluator will attempt to authenticate to the OS using
					the X.509v3 certificate. The evaluator
					will ensure that the authentication attempt is successful.
                  </test>
                <test>
				  The evaluator will generate a second certificate identical to
				  the first except for the public key and any values derived
				  from the public key. The evaluator will attempt to
				  authenticate to the OS with this certificate. The evaluator
				  will ensure that the authentication attempt is unsuccessful.
                </test>
              </testlist>

            </aactivity>
          </f-element>
           <f-element id="fia_uau.5.2">
            <title>
              The OS shall authenticate any user's claimed identity according to the
              <assignable>
              	rules describing how the multiple authentication
		mechanisms provide authentication
              </assignable>.
            </title>
            <note role="application">For all authentication mechanisms specified
              in <linkref linkend="FIA_UAU.5.1"/>, the TSS shall describe the
              rules as to how each authentication mechanism is used. Example rules
              are how the authentication mechanism authenticates the user (i.e.
              how does the TSF verify that the correct password or authentication
              factor is used), the result of a successful authentication (i.e.
              is the user input used to derive or unlock a key) and which
              authentication mechanism can be used at which authentication factor
              interfaces (i.e. if there are times, for example, after a reboot,
              that only specific authentication mechanisms can be used). Rules
              regarding how the authentication factors interact in terms of
              unsuccessful authentication are covered in FIA_AFL_EXT.1.</note>

              <aactivity>The evaluator shall ensure that the <abbr linkend="TSS"/>
              describes each mechanism provided to support user authentication and
              the rules describing how the authentication mechanism(s) provide
              authentication. <h:br/><h:br/> The evaluator shall verify that
              configuration guidance for each authentication mechanism is
              addressed in the AGD guidance.
              <testlist>
                <test>For each
              authentication mechanism selected, the evaluator shall enable that
              mechanism and verify that it can be used to authenticate the user at
              the specified authentication factor interfaces. </test>
              <test>For
              each authentication mechanism rule, the evaluator shall ensure that
              the authentication mechanism(s) behave accordingly.</test>
            </testlist>
          </aactivity>
          </f-element>
        </f-component>
        <f-component id="fia_x509_ext.1" name="X.509 Certificate Validation" status="threshold">
          <f-element id="fia_x509_ext.1.1">
            <title> The OS shall implement functionality to validate certificates in accordance with
              the following rules: <h:ul>
                <h:li> RFC 5280 certificate validation and certificate path validation. </h:li>
                <h:li> The certificate path must terminate with a trusted CA certificate. </h:li>
                <h:li> The OS shall validate a certificate path by ensuring the presence of the
                  basicConstraints extension and that the CA flag is set to TRUE for all CA
                  certificates. </h:li>
                <h:li> The OS shall validate the revocation status of the certificate using <selectables>
                    <selectable> the Online Certificate Status Protocol (OCSP) as specified in RFC
                      2560</selectable>
                    <selectable> a Certificate Revocation List (CRL) as specified in RFC 5759</selectable>
		    <selectable> 
		      an OCSP TLS Status Request Extension (i.e., OCSP stapling) as specified in RFC 6066</selectable>
                  </selectables>. </h:li>
                <h:li> The OS shall validate the extendedKeyUsage field according to the following
                  rules: <h:ul>
                    <h:li> Certificates used for trusted updates and executable code integrity
                      verification shall have the Code Signing purpose (id-kp 3 with OID
                      1.3.6.1.5.5.7.3.3) in the extendedKeyUsage field. </h:li>
                    <h:li> 
		      Server certificates presented for <h:abbr title="Transport Layer Security">TLS</h:abbr>
		      shall have the Server Authentication purpose (id-kp 1 with OID
                      1.3.6.1.5.5.7.3.1) in the extendedKeyUsage field. </h:li>
                    <h:li> Client certificates presented for <h:abbr title="Transport Layer Security"
                        >TLS</h:abbr> shall have the Client Authentication purpose (id-kp 2 with OID
                      1.3.6.1.5.5.7.3.2) in the extendedKeyUsage field. </h:li>
                    <h:li> S/MIME certificates presented for email encryption and signature shall have
                      the Email Protection purpose (id-kp 4 with OID 1.3.6.1.5.5.7.3.4) in the
                      extendedKeyUsage field. </h:li>
                    <h:li> OCSP certificates presented for OCSP responses shall have the OCSP Signing
                      purpose (id-kp 9 with OID 1.3.6.1.5.5.7.3.9) in the extendedKeyUsage field. </h:li>
                    <h:li> (Conditional) Server certificates presented for EST shall have the CMC Registration
                      Authority (RA) purpose (id-kp-cmcRA with OID 1.3.6.1.5.5.7.3.28) in the
                      extendedKeyUsage field. </h:li>
                  </h:ul>
                </h:li>
              </h:ul>
            </title>
            <note role="application"> FIA_X509_EXT.1.1 lists the rules for validating certificates.
              The <abbr linkend="ST"/> author shall select whether revocation status is verified
              using OCSP or CRLs. <linkref linkend="FIA_X509_EXT.2"/> requires that certificates are
              used for HTTPS, TLS and DTLS; this use requires that the extendedKeyUsage rules are
              verified. <h:br/>
            </note>
            <aactivity> The evaluator will ensure the <abbr linkend="TSS"/> describes where the
              check of validity of the certificates takes place. The evaluator ensures the <abbr
                linkend="TSS"/> also provides a description of the certificate path validation
              algorithm. <h:br/> The tests described must be performed in conjunction with the other
              certificate services assurance activities, including the functions in <linkref
                linkend="FIA_X509_EXT.2.1"/>. The tests for the extendedKeyUsage rules are performed
              in conjunction with the uses that require those rules. The evaluator will create a
              chain of at least four certificates: the node certificate to be tested, two
              Intermediate CAs, and the self-signed Root CA. <testlist>
                <test> The evaluator will demonstrate that validating a certificate without a valid
                  certification path results in the function failing. The evaluator will then load
                  a certificate or certificates as trusted CAs needed to validate the certificate to
                  be used in the function, and demonstrate that the function succeeds. The evaluator
                  shall then delete one of the certificates, and show that the function fails. </test>
                <test> The evaluator will demonstrate that validating an expired certificate
                  results in the function failing. </test>
                <test> The evaluator will test that the <abbr linkend="OS"/> can properly handle
                  revoked certificates-–conditional on whether CRL, OCSP, or OCSP stapling is selected; 
		  if multiple methods are selected, then a test shall be performed for each method. 
		  The evaluator will test
                  revocation of the node certificate and revocation of the intermediate CA
                  certificate (i.e. the intermediate CA certificate should be revoked by the root
                  CA). The evaluator will ensure that a valid certificate is used, and that the
                  validation function succeeds. The evaluator then attempts the test with a
                  certificate that has been revoked (for each method chosen in the selection) to
                  ensure when the certificate is no longer valid that the validation function fails. </test>
                <test> If either OCSP option is selected, the evaluator will configure the OCSP server or use a
                  man-in-the-middle tool to present a certificate that does not have the OCSP
                  signing purpose and verify that validation of the OCSP response fails. If CRL is
                  selected, the evaluator will configure the CA to sign a CRL with a certificate
                  that does not have the cRLsign key usage bit set, and verify that validation of
                  the CRL fails. </test>
                <test> The evaluator will modify any byte in the first eight bytes of the
                  certificate and demonstrate that the certificate fails to validate. (The
                  certificate should fail to parse correctly.) </test>
                <test> The evaluator will modify any byte in the last byte of the certificate and
                  demonstrate that the certificate fails to validate. (The signature on the
                  certificate should not validate.) </test>
                <test> The evaluator will modify any byte in the public key of the certificate and
                  demonstrate that the certificate fails to validate. (The signature on the
                  certificate should not validate.) </test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="fia_x509_ext.1.2">
            <title> The OS shall only treat a certificate as a CA certificate if the
              basicConstraints extension is present and the CA flag is set to TRUE. </title>
            <note role="application"> This requirement applies to certificates that are used and
              processed by the <abbr linkend="TSF"/> and restricts the certificates that may be
              added as trusted CA certificates. </note>
            <aactivity> The tests described must be performed in conjunction with the other
              certificate services assurance activities, including the functions in <linkref
                linkend="FIA_X509_EXT.2.1"/>. The evaluator will create a chain of at least four
              certificates: the node certificate to be tested, two Intermediate CAs, and the
              self-signed Root CA. <testlist>
                <test> The evaluator will construct a certificate path, such that the certificate
                  of the CA issuing the <abbr linkend="OS"/>'s certificate does not contain the
                  basicConstraints extension. The validation of the certificate path fails. </test>
                <test> The evaluator will construct a certificate path, such that the certificate
                  of the CA issuing the <abbr linkend="OS"/>'s certificate has the CA flag in the
                  basicConstraints extension not set. The validation of the certificate path fails. </test>
                <test> The evaluator will construct a certificate path, such that the certificate
                  of the CA issuing the <abbr linkend="OS"/>'s certificate has the CA flag in the
                  basicConstraints extension set to TRUE. The validation of the certificate path
                  succeeds. </test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="fia_x509_ext.2" name="X.509 Certificate Authentication" status="threshold">
          <f-element id="fia_x509_ext.2.1">
            <title> The OS shall use X.509v3 certificates as defined by RFC 5280 to support
              authentication for TLS and 
			  <selectables>
			  <selectable>DTLS</selectable>
			  <selectable>HTTPS</selectable>
			  <selectable><assignable>other protocols</assignable></selectable>
			  <selectable>no other protocols</selectable>
			  </selectables>
			  connections. 
			</title>
            <aactivity> The evaluator will acquire or develop an application that uses the OS
              TLS mechanism with an X.509v3 certificate. The evaluator will then run the
              application and ensure that the provided certificate is used to authenticate the
              connection. 
			  <h:br/>
			  The evaluator will repeat the activity for any other selections listed.
			</aactivity>
          </f-element>
        </f-component>
      </subsection>
      <subsection title="TOE Access (FTA)" id="fta">
        <f-component id="fta_tab.1" name="Default TOE access banners" status="optional">
          <f-element id="fta_tab.1.1">
            <title>
            Before establishing a user session, the OS shall display an advisory
            warning message regarding unauthorized use of the OS.
            </title>
            <aactivity> 
            The evaluator will configure the OS, per instructions in the OS manual,
            to display the advisory warning message "TEST TEST Warning Message TEST TEST". 
            The evaluator will then log out and confirm that the advisory message is 
            displayed before logging in can occur.
            </aactivity>
          </f-element>
        </f-component>
      </subsection>
      <subsection title="Trusted Path/Channels (FTP)" id="ftp">
      	<f-component id="ftp_itc_ext.1" name="Trusted channel communication" status="threshold">
      	  <f-element id="ftp_itc_ext.1.1">
      	    <title>
     	      The OS shall use 
      	      <selectables linebreak='yes'>
        	      <selectable>TLS as conforming to <linkref linkend="FCS_TLSC_EXT.1"/></selectable>
        	      <selectable>DTLS as conforming to <linkref linkend="FCS_DTLS_EXT.1"/></selectable>
      	        <selectable>IPsec as conforming to the <h:a href="https://www.niap-ccevs.org/pp/"><h:i>Extended Package for IPsec VPN Clients</h:i></h:a></selectable>
      	        <selectable>SSH as conforming to the <h:a href="https://www.niap-ccevs.org/pp/"><h:i>Extended Package for Secure Shell</h:i></h:a></selectable>
        	    </selectables>
		    to provide a trusted communication channel between itself and 
		    authorized IT entities supporting the following capabilities: 
		    <selectables>
		      <selectable>audit server</selectable>
		      <selectable>authentication server</selectable>
		      <selectable>management server</selectable> 
		      <selectable>
			<assignable>other capabilities</assignable>
		      </selectable>
		    </selectables>
		    that is logically distinct from other communication
		    channels and provides assured identification of its end points and protection of the channel 
		    data from disclosure and detection of modification of the channel data.
      	    </title>
      	    <note role="application">
      	      If the ST author selects IPsec, the TSF shall be validated against the <h:i>Extended Package
      	      for IPsec Virtual Private Network (VPN) Clients</h:i>.  
      	      If the ST author selects SSH, the TSF shall be validated against the <h:i>Extended Package
      	      for Secure Shell</h:i>.  The ST author must
      	      include the security functional requirements for the trusted channel protocol selected in
      	      FTP_ITC_EXT.1 in the main body of the ST.
      	    </note>
      	    <aactivity>
	      The evaluator will configure the OS to communicate with another
	      trusted IT product as identified in the second selection.  
      	  The evaluator will monitor network traffic while the OS performs communication with each of the
      	  servers identified in the second selection.
      	  The evaluator will ensure that for each session a trusted channel was established
      	  in conformance with the protocols identified in the first selection.
      	  </aactivity>
      	  </f-element>
      	</f-component>
        <f-component id="ftp_trp.1" name="Trusted Path" status="threshold">
            <f-element id="ftp_trp.1.1">
              <title> The OS shall provide a communication path between itself and remote users that is logically 
                distinct from other communication paths and provides assured identification of its endpoints
                and protection of the communicated data from modification and disclosure.
              </title>
            </f-element>
            <f-element id="ftp_trp.1.2">
              <title> The OS shall permit 
                <selectables>
                  <selectable>the TSF</selectable>
                  <selectable>local users</selectable>
                  <selectable>remote users</selectable>
                </selectables>
                to initiate communication via the trusted path.
              </title>
            </f-element>
            <f-element id="ftp_trp.1.3">
              <title> The OS shall require use of the trusted path for all remote administrative actions.
              </title>
              <note role="application">
                This requirement ensures that authorized remote administrators initiate all communication
                with the OS via a trusted path, and that all communication with the OS by remote administrators 
                is performed over this path. The data passed in this trusted communication channel is encrypted as 
                defined in <linkref linkend="FTP_ITC_EXT.1"/>.
		<h:br/>
		The assurance activities for this requirement also test requirements 
		<linkref linkend="FTP_TRP.1.1"/> and <linkref linkend="FTP_TRP.1.2"/>.
              </note>
              <aactivity>
                The evaluator will examine the TSS to determine that the methods of remote OS administration
                are indicated, along with how those communications are protected. The evaluator will also
                confirm that all protocols listed in the TSS in support of OS administration are consistent with those
                specified in the requirement, and are included in the requirements in the ST. The evaluator will
                confirm that the operational guidance contains instructions for establishing the remote
                administrative sessions for each supported method. The evaluator will also perform the following
                tests:
                <testlist>
                  <test>
                    The evaluator will ensure that communications using each remote administration method is 
                    tested during the course of the evaluation, setting up the connections as described in the 
                    operational guidance and ensuring that communication is successful.
                  </test>
                  <test>
                    For each method of remote administration supported, the evaluator will
                    follow the operational guidance to ensure that there is no available interface that can be
                    used by a remote user to establish a remote administrative sessions without invoking the
                    trusted path.
                  </test>
                  <test>
                    The evaluator will ensure, for each method of remote administration, the
                    channel data is not sent in plaintext.
                  </test>
                  <test>
                    The evaluator will ensure, for each method of remote administration,
                    modification of the channel data is detected by the OS.
                  </test>
                </testlist>
              </aactivity>              
            </f-element>     
          </f-component>
      </subsection>
    </section>
    <section title="Security Assurance Requirements" id="SARs">
      The Security Objectives in 
      <secref linkend="obj"/> were constructed to address threats identified in
      <secref linkend="threats"/>. The Security Functional Requirements (<abbr linkend="SFR"/>s)
      in <secref linkend="SFRs"/> are a formal instantiation of the Security Objectives. The PP
      identifies the Security Assurance Requirements (<abbr linkend="SAR"/>s) to frame the extent to
      which the evaluator assesses the documentation applicable for the evaluation and performs
      independent testing. <h:br/> This section lists the set of <abbr linkend="SAR"/>s from CC part 3
      that are required in evaluations against this PP. Individual Assurance Activities
      <!--(AAs). Never use these again --> to be performed are specified both in <secref
        linkend="req"/> as well as in this section. <h:br/> The general model for evaluation of <abbr
        linkend="OS"/>s against STs written to conform to this PP is as follows: <h:br/> After the
        <abbr linkend="ST"/> has been approved for evaluation, the <abbr class="expanded"
        title="Information Technology Security Evaluation Facility">ITSEF</abbr> will obtain the
        <abbr linkend="OS"/>, supporting environmental IT, and the administrative/user guides for
      the OS. The ITSEF is expected to perform actions mandated by the Common Evaluation
      Methodology (CEM) for the ASE and ALC SARs. The ITSEF also performs the Assurance Activities
      contained within <secref linkend="req"/>, which are intended to be an interpretation of the
      other CEM assurance requirements as they apply to the specific technology instantiated in the
      OS. The Assurance Activities that are captured in <secref linkend="req"/> also provide
      clarification as to what the developer needs to provide to demonstrate the OS is compliant
      with the PP. <subsection title="Class ASE: Security Target" id="ase">As per ASE activities
        defined in <cite linkend="bibCEM"/>.</subsection>
      <subsection title="Class ADV: Development" id="adv">The information about the <abbr
          linkend="OS"/> is contained in the guidance documentation available to the end user as
        well as the <abbr linkend="TSS"/> portion of the <abbr linkend="ST"/>. The <abbr
          linkend="OS"/> developer must concur with the description of the product that is
        contained in the TSS as it relates to the functional requirements. The Assurance Activities
        contained in <secref linkend="SFRs"/> should provide the <abbr linkend="ST"/> authors with
        sufficient information to determine the appropriate content for the TSS section.
          <a-component id="adv_fsp.1" name="Basic Functional Specification (ADV_FSP.1)">The
          functional specification describes the <abbr title="TSF Interface">TSFI</abbr>s. It is not
          necessary to have a formal or complete specification of these interfaces. Additionally,
          because <abbr linkend="OS"/>s conforming to this PP will necessarily have interfaces to
          the Operational Environment that are not directly invokable by <abbr linkend="OS"/>
          users, there is little point specifying that such interfaces be described in and of
          themselves since only indirect testing of such interfaces may be possible. For this PP,
          the activities for this family should focus on understanding the interfaces presented in
          the <abbr linkend="TSS"/> in response to the functional requirements and the interfaces
          presented in the AGD documentation. No additional “functional specification” documentation
          is necessary to satisfy the assurance activities specified. The interfaces that need to be
          evaluated are characterized through the information needed to perform the assurance
          activities listed, rather than as an independent, abstract list. 
	  <group type="dev-action">
            <a-element id="ADV_FSP.1.1D">
              <title>The developer shall provide a functional specification.</title>
            </a-element>
            <a-element id="ADV_FSP.1.2D">
              <title>The developer shall provide a tracing from the functional specification to the
              SFRs.</title>
              <note role="application">As indicated in the introduction to this section, the
              functional specification is comprised of the information contained in the AGD_OPE and
              AGD_PRE documentation. The developer may reference a website accessible to application
              developers and the evaluator. The assurance activities in the functional requirements
              point to evidence that should exist in the documentation and <abbr linkend="TSS"/>
              section; since these are directly associated with the SFRs, the tracing in element
              ADV_FSP.1.2D is implicitly already done and no additional documentation is
              necessary.</note>
            </a-element>
	  </group>
	  <group type="con-pres">
            <a-element id="ADV_FSP.1.1C">
              <title>The functional specification shall describe the purpose and method of use for
              each SFR-enforcing and SFR-supporting <abbr title="TSF Interface">TSFI</abbr>.</title>
            </a-element>
            <a-element id="ADV_FSP.1.2C">
              <title>The functional specification shall identify all parameters associated with each
              SFR-enforcing and SFR-supporting <abbr title="TSF Interface">TSFI</abbr>.</title>
            </a-element>
            <a-element id="ADV_FSP.1.3C">
              <title>The functional specification shall provide rationale for the implicit
              categorization of interfaces as SFR-non-interfering.</title>
            </a-element>
            <a-element id="ADV_FSP.1.4C">
              <title>
		The tracing shall demonstrate that the SFRs trace to 
		<abbr title="TSF Interface">TSFI</abbr>s 
		in the functional specification.
	      </title>
            </a-element>
	  </group>
	  <group type="eval-action">
            <a-element id="ADV_FSP.1.1E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
            </a-element>
            <a-element id="ADV_FSP.1.2E">
              <title>The evaluator shall determine that the functional specification is an accurate
              and complete instantiation of the SFRs.</title>
              <aactivity>There are no specific assurance activities associated with these SARs, except
              ensuring the information is provided. The functional specification documentation is
              provided to support the evaluation activities described in <secref linkend="SFRs"/>, and
              other activities described for AGD, ATE, and AVA SARs. The requirements on the content
              of the functional specification information is implicitly assessed by virtue of the
              other assurance activities being performed; if the evaluator is unable to perform an
              activity because there is insufficient interface information, then an adequate
              functional specification has not been provided.
	      </aactivity>
            </a-element>
	  </group>
        </a-component>
      </subsection>
      <subsection id="agd" title="Class AGD: Guidance Documentation">The guidance documents will be
        provided with the <abbr linkend="ST"/>. Guidance must include a description of how the IT
        personnel verifies that the Operational Environment can fulfill its role for the security
        functionality. The documentation should be in an informal style and readable by the IT
        personnel. Guidance must be provided for every operational environment that the product
        supports as claimed in the <abbr linkend="ST"/>. This guidance includes instructions to
        successfully install the <abbr linkend="TSF"/> in that environment; and Instructions to
        manage the security of the <abbr linkend="TSF"/> as a product and as a component of the
        larger operational environment. Guidance pertaining to particular security functionality is
        also provided; requirements on such guidance are contained in the assurance activities
        specified with each requirement. 
	<a-component id="agd_ope.1" name="Operational User Guidance (AGD_OPE.1)">
	  <group type="dev-action">
	    <a-element id="AGD_OPE.1.1D">
	      <title>The developer shall provide operational user guidance.</title>
	      <note role="application">The operational user guidance does not have to be contained in a
	      single document. Guidance to users, administrators and application developers can be
              spread among documents or web pages. 
	      Rather than repeat information here, the developer should
              review the assurance activities for this component to ascertain the specifics of the
              guidance that the evaluator will be checking for. This will provide the necessary
              information for the preparation of acceptable guidance.</note>
            </a-element>
          </group>
	  <group type="con-pres">
            <a-element id="AGD_OPE.1.1C">
              <title>The operational user guidance shall describe, for each user role, the
              user-accessible functions and privileges that should be controlled in a secure
              processing environment, including appropriate warnings.</title>
              <note role="application">User and administrator are to be considered in the definition
              of user role.</note>
            </a-element>
            <a-element id="AGD_OPE.1.2C">
              <title>The operational user guidance shall describe, for each user role, how to use the
              available interfaces provided by the <abbr linkend="OS"/> in a secure manner.</title>
            </a-element>
            <a-element id="AGD_OPE.1.3C">
              <title>The operational user guidance shall describe, for each user role, the available
              functions and interfaces, in particular all security parameters under the control of
              the user, indicating secure values as appropriate.</title>
              <note role="application">
		This portion of the operational user guidance should be presented
		in the form of a checklist that can be quickly executed by IT personnel (or end-users, 
		when necessary) and suitable for use in compliance activities.
		When possible, this guidance is to be expressed in the eXtensible Configuration 
		Checklist Description Format (XCCDF) to
		support security automation.  
		Minimally, it should be presented in a structured 
		format which includes a title for each configuration item, 
		instructions for achieving the secure configuration, and any relevant rationale.  
              </note>
            </a-element>
            <a-element id="AGD_OPE.1.4C">
              <title>The operational user guidance shall, for each user role, clearly present each
              type of security-relevant event relative to the user-accessible functions that need to
              be performed, including changing the security characteristics of entities under the
              control of the <abbr linkend="TSF"/>.</title>
            </a-element>
            <a-element id="AGD_OPE.1.5C">
              <title>The operational user guidance shall identify all possible modes of operation of
              the <abbr linkend="OS"/> (including operation following failure or operational
              error), their consequences, and implications for maintaining secure operation.</title>
            </a-element>
            <a-element id="AGD_OPE.1.6C">
              <title>The operational user guidance shall, for each user role, describe the security
              measures to be followed in order to fulfill the security objectives for the
              operational environment as described in the <abbr linkend="ST"/>.</title>
            </a-element>
            <a-element id="AGD_OPE.1.7C">
              <title>The operational user guidance shall be clear and reasonable.</title>
            </a-element>
	  </group>
	  <group type="eval-action">
            <a-element id="AGD_OPE.1.1E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence. </title>
              <aactivity>Some of the contents of the operational guidance are verified by the
              assurance activities in <secref linkend="SFRs"/> and evaluation of the <abbr
              linkend="OS"/> according to the <cite linkend="bibCEM"/>. The following additional
              information is also required. If cryptographic functions are provided by the <abbr
              linkend="OS"/>, the operational guidance shall contain instructions for configuring
              the cryptographic engine associated with the evaluated configuration of the <abbr
              linkend="OS"/>. It shall provide a warning to the administrator that use of other
              cryptographic engines was not evaluated nor tested during the CC evaluation of the
              <abbr linkend="OS"/>. The documentation must describe the process for verifying
              updates to the <abbr linkend="OS"/> by verifying a digital signature – this may be
              done by the <abbr linkend="OS"/> or the underlying platform. The evaluator will
              verify that this process includes the following steps: Instructions for obtaining the
              update itself. This should include instructions for making the update accessible to
              the <abbr linkend="OS"/> (e.g., placement in a specific directory). Instructions for
              initiating the update process, as well as discerning whether the process was
              successful or unsuccessful. This includes generation of the hash/digital signature.
              The <abbr linkend="OS"/> will likely contain security functionality that does not
              fall in the scope of evaluation under this PP. The operational guidance shall make it
              clear to an administrator which security functionality is covered by the evaluation
              activities. </aactivity>
          </a-element>
	  </group>
        </a-component>
        <a-component id="agd_pre.1" name="Preparative Procedures (AGD_PRE.1)">
	  <group type="dev-action">
            <a-element id="AGD_PRE.1.1D">
              <title>The developer shall provide the <abbr linkend="OS"/>, including its preparative
              procedures.</title>
              <note role="application">As with the operational guidance, the developer should look to
              the assurance activities to determine the required content with respect to preparative
              procedures.</note>
            </a-element>
	  </group>
	  <group type="con-pres">
            <a-element id="AGD_PRE.1.1C">
              <title>The preparative procedures shall describe all the steps necessary for secure
              acceptance of the delivered <abbr linkend="OS"/> in accordance with the developer's
              delivery procedures.</title>
            </a-element>
            <a-element id="AGD_PRE.1.2C">
              <title>The preparative procedures shall describe all the steps necessary for secure
              installation of the <abbr linkend="OS"/> and for the secure preparation of the
              operational environment in accordance with the security objectives for the operational
              environment as described in the <abbr linkend="ST"/>.</title>
            </a-element>
	  </group>
	  <group type="eval-action">
            <a-element id="AGD_PRE.1.1E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
            </a-element>
            <a-element id="AGD_PRE.1.2E">
              <title>The evaluator shall apply the preparative procedures to confirm that the <abbr
              linkend="OS"/> can be prepared securely for operation.</title>
              <aactivity>As indicated in the introduction above, there are significant expectations
              with respect to the documentation—especially when configuring the operational
              environment to support <abbr linkend="OS"/> functional requirements. The evaluator
              shall check to ensure that the guidance provided for the <abbr linkend="OS"/>
              adequately addresses all platforms claimed for the <abbr linkend="OS"/> in the <abbr
              linkend="ST"/>. </aactivity>
            </a-element>
	  </group>
        </a-component>
      </subsection>
      <subsection id="alc" title="Class ALC: Life-cycle Support"> At the assurance level provided
        for OSs conformant to this PP, life-cycle support is limited to end-user-visible aspects of
        the life-cycle, rather than an examination of the OS vendor’s development and configuration
        management process. This is not meant to diminish the critical role that a developer’s
        practices play in contributing to the overall trustworthiness of a product; rather, it is a
        reflection on the information to be made available for evaluation at this assurance level.
          <a-component id="alc_cmc.1" name="Labeling of the TOE (ALC_CMC.1)">This component is
          targeted at identifying the <abbr linkend="OS"/> such that it can be distinguished from
          other products or versions from the same vendor and can be easily specified when being
          procured by an end user. 
	  <group type="dev-action">
            <a-element id="alc_cmc.1.1d">
              <title>The developer shall provide the <abbr linkend="OS"/> and a reference for the
              <abbr linkend="OS"/>.</title>
            </a-element>
	  </group>
	  <group type="con-pres">
            <a-element id="alc_cmc.1.1c">
              <title>The <abbr linkend="OS"/> shall be labeled with a unique reference.</title>
              <note role="application">Unique reference information includes: 
	      <h:ul>
		<h:li>OS Name</h:li>
		<h:li>OS Version</h:li>
		<h:li>OS Description</h:li>
		<h:li>Software Identification (SWID) tags, if available</h:li>
              </h:ul>
              </note>
            </a-element>
	  </group>
	  <group type="eval-action">
            <a-element id="alc_cmc.1.1e">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
              <aactivity>The evaluator will check the <abbr linkend="ST"/> to ensure that it contains
              an identifier (such as a product name/version number) that specifically identifies the
              version that meets the requirements of the <abbr linkend="ST"/>. Further, the
              evaluator will check the AGD guidance and <abbr linkend="OS"/> samples received for
              testing to ensure that the version number is consistent with that in the <abbr
              linkend="ST"/>. If the vendor maintains a web site advertising the <abbr
              linkend="OS"/>, the evaluator will examine the information on the web site to
              ensure that the information in the <abbr linkend="ST"/> is sufficient to distinguish
              the product.</aactivity>
            </a-element>
	  </group>
        </a-component>
        <a-component id="alc_cms.1" name="TOE CM Coverage (ALC_CMS.1)">
	  Given the scope of the <abbr linkend="OS"/> and its associated evaluation 
	  evidence requirements, this component’s assurance activities are covered 
	  by the assurance activities listed for ALC_CMC.1.
          <group type="dev-action">
            <a-element id="alc_cms.1.1d">
              <title>
		The developer shall provide a configuration list for the  <abbr linkend="OS"/>.
	      </title>
            </a-element>
	  </group>
	  <group type="con-pres">
            <a-element id="alc_cms.1.1c">
              <title>The configuration list shall include the following: the <abbr linkend="OS"/>
              itself; and the evaluation evidence required by the SARs.</title>
            </a-element>
            <a-element id="alc_cms.1.2c">
              <title>The configuration list shall uniquely identify the configuration items.</title>
            </a-element>
	  </group>
          <group type="eval-action">
            <a-element id="alc_cms.1.1e">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
              <aactivity>The "evaluation evidence required by the SARs" in this PP is limited to the
              information in the <abbr linkend="ST"/> coupled with the guidance provided to
              administrators and users under the AGD requirements. By ensuring that the <abbr
              linkend="OS"/> is specifically identified and that this identification is
              consistent in the <abbr linkend="ST"/> and in the AGD guidance (as done in the
              assurance activity for ALC_CMC.1), the evaluator implicitly confirms the information
              required by this component. Life-cycle support is targeted aspects of the developer’s
              life-cycle and instructions to providers of applications for the developer’s devices,
              rather than an in-depth examination of the <abbr linkend="TSF"/> manufacturer’s
              development and configuration management process. This is not meant to diminish the
              critical role that a developer’s practices play in contributing to the overall
              trustworthiness of a product; rather, it’s a reflection on the information to be made
              available for evaluation. <h:br/> The evaluator will ensure that the developer has
              identified (in guidance documentation for application developers concerning the
              targeted platform) one or more development environments appropriate for use in
              developing applications for the developer’s platform. For each of these development
              environments, the developer shall provide information on how to configure the
              environment to ensure that buffer overflow protection mechanisms in the environment(s)
              are invoked (e.g., compiler and linker flags). The evaluator will ensure that this documentation
              also includes an indication of whether such protections are on by default, or have to
              be specifically enabled. The evaluator will ensure that the <abbr linkend="TSF"/> is
              uniquely identified (with respect to other products from the <abbr linkend="TSF"/>
              vendor), and that documentation provided by the developer in association with the
              requirements in the <abbr linkend="ST"/> is associated with the <abbr linkend="TSF"/>
              using this unique identification.</aactivity>
          </a-element>
	  </group>
        </a-component>
        <a-component id="alc_tsu_ext.1" name="Timely Security Updates"> This component requires the
          OS developer, in conjunction with any other necessary parties, to provide information as
          to how the end-user devices are updated to address security issues in a timely manner. The
          documentation describes the process of providing updates to the public from the time a
          security flaw is reported/discovered, to the time an update is released. This description
          includes the parties involved (e.g., the developer, carriers(s)) and the steps that are
          performed (e.g., developer testing, carrier testing), including worst case time periods,
          before an update is made available to the public. 
	  <group type="dev-action">
            <a-element id="alc_tsu_ext.1.1d">
              <title>The developer shall provide a description in the TSS of how timely security
              updates are made to the <abbr linkend="OS"/>.</title>
            </a-element>
            <a-element id="alc_tsu_ext.1.2d">
              <title> The developer shall provide a description in the TSS of how users are notified
              when updates change security properties or the configuration of the product. </title>
            </a-element>
	  </group>
	  <group type="con-pres">
            <a-element id="alc_tsu_ext.1.1c">
              <title>The description shall include the process for creating and deploying security
              updates for the <abbr linkend="OS"/> software.</title>
            </a-element>
            <a-element id="alc_tsu_ext.1.2c">
              <title>The description shall include the mechanisms publicly available for reporting
              security issues pertaining to the <abbr linkend="OS"/>.</title>
              <note> The reporting mechanism could include web sites, email addresses, as well as a
              means to protect the sensitive nature of the report (e.g., public keys that could be
              used to encrypt the details of a proof-of-concept exploit). </note>
            </a-element>
	  </group>
	  <group type="eval-action">
            <a-element id="alc_tsu_ext.1.1e">
              <title>The evaluator shall confirm that the information provided meets all
              requirements for content and presentation of evidence.</title>
              <aactivity> The evaluator will verify that the TSS contains a description of the timely
              security update process used by the developer to create and deploy security updates.
              The evaluator will verify that this description addresses the entire application. The
              evaluator will also verify that, in addition to the OS developer’s process, any
              third-party processes are also addressed in the description. The evaluator will also
              verify that each mechanism for deployment of security updates is described. <h:br/> The
              evaluator will verify that, for each deployment mechanism described for the update
              process, the TSS lists a time between public disclosure of a vulnerability and public
              availability of the security update to the OS patching this vulnerability, to include
              any third-party or carrier delays in deployment. The evaluator will verify that this
              time is expressed in a number or range of days. <h:br/> The evaluator will verify that
              this description includes the publicly available mechanisms (including either an email
              address or website) for reporting security issues related to the OS. The evaluator
              shall verify that the description of this mechanism includes a method for protecting
              the report either using a public key for encrypting email or a trusted channel for a
              website. </aactivity>
            </a-element>
	  </group>
        </a-component>
      </subsection>
      <subsection id="ate" title="Class ATE: Tests">Testing is specified for functional aspects of
        the system as well as aspects that take advantage of design or implementation weaknesses.
        The former is done through the ATE_IND family, while the latter is through the AVA_VAN
        family. At the assurance level specified in this PP, testing is based on advertised
        functionality and interfaces with dependency on the availability of design information. One
        of the primary outputs of the evaluation process is the test report as specified in the
        following requirements. <a-component id="ate_ind.1"
          name="Independent Testing – Conformance (ATE_IND.1)"> Testing is performed to confirm the
          functionality described in the <abbr linkend="TSS"/> as well as the administrative
          (including configuration and operational) documentation provided. The focus of the testing
          is to confirm that the requirements specified in <secref linkend="SFRs"/> being met,
          although some additional testing is specified for SARs in <secref linkend="SARs"/>. The
          Assurance Activities identify the additional testing activities associated with these
          components. The evaluator produces a test report documenting the plan for and results of
          testing, as well as coverage arguments focused on the platform/<abbr linkend="OS"/>
          combinations that are claiming conformance to this PP. Given the scope of the <abbr
            linkend="OS"/> and its associated evaluation evidence requirements, this component’s
          assurance activities are covered by the assurance activities listed for ALC_CMC.1.
	  <group type="dev-action">
            <a-element id="ate_ind.1.1d">
              <title>The developer shall provide the <abbr linkend="OS"/> for testing.</title>
            </a-element>
	  </group>
          <group type="con-pres">
            <a-element id="ate_ind.1.1c">
              <title>The <abbr linkend="OS"/> shall be suitable for testing.</title>
            </a-element>
	  </group>
	  <group type="eval-action">
            <a-element id="ate_ind.1.1e">
              <title>The evaluator <h:i>shall confirm</h:i> that the information provided meets all
              requirements for content and presentation of evidence.</title>
            </a-element>
            <a-element id="ate_ind.1.2e">
              <title>The evaluator shall test a subset of the <abbr linkend="TSF"/> to confirm that
              the <abbr linkend="TSF"/> operates as specified.</title>
              <note role="application">The evaluator will test the OS on the most current fully
              patched version of the platform.</note>
              <aactivity>The evaluator will prepare a test plan and report documenting the testing
              aspects of the system, including any application crashes during testing. The evaluator
              shall determine the root cause of any application crashes and include that information
              in the report. The test plan covers all of the testing actions contained in the <cite
                linkend="bibCEM"/> and the body of this PP’s Assurance Activities. <h:br/> While it is
              not necessary to have one test case per test listed in an Assurance Activity, the
              evaluator must document in the test plan that each applicable testing requirement in
              the <abbr linkend="ST"/> is covered. The test plan identifies the platforms to be
              tested, and for those platforms not included in the test plan but included in the
                <abbr linkend="ST"/>, the test plan provides a justification for not testing the
              platforms. This justification must address the differences between the tested
              platforms and the untested platforms, and make an argument that the differences do not
              affect the testing to be performed. It is not sufficient to merely assert that the
              differences have no affect; rationale must be provided. If all platforms claimed in
              the <abbr linkend="ST"/> are tested, then no rationale is necessary. The test plan
              describes the composition of each platform to be tested, and any setup that is
              necessary beyond what is contained in the AGD documentation. It should be noted that
              the evaluator is expected to follow the AGD documentation for installation and setup
              of each platform either as part of a test or as a standard pre-test condition. This
              may include special test drivers or tools. For each driver or tool, an argument (not
              just an assertion) should be provided that the driver or tool will not adversely
              affect the performance of the functionality by the <abbr linkend="OS"/> and its
              platform. <h:br/> This also includes the configuration of the cryptographic engine to be
              used. The cryptographic algorithms implemented by this engine are those specified by
              this PP and used by the cryptographic protocols being evaluated (IPsec, TLS). The test
              plan identifies high-level test objectives as well as the test procedures to be
              followed to achieve those objectives. These procedures include expected results. <h:br/>
              The test report (which could just be an annotated version of the test plan) details
              the activities that took place when the test procedures were executed, and includes
              the actual results of the tests. This shall be a cumulative account, so if there was a
              test run that resulted in a failure; a fix installed; and then a successful re-run of
              the test, the report would show a “fail” and “pass” result (and the supporting
              details), and not just the “pass” result.</aactivity>
            </a-element>
	  </group>
        </a-component>
      </subsection>
      <subsection id="ava" title="Class AVA: Vulnerability Assessment">For the first generation of
        this protection profile, the evaluation lab is expected to survey open sources to discover
        what vulnerabilities have been discovered in these types of products. In most cases, these
        vulnerabilities will require sophistication beyond that of a basic attacker. Until
        penetration tools are created and uniformly distributed to the evaluation labs, the
        evaluator will not be expected to test for these vulnerabilities in the <abbr linkend="OS"
        />. The labs will be expected to comment on the likelihood of these vulnerabilities given
        the documentation provided by the vendor. This information will be used in the development
        of penetration testing tools and for the development of future protection profiles.
        <a-component id="ava_van.1" name="Vulnerability Survey (AVA_VAN.1)">
	  <group type="dev-action">
            <a-element id="ava_van.1.1d">
              <title>The developer shall provide the <abbr linkend="OS"/> for testing.</title>
            </a-element>
	  </group>
	  <group type="con-pres">
          <a-element id="ava_van.1.1c">
            <title>The <abbr linkend="OS"/> shall be suitable for testing.</title>
          </a-element>
	  </group>
	  <group type="eval-action">
          <a-element id="ava_van.1.1e">
            <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
          </a-element>
          <a-element id="ava_van.1.2e">
            <title>The evaluator shall perform a search of public domain sources to identify
              potential vulnerabilities in the <abbr linkend="OS"/>.</title>
            <note role="application">Public domain sources include the Common Vulnerabilities 
              and Exposures (CVE) dictionary for publicly-known vulnerabilities.  Public domain
              sources also include sites which provide free checking of files for viruses.</note>
            <!-- their Usage statement does not permit us to mention VirusTotal by name without permission -->
          </a-element>
          <a-element id="ava_van.1.3e">
            <title>The evaluator shall conduct penetration testing, based on the identified
              potential vulnerabilities, to determine that the <abbr linkend="OS"/> is resistant to
              attacks performed by an attacker possessing Basic attack potential.</title>
            <aactivity>The evaluator will generate a report to document their
              findings with respect to this requirement. This report could physically be part of the
              overall test report mentioned in ATE_IND, or a separate document. The evaluator
              performs a search of public information to find vulnerabilities that have been found
              in similar applications with a particular focus on network protocols the application
              uses and document formats it parses. 
              The evaluator documents the sources consulted and
              the vulnerabilities found in the report. 
              <h:br/>
              For each vulnerability found, the evaluator
              either provides a rationale with respect to its non-applicability, or the evaluator
              formulates a test (using the guidelines provided in ATE_IND) to confirm the
              vulnerability, if suitable. Suitability is determined by assessing the attack vector
              needed to take advantage of the vulnerability. If exploiting the vulnerability
              requires expert skills and an electron microscope, for instance, then a test would not
              be suitable and an appropriate justification would be formulated.</aactivity>
          </a-element>
	  </group>
        </a-component>
      </subsection>      
    </section>
  </chapter>

  <appendix title="Optional Requirements" id="optional"> As indicated in <secref linkend="ccl"/>,
    the baseline requirements (those that must be performed by the <abbr linkend="OS"/>) are
    contained in the body of this PP. Additionally, there are three other types of requirements
    specified in <appref linkend="optional"/>, <appref linkend="sel-based"/>, and <appref
      linkend="objective"/>. The first type (in this Appendix) are requirements that can be included
    in the <abbr linkend="ST"/>, but are not required in order for a OS to claim conformance to
    this PP. The second type (in <appref linkend="sel-based"/>) are requirements based on selections
    in the body of the PP: if certain selections are made, then additional requirements in that
    appendix must be included. The third type (in <appref linkend="objective"/> are components that
    are not required in order to conform to this PP, but will be included in the baseline
    requirements in future versions of this PP, so adoption by vendors is encouraged. Note that the
    ST author is responsible for ensuring that requirements that may be associated with those in
      <appref linkend="optional"/>, <appref linkend="sel-based"/>, and <appref linkend="objective"/>
    but are not listed (e.g., FMT-type requirements) are also included in the ST. </appendix>

  <appendix title="Selection-Based Requirements" id="sel-based"> As indicated in the introduction to
    this PP, the baseline requirements (those that must be performed by the OS or its underlying
    platform) are contained in the body of this PP. There are additional requirements based on
    selections in the body of the PP: if certain selections are made, then additional requirements
    below will need to be included. </appendix>

  <appendix title="Objective Requirements" id="objective"> This appendix includes requirements that
    specify security functionality which also addresses threats. The requirements are not currently
    mandated in the body of this PP as they describe security functionality not yet widely-available
    in commercial technology. However, these requirements may be included in the ST such that the
    OS is still conformant to this PP, and it is expected that they be included as soon as
    possible. </appendix>

  <appendix title="Implicitly Satisfied Requirements" id="satisfiedreqs"> This
	appendix lists requirements that should be considered satisfied by products
	successfully evaluated against this Protection Profile.  
	However, these requirements are not featured explicitly as SFRs and should not be
	included in the <abbr linkend="ST"/>.  
	They are not included as standalone SFRs because it would
	increase the time, cost, and complexity of evaluation.  This approach is permitted
	by <cite linkend="bibCC"/> Part 1, <h:b>8.2 Dependencies between components</h:b>.
    <h:br/>
	This information benefits systems engineering activities which call for inclusion of 
	particular security controls.  Evaluation against the Protection Profile
	provides evidence that these controls are present and have been evaluated.
     <h:table>
	<h:tr class="header">
	<h:td>Requirement</h:td>
	<h:td>Rationale for Satisfaction</h:td>
	</h:tr>
	<h:tr>
	<h:td>FIA_UAU.1 - Timing of authentication</h:td>
	<h:td>
	  <linkref linkend="FIA_AFL.1"/> implicitly requires that the OS perform all necessary actions, 
	  including those on behalf of the user who has not been authenticated, 
	  in order to authenticate;
	  therefore it is duplicative to include these actions as a 
	  separate assignment and test.
	</h:td>
	</h:tr>
	<h:tr>
	<h:td>FIA_UID.1 - Timing of identification</h:td>
	<h:td>
	  <linkref linkend="FIA_AFL.1"/> implicitly requires that the OS perform all necessary actions, 
	  including those on behalf of the user who has not been identified, 
	  in order to authenticate;
	  therefore it is duplicative to include these actions as a 
	  separate assignment and test.
	</h:td>
	</h:tr>
	<h:tr>
	<h:td>FMT_SMR.1 - Security roles</h:td>
	<h:td>
	  <linkref linkend="FMT_MOF_EXT.1"/> specifies role-based management functions that implicitly defines
	  user and privileged accounts; 
	  therefore, it is duplicative to include separate role requirements.
	</h:td>
	</h:tr>
	<h:tr>
	<h:td>FPT_STM.1 - Reliable time stamps</h:td>
	<h:td>
	  <linkref linkend="FAU_GEN.1.2"/> explicitly requires that the OS associate timestamps with audit records;
	  therefore it is duplicative to include a separate timestamp requirement.
	</h:td>
	</h:tr>
	<h:tr>
	<h:td>FTA_SSL.1 - TSF-initiated session locking</h:td>
	<h:td>
	  <linkref linkend="FMT_MOF_EXT.1"/> defines requirements for managing session locking;
	  therefore, it is duplicative to include a separate session locking requirement.
	</h:td>
	</h:tr>
	<h:tr>
	<h:td>FTA_SSL.2 - User-initiated locking</h:td>
	<h:td>
	  <linkref linkend="FMT_MOF_EXT.1"/> defines requirements for user-initiated session locking;
	  therefore, it is duplicative to include a separate session locking requirement.
	</h:td>
	</h:tr>
	<h:tr>
	<h:td>FAU_STG.1 - Protected audit trail storage</h:td>
	<h:td>
	  <linkref linkend="FPT_ACF_EXT.1"/> defines a requirement to protect audit logs;
	  therefore, it is duplicative to include a separate protection of audit trail requirements.
	</h:td>
	</h:tr>
	<h:tr>
	<h:td>FAU_GEN.2 - User identity association</h:td>
	<h:td>
	  <linkref linkend="FAU_GEN.1.2"/> explicitly requires that the OS record
	  any user account associated with each event; therefore, it is duplicative
	  to include a separate requirement to associate a user account with each
	  event.
	</h:td>
	</h:tr>
	<h:tr>
	  <h:td>FAU_SAR.1 - Audit review</h:td>
	  <h:td>
	    <linkref linkend="FPT_ACF_EXT.1.2"/> requires that audit logs (and other objects)
	    are protected from reading by unprivileged users; therefore, it is duplicative
	    to include a separate requirement to protect only the audit information.
	  </h:td>
	</h:tr>
    </h:table>

  </appendix>

  <appendix title="Entropy Documentation and Assessment" id="entropyappendix"> This appendix
    describes the required supplementary information for the entropy source used by the OS. <h:br/>
    The documentation of the entropy source should be detailed enough that, after reading, the
    evaluator will thoroughly understand the entropy source and why it can be relied upon to provide
    sufficient entropy. This documentation should include multiple detailed sections: design
    description, entropy justification, operating conditions, and health testing. This documentation
    is not required to be part of the TSS. <section id="entropydesign" title="Design Description">
      Documentation shall include the design of the entropy source as a whole, including the
      interaction of all entropy source components. Any information that can be shared regarding the
      design should also be included for any third-party entropy sources that are included in the
      product. <h:br/> The documentation will describe the operation of the entropy source to include,
      how entropy is produced, and how unprocessed (raw) data can be obtained from within the
      entropy source for testing purposes. The documentation should walk through the entropy source
      design indicating where the entropy comes from, where the entropy output is passed next, any
      post-processing of the raw outputs (hash, XOR, etc.), if/where it is stored, and finally, how
      it is output from the entropy source. Any conditions placed on the process (e.g., blocking)
      should also be described in the entropy source design. Diagrams and examples are encouraged.
      <h:br/> This design must also include a description of the content of the security boundary of
      the entropy source and a description of how the security boundary ensures that an adversary
      outside the boundary cannot affect the entropy rate. <h:br/> If implemented, the design
      description shall include a description of how third-party applications can add entropy to the
      RBG. A description of any RBG state saving between power-off and power-on shall be included. </section>
    <section id="entropyjustification" title="Entropy Justification"> There should be a technical
      argument for where the unpredictability in the source comes from and why there is confidence
      in the entropy source delivering sufficient entropy for the uses made of the RBG output (by
      this particular OS). This argument will include a description of the expected min-entropy
      rate (i.e. the minimum entropy (in bits) per bit or byte of source data) and explain that
      sufficient entropy is going into the OS randomizer seeding process. This discussion will be
      part of a justification for why the entropy source can be relied upon to produce bits with
      entropy. <h:br/> The amount of information necessary to justify the expected min-entropy rate
      depends on the type of entropy source included in the product. <h:br/> For developer provided
      entropy sources, in order to justify the min-entropy rate, it is expected that a large number
      of raw source bits will be collected, statistical tests will be performed, and the min-entropy
      rate determined from the statistical tests. While no particular statistical tests are required
      at this time, it is expected that some testing is necessary in order to determine the amount
      of min-entropy in each output. <h:br/> For third-party provided entropy sources, in which the
      OS vendor has limited access to the design and raw entropy data of the source, the
      documentation will indicate an estimate of the amount of min-entropy obtained from this
      third-party source. It is acceptable for the vendor to “assume” an amount of min-entropy,
      however, this assumption must be clearly stated in the documentation provided. In particular,
      the min-entropy estimate must be specified and the assumption included in the ST. <h:br/>
      Regardless of type of entropy source, the justification will also include how the DRBG is
      initialized with the entropy stated in the ST, for example by verifying that the min-entropy
      rate is multiplied by the amount of source data used to seed the DRBG or that the rate of
      entropy expected based on the amount of source data is explicitly stated and compared to the
      statistical rate. If the amount of source data used to seed the DRBG is not clear or the
      calculated rate is not explicitly related to the seed, the documentation will not be
      considered complete. <h:br/> The entropy justification shall not include any data added from any
      third-party application or from any state saving between restarts. </section>
    <section id="entropyoperatingconditions" title="Operating Conditions"> The entropy rate may be
      affected by conditions outside the control of the entropy source itself. For example, voltage,
      frequency, temperature, and elapsed time after power-on are just a few of the factors that may
      affect the operation of the entropy source. As such, documentation will also include the range
      of operating conditions under which the entropy source is expected to generate random data. It
      will clearly describe the measures that have been taken in the system design to ensure the
      entropy source continues to operate under those conditions. Similarly, documentation shall
      describe the conditions under which the entropy source is known to malfunction or become
      inconsistent. Methods used to detect failure or degradation of the source shall be included. </section>
    <section id="entropyhealthtesting" title="Health Testing"> More specifically, all entropy source
      health tests and their rationale will be documented. This includes a description of the health
      tests, the rate and conditions under which each health test is performed (e.g., at start,
      continuously, or on-demand), the expected results for each health test, and rationale
      indicating why each test is believed to be appropriate for detecting one or more failures in
      the entropy source. </section>
  </appendix>

  <appendix title="References" id="biblio">
    <bibliography>
      <entry id="bibCC">
        <tag>CC</tag>
        <description>Common Criteria for Information Technology Security Evaluation - <h:ul>
            <h:li><h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART1V3.1R4.pdf">Part
                1: Introduction and General Model</h:a>, CCMB-2012-09-001, Version 3.1 Revision 4,
              September 2012.</h:li>
            <h:li><h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART2V3.1R4.pdf">Part
                2: Security Functional Components</h:a>, CCMB-2012-09-002, Version 3.1 Revision 4,
              September 2012.</h:li>
            <h:li><h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART3V3.1R4.pdf">Part
                3: Security Assurance Components</h:a>, CCMB-2012-09-003, Version 3.1 Revision 4,
              September 2012.</h:li>
          </h:ul></description>
      </entry>
      <entry id="bibCEM">
        <tag>CEM</tag>
        <description>
          <h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CEMV3.1R4.pdf">Common
            Evaluation Methodology for Information Technology Security - Evaluation Methodology</h:a>,
          CCMB-2012-09-004, Version 3.1, Revision 4, September 2012. </description>
      </entry>
      <entry id="bibCESG">
        <tag>CESG</tag>
        <description>CESG - <h:a
            href="https://www.gov.uk/government/collections/end-user-devices-security-guidance"> End
            User Devices Security and Configuration Guidance</h:a></description>
      </entry>
      <entry id="bibCSA">
        <tag>CSA</tag>
        <description>
          <h:a href="http://csrc.nist.gov/groups/SMA/ispab/documents/csa_87.txt">Computer Security Act
            of 1987</h:a>, H.R. 145, June 11, 1987. </description>
      </entry>
      <entry id="bibOMB">
        <tag>OMB</tag>
        <description>
          <h:a href="http://www.whitehouse.gov/sites/default/files/omb/memoranda/fy2006/m06-19.pdf"
            >Reporting Incidents Involving Personally Identifiable Information and Incorporating the
            Cost for Security in Agency Information Technology Investments</h:a>, OMB M-06-19, July
          12, 2006. </description>
      </entry>
    </bibliography>
  </appendix>

  <appendix title="Acronyms" id="acronyms">
    <acronyms>
      <entry>
        <term>AES</term>
        <description>Advanced Encryption Standard</description>
      </entry>
      <entry>
        <term>ANSI</term>
        <description>American National Standards Institute</description>
      </entry>
      <entry>
        <term>API</term>
        <description>Application Programming Interface</description>
      </entry>
      <entry>
        <term>ASLR</term>
        <description>Address Space Layout Randomization</description>
      </entry>
      <!-- Never used -->
      <!-- <entry> -->
      <!--   <term>CDSA</term> -->
      <!--   <description>Common Data Security Architecture</description> -->
      <!-- </entry> -->
      <entry>
        <term>CESG</term>
        <description>Communications-Electronics Security Group</description>
      </entry>
      <entry>
        <term>CMC</term>
        <description>Certificate Management over CMS</description>
      </entry>
      <entry>
        <term>CMS</term>
        <description>Cryptographic Message Syntax</description>
      </entry>
      <entry>
        <term>CN</term>
        <description>Common Names</description>
      </entry>
      <entry>
        <term>CRL</term>
        <description>Certificate Revocation List</description>
      </entry>
      <entry>
        <term>CSA</term>
        <description>Computer Security Act</description>
      </entry>
      <entry>
        <term>DEP</term>
        <description>Data Execution Prevention</description>
      </entry>
      <entry>
        <term>DES</term>
        <description>Data Encryption Standard</description>
      </entry>
      <entry>
        <term>DHE</term>
        <description>Diffie-Hellman Ephemeral</description>
      </entry>
      <entry>
        <term>DNS</term>
        <description>Domain Name System</description>
      </entry>
      <entry>
        <term>DRBG</term>
        <description>Deterministic Random Bit Generator</description>
      </entry>
      <entry>
        <term>DSS</term>
        <description>Digital Signature Standard</description>
      </entry>
      <entry>
        <term>DT</term>
        <description>Date/Time Vector</description>
      </entry>
      <entry>
        <term>DTLS</term>
        <description>Datagram Transport Layer Security</description>
      </entry>
      <entry>
        <term>EAP</term>
        <description>Extensible Authentication Protocol</description>
      </entry>
      <entry>
        <term>ECDHE</term>
        <description>Elliptic Curve Diffie-Hellman Ephemeral</description>
      </entry>
      <entry>
        <term>ECDSA</term>
        <description>Elliptic Curve Digital Signature Algorithm</description>
      </entry>
      <entry>
        <term>EST</term>
        <description>Enrollment over Secure Transport</description>
      </entry>
      <entry>
        <term>FIPS</term>
        <description>Federal Information Processing Standards</description>
      </entry>
      <entry>
        <term>DSS</term>
        <description>Digital Signature Standard</description>
      </entry>
      <entry>
        <term>HMAC</term>
        <description>Hash-based Message Authentication Code</description>
      </entry>
      <entry>
        <term>HTTP</term>
        <description>Hypertext Transfer Protocol</description>
      </entry>
      <entry>
        <term>HTTPS</term>
        <description>Hypertext Transfer Protocol Secure</description>
      </entry>
      <entry>
        <term>DSS</term>
        <description>Digital Signature Standard</description>
      </entry>
      <!-- <entry> -->
      <!--   <term>IEC</term> -->
      <!--   <description>International Electrotechnical Commission</description> -->
      <!-- </entry> -->
      <entry>
        <term>IETF</term>
        <description>Internet Engineering Task Force</description>
      </entry>
      <entry>
        <term>IP</term>
        <description>Internet Protocol</description>
      </entry>
      <entry>
        <term>ISO</term>
        <description>International Organization for Standardization</description>
      </entry>
      <entry>
        <term>IT</term>
        <description>Information Technology</description>
      </entry>
      <entry>
        <term>ITSEF</term>
        <description>Information Technology Security Evaluation Facility</description>
      </entry>
      <entry>
        <term>NFC</term>
        <description>Near Field Communication</description>
      </entry>
      <entry>
        <term>NIAP</term>
        <description>National Information Assurance Partnership</description>
      </entry>
      <entry>
        <term>NIST</term>
        <description>National Institute of Standards and Technology</description>
      </entry>
      <entry>
        <term>OCSP</term>
        <description>Online Certificate Status Protocol</description>
      </entry>
      <entry>
        <term>OID</term>
        <description>Object Identifier</description>
      </entry>
      <entry>
        <term>OMB</term>
        <description>Office of Management and Budget</description>
      </entry>
      <entry>
        <term>OS</term>
        <description>Operating System</description>
      </entry>
      <entry>
        <term>PII</term>
        <description>Personally Identifiable Information</description>
      </entry>
      <entry>
        <term>PKI</term>
        <description>Public Key Infrastructure</description>
      </entry>
      <entry>
        <term>PP</term>
        <description>Protection Profile</description>
      </entry>
      <entry>
        <term>RBG</term>
        <description>Random Bit Generator</description>
      </entry>
      <entry>
        <term>RFC</term>
        <description>Request for Comment</description>
      </entry>
      <entry>
        <term>RNG</term>
        <description>Random Number Generator</description>
      </entry>
      <entry>
        <term>RNGVS</term>
        <description>Random Number Generator Validation System</description>
      </entry>
      <entry>
        <term>SAN</term>
        <description>Subject Alternative Name</description>
      </entry>
      <entry>
        <term>SAR</term>
        <description>Security Assurance Requirement</description>
      </entry>
      <entry>
        <term>SFR</term>
        <description>Security Functional Requirement</description>
      </entry>
      <entry>
        <term>SHA</term>
        <description>Secure Hash Algorithm</description>
      </entry>
      <entry>
        <term>S/MIME</term>
        <description>Secure/Multi-purpose Internet Mail Extensions</description>
      </entry>
      <entry>
        <term>SIP</term>
        <description>Session Initiation Protocol</description>
      </entry>
      <entry>
        <term>SWID</term>
        <description>Software Identification</description>
      </entry>
      <entry>
        <term>TLS</term>
        <description>Transport Layer Security</description>
      </entry>
      <entry>
        <term>URI</term>
        <description>Uniform Resource Identifier</description>
      </entry>
      <entry>
        <term>URL</term>
        <description>Uniform Resource Locator</description>
      </entry>
      <entry>
        <term>USB</term>
        <description>Universal Serial Bus</description>
      </entry>
      <entry>
        <term>XCCDF</term>
        <description>eXtensible Configuration Checklist Description Format</description>
      </entry>
      <entry>
        <term>XOR</term>
        <description>Exclusive Or</description>
      </entry>
    </acronyms>
  </appendix>
</PP>

<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="..	ransformspp2html.xsl"?>
<?xml-model href="https://raw.githubusercontent.com/commoncriteria/transforms/master/schemas/CCProtectionProfile.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<PP boilerplate="yes" target-product="General Purpose Operating System" xmlns="https://niap-ccevs.org/cc/v1" xmlns:h="http://www.w3.org/1999/xhtml" xmlns:sec="https://niap-ccevs.org/cc/v1/section">
  <PPReference>
    <ReferenceTable>
      <PPTitle>Protection Profile for General Purpose Operating Systems</PPTitle>
      <PPVersion>4.3</PPVersion>
      <PPAuthor>NIAP</PPAuthor>
      <PPPubDate>2022-09-27</PPPubDate>
      <Keywords>application; software</Keywords>
    </ReferenceTable>
  </PPReference>
  <RevisionHistory>
    <entry>
      <version>4.3</version>
      <date>2022-09-27</date>
      <subject>
        <h:br xmlns="">Added compatibility with MDM Agent, Bluetooth, and TLS Modules.Two factor authentication.Aligned with CNSA.</h:br>
      </subject>
    </entry>
    <entry>
      <version>4.2.1</version>
      <date>2019-04-22</date>
      <subject>
        <h:br xmlns="">Formatting changes as a result of PP evaluation</h:br>
      </subject>
    </entry>
    <entry>
      <version>4.2</version>
      <date>2018-05-22</date>
      <subject>
        <h:br xmlns="">Multiple Technical Decisions applied</h:br>
      </subject>
    </entry>
    <entry>
      <version>4.1</version>
      <date>2016-03-09</date>
      <subject>
        <h:br xmlns="">Minor updates - cryptographic modes</h:br>
      </subject>
    </entry>
    <entry>
      <version>4.0</version>
      <date>2015-08-14</date>
      <subject>
        <h:br xmlns="">Release - significant revision</h:br>
      </subject>
    </entry>
  </RevisionHistory>
  <include-pkg id="pkg-QQQQ">
    <!-- Repeatable -->
    <git>
      <url>githubURL</url>
      <branch>v#.#</branch>
    </git>
    <url>NIAPURL</url>
    <depends on-sel="QQQQ" on-also="QQQQ"/>
  </include-pkg>
  <modules>
    <module id="mod-vpnclient">
      <git>
	<url>https://github.com/commoncriteria/vpnclient</url>
	<branch>v2.4</branch>
      </git>
      <url><![CDATA[https://www.niap-ccevs.org/Profile/Info.cfm?PPID=467&id=467]]></url>
      <depends on="s-provides-vpnclient"/>
    </module>
    <module id="mod-bluetooth">
      <git>
	<url>https://github.com/commoncriteria/bluetooth</url>
	<branch>v1.0</branch>
      </git>
      <url><![CDATA[https://www.niap-ccevs.org/Profile/Info.cfm?PPID=425&id=425]]></url>
    </module>
    <module id="mod-mdmagent">
      <git>
	<url>https://github.com/commoncriteria/mdmagent</url>
	<branch>Release-1.0</branch>
      </git>
      <url><![CDATA[https://www.niap-ccevs.org/Profile/Info.cfm?PPID=441&id=441]]></url>
    </module>
    <module id="mod-wlanclient">
      <git>
	<url>https://github.com/commoncriteria/wlanclient</url>
	<branch>release-1.0</branch>
      </git>
      <url><![CDATA[https://www.niap-ccevs.org/Profile/Info.cfm?PPID=386&id=386]]></url>
    </module>
    <!-- <module id="mod-biometric" version="1.1" name="cPP for Biometrics" product="Biometric Devices " short="BMcPP"> -->
    <!--   <url>https://biometricitc.github.io/v1.1/1.1PRE/MOD-BIO-v1.1.pdf</url> -->
    <!-- </module> -->
  </modules>
  <sec:Introduction>
    <sec:Overview>The scope of this Protection Profile (PP) is to describe the security functionality of operating systems in terms of <xref g="CC"></xref> and to define functional and assurance requirements for such products. An operating system is software that manages computer hardware and software resources, and provides common services for application programs. The hardware it manages may be physical or virtual.</sec:Overview>
    <tech-terms>
      <term full="Address Space Layout Randomization" abbr="ASLR">
	An anti-exploitation feature which loads memory mappings into unpredictable
	locations. ASLR makes it more difficult for an attacker to redirect control to code
	that they have introduced into the address space of a process.
      </term>
      <term full="Administrator" abbr="null">
	An administrator is responsible for management activities, including setting policies that are 
	applied by the enterprise on the operating system.
	This administrator could be acting remotely through a management server, from which the system
	receives configuration policies.
	An administrator can enforce settings on the system which cannot be overridden by non-administrator users.
      </term>
      <term full="Application" abbr="app">
	Software that runs on a platform and performs tasks on behalf of the user
	or owner of the platform, as well as its supporting documentation. 
      </term>
      <term full="Application Programming Interface" abbr="API">
	A specification of routines, data structures, object classes, and variables
	that allows an application to make use of services provided by another software
	component, such as a library. APIs are often provided for a set of libraries included
	with the platform.
      </term>
      <term full="Credential" abbr="null">
	Data that establishes the identity of a user, e.g. a cryptographic key or
	password.
      </term>
      <term full="Critical Security Parameters" abbr="CSP">
	Information that is either user or system defined and
	is used to operate a cryptographic module in processing encryption functions including
	cryptographic keys and authentication data, such as passwords, the disclosure or modification
	of which can compromise the security of a cryptographic module or the security of the
	information protected by the module.
      </term>
      <term full="DAR Protection" abbr="null">
	Countermeasures that prevent attackers, even those with physical access,
	from extracting data from non-volatile storage.
	Common techniques include data encryption and wiping.
      </term>
      <term full="Data Execution Prevention" abbr="DEP">
	An anti-exploitation feature of modern operating systems executing on
	modern computer hardware, which enforces a non-execute permission on pages of memory.
	DEP prevents pages of memory from containing both data and instructions, which makes
	it more difficult for an attacker to introduce and execute code.
      </term>
      <term full="Developer" abbr="null">
	An entity that writes OS software. For the purposes of this document,
	vendors and developers are the same.
      </term>
      <term full="General Purpose Operating System" abbr="null">
	A class of OSes designed to support a wide-variety of workloads consisting of many concurrent applications or services.
	Typical characteristics for OSes in this class include support for third-party applications,
	support for multiple users, and security separation between users and their respective resources.
	General Purpose Operating Systems also lack the real-time constraint that defines Real Time Operating Systems
	which are typically used in routers, switches, and embedded devices.
      </term>
      <term full="Hybrid Authentication" abbr="null">
	A hybrid authentication factor is one where a user has to
	submit a combination of a cryptographic token and a PIN or password and both must pass.
	If either factor fails, the entire attempt fails.
      </term>
      <term full="Host-based Firewall" abbr="null">
	A software-based firewall implementation running on the OS for filtering inbound and
	outbound network traffic to and from processes running on the OS.
      </term>
      <term full="Operating System" abbr="OS">
	Software that manages physical and logical resources and provides services
	for applications. The terms TOE and OS are interchangeable in this
	document. 
      </term>
      <term full="Personal Identification Number" abbr="PIN">
	An authentication factor that is comprised of a set of numeric or alphabetic characters
	that may be used  in addition to a cryptographic token to provide a hybrid authentication factor.
	At this time it  is not considered as a stand-alone authentication mechanism.
	A PIN is distinct from a password in that the allowed character set and required length of a PIN
	is typically smaller than that of a password as it is designed to be input quickly.
      </term>
      <term full="Personally Identifiable Information" abbr="PII">
	Any information about an individual maintained by an agency, including, but
	not limited to, education, financial transactions, medical history, and criminal or
	employment history and information which can be used to distinguish or trace an
	individual's identity, such as their name, social security number, date and place of
	birth, mother's maiden name, biometric records, etc., including any other personal
	information which is linked or linkable to an individual.</term>
      <term full="Sensitive Data" abbr="null">
	Sensitive data may include all user or enterprise data or may be specific
	application data such as PII, emails, messaging, documents, calendar items, and contacts.
	Sensitive data must minimally include credentials and keys. Sensitive data shall
	be identified in the OS's TSS by the ST author. 
      </term>
      <term full="User" abbr="null">
	A user is subject to configuration policies applied
	to the operating system by administrators.  On some systems under certain
	configurations, a normal user can temporarily elevate privileges to that of an administrator.
	At that time, such a user should be considered an administrator.
      </term>
    </tech-terms>
    <sec:Compliant_Targets_of_Evaluation>
    <sec:TOE_Boundary>
        The TOE boundary encompasses the OS kernel and its drivers, shared
        software libraries, and some application software included with the OS. The applications considered within the TOE
        are those that provide essential security services, many of which run with elevated
        privileges.  Applications which are covered by more-specific Protection Profiles cannot
        claim evaluation as part of the OS evaluation, even when it is necessary to evaluate
        some of their functionality as it relates to their role as part of the OS.
        <figure entity="images/Toe.png" title="General TOE " id="toe"/>
      </sec:TOE_Boundary>
      <sec:TOE_Platform>
	The TOE platform, which consists of the physical or virtual hardware on which the TOE executes,
        is outside the scope of evaluation.  At the same time, the security of the TOE relies upon it.
        Other hardware components which independently run their own software and are
        relevant to overall system security are also outside the scope of evaluation.
      </sec:TOE_Platform>
    </sec:Compliant_Targets_of_Evaluation>
    <sec:Use_Cases>Requirements in this Protection Profile are designed to
      address the security problems in at least the following use cases. These use cases are intentionally
      very broad, as many specific use cases exist for an operating system. These use cases may also
      overlap with one another.  An operating system's functionality may even be effectively extended by
      privileged applications installed onto it.  However, these are out of scope of this PP.
      <usecases>
        <usecase title="End User Devices" id="enduserdevices">
          <description>
	    <h:p>
	    The OS provides a platform for end user devices such as desktops,
	    laptops, convertibles, and tablets.
	    These devices may optionally be bound to a directory server or management server.
	    </h:p>
	    <h:p>
            As this Protection Profile does not address threats against data-at-rest,
            enterprises deploying operating systems in mobile scenarios should ensure that these systems
            include data-at-rest protection spelled out in other
	    Protection Profiles. Specifically, this includes the Protection Profiles for
	    <h:i>Full Drive Encryption - Encryption Engine</h:i>,
	    <h:i>Full Drive Encryption - Authorization Acquisition</h:i>,
	    and <h:i>Software File Encryption</h:i>.  The <h:i>Protection Profile for Mobile
		Device Fundamentals</h:i> includes requirements for data-at-rest protection and is appropriate
		for many mobile devices.
	    </h:p>
          </description>
        </usecase>
        <usecase title="Server Systems" id="serversystems">
          <description>The OS provides a platform for server-side services, either on
            physical or virtual hardware.  Many specific examples exist in which the OS acts
            as a platform for such services, including file servers, mail servers, and web servers.
          </description>
        </usecase>
        <usecase title="Cloud Systems" id="cloudsystems">
          <description>
	    <h:p>
	      The OS provides a platform for providing cloud services running on
              physical or virtual hardware.  An OS is typically part of offerings
              identified as Infrastructure as a Service (IaaS), Software as a Service (SaaS),
              and Platform as a Service (PaaS).
	    </h:p>
	    <h:p>
			This use case typically involves the use
			of virtualization technology which should be evaluated against the
			<h:i>Protection Profile for Server Virtualization</h:i>.
	    </h:p>
	  </description>
        </usecase>
      </usecases>
    </sec:Use_Cases>
  </sec:Introduction>
  <sec:Conformance_Claims xmlns="" boilerplate="no">
    <cclaims>
      <cclaim name="Conformance Statement">
        <description><h:br></description>
      </cclaim>
      <cclaim name="CC Conformance Claims">
        <description><h:br></description>
      </cclaim>
      <cclaim name="PP Claim">
        <description><h:br></description>
      </cclaim>
      <cclaim name="Package Claim">
        <description><h:br></description>
      </cclaim>
    </cclaims>
  </sec:Conformance_Claims>
  <!-- 3.0 Security Problem Definition-->
  <sec:Security_Problem_Definition xmlns="">
    The security problem is described in terms of the threats that the OS is expected to address, assumptions about the operational environment, and any organizational security policies that the OS is expected to enforce.
    <!-- 3.1 Threats -->
    <sec:Threats>
      <threats>
        <threat name="T.LIMITED_PHYSICAL_ACCESS">
          <description>An attacker may attempt to access data on the OS while having a limited amount of time with the physical device.</description>
          <objective-refer ref="O.PROTECTED_STORAGE">
            <rationale>The objective O.PROTECTED_STORAGE protects against unauthorized attempts to              access physical storage used by the TOE.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.LOCAL_ATTACK">
          <description>An attacker may compromise applications running on the OS. The compromised application may provide maliciously formatted input to the OS through a variety of channels including unprivileged system calls and messaging via the file system.</description>
          <objective-refer ref="O.ACCOUNTABILITY">
            <rationale>The objective O.ACCOUNTABILITY protects against local attacks by providing              a mechanism to report behavior that may indicate a local attack is occurring or              has occurred.</rationale>
          </objective-refer>
          <objective-refer ref="O.INTEGRITY">
            <rationale>The objective O.INTEGRITY protects against the use of mechanisms that weaken              the TOE with regard to attack by other software on the              platform.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.NETWORK_ATTACK">
          <description>An attacker is positioned on a communications channel or elsewhere on the network infrastructure. Attackers may engage in communications with applications and services running on or part of the OS with the intent of compromise. Engagement may consist of altering existing legitimate communications.</description>
          <objective-refer ref="O.ACCOUNTABILITY">
            <rationale>The threat T.NETWORK_ATTACK is countered by O.ACCOUNTABILITY as this              provides a mechanism for the OS to report behavior that may indicate a network              attack has occurred.</rationale>
          </objective-refer>
          <objective-refer ref="O.INTEGRITY">
            <rationale>The threat T.NETWORK_ATTACK is countered by O.INTEGRITY as this provides for              integrity of software that is installed onto the system from the network.</rationale>
          </objective-refer>
          <objective-refer ref="O.MANAGEMENT">
            <rationale>The threat T.NETWORK_ATTACK is countered by O.MANAGEMENT as this provides for              the ability to configure the OS to defend against network attack.</rationale>
          </objective-refer>
          <objective-refer ref="O.PROTECTED_COMMS">
            <rationale>The threat T.NETWORK_ATTACK is countered by O.PROTECTED_COMMS as this              provides for integrity of transmitted data.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.NETWORK_EAVESDROP">
          <description>An attacker is positioned on a communications channel or elsewhere on the network infrastructure. Attackers may monitor and gain access to data exchanged between applications and services that are running on or part of the OS.</description>
          <objective-refer ref="O.MANAGEMENT">
            <rationale>The threat T.NETWORK_EAVESDROP is countered by O.MANAGEMENT as this provides              for the ability to configure the OS to protect the confidentiality of its transmitted              data.</rationale>
          </objective-refer>
          <objective-refer ref="O.PROTECTED_COMMS">
            <rationale>The threat T.NETWORK_EAVESDROP is countered by O.PROTECTED_COMMS as this              provides for confidentiality of transmitted data.</rationale>
          </objective-refer>
        </threat>
      </threats>
    </sec:Threats>
    <!-- 3.2 Assumptions -->
    <sec:Assumptions>
      <assumptions>
        <assumption name="A.PLATFORM">
          <description>The OS relies upon a trustworthy computing platform for its execution. This underlying platform is out of scope of this PP.</description>
          <objective-refer ref="OE.PLATFORM">
            <rationale> The operational environment objective OE.PLATFORM is realized through
              A.PLATFORM. </rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.PROPER_ADMIN">
          <description>The administrator of the OS is not careless, willfully negligent or hostile, and administers the OS within compliance of the applied enterprise security policy.</description>
          <objective-refer ref="OE.PROPER_ADMIN">
            <rationale>The operational environment objective OE.PROPER_ADMIN is realized through
              A.PROPER_ADMIN.</rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.PROPER_USER">
          <description>The user of the OS is not willfully negligent or hostile, and uses the software in compliance with the applied enterprise security policy. At the same time, malicious software could act as the user, so requirements which confine malicious subjects are still in scope.</description>
          <objective-refer ref="OE.PROPER_USER">
            <rationale>The operational environment objective OE.PROPER_USER is realized through
              A.PROPER_USER.</rationale>
          </objective-refer>
        </assumption>
      </assumptions>
    </sec:Assumptions>
    <!-- 3.3 Organizational Security Policies -->
    <sec:Organizational_Security_Policies>
      <OSPs/>
      <!--     <OSP id="P.QQQQ"> 
        <description>QQQQ</description>
        <objective-refer ref="O.QQQQ">
            <rationale>QQQQ</rationale>
        </objective-refer>
    </OSP>
    </OSPs> -->
    </sec:Organizational_Security_Policies>
  </sec:Security_Problem_Definition>
  <!-- 4.0 Security Objectives -->
  <sec:Security_Objectives xmlns="">
    <!-- 4.1 Security Objectives for the TOE -->
    <sec:Security_Objectives_for_the_TOE>
      <SOs>
        <SO name="O.ACCOUNTABILITY">
          <description>Conformant OSes ensure that information exists that allows administrators to discover unintentional issues with the configuration and operation of the operating system and discover its cause. Gathering event information and immediately transmitting it to another system can also enable incident response in the event of system compromise.</description>
          <addressed-by>FAU_GEN.1</addressed-by>
          <rationale>Supports the objective by requiring that critical event information be gathered by the TOE. </rationale>
        </SO>
        <SO name="O.INTEGRITY">
          <description>Conformant OSes ensure the integrity of their update packages. OSes are seldom if ever shipped without errors, and the ability to deploy patches and updates with integrity is critical to enterprise network security. Conformant OSes provide execution environment-based mitigations that increase the cost to attackers by adding complexity to the task of compromising systems.</description>
          <addressed-by>FCS_COP.1/HASH</addressed-by>
          <rationale>Supports the objective by requiring the TSF to implement hash algorithms that are used in support of protected communications.</rationale>
          <addressed-by>FCS_COP.1/KEYHMAC</addressed-by>
          <rationale>Supports the objective by requiring the TSF to implement HMAC algorithms that are used in support of protected communications.</rationale>
          <addressed-by>FCS_COP.1/SIGN</addressed-by>
          <rationale>Supports the objective by requiring the TSF to implement digital signature algorithms that are used in support of protected communications.</rationale>
          <addressed-by>FPT_ACF_EXT.1</addressed-by>
          <rationale>Supports the objective by requiring the TSF restrict unprivileged users from changing critical components.</rationale>
          <addressed-by>FPT_BLT_EXT.1</addressed-by>
          <rationale>
            FPT_BLT_EXT.1 supports the objective by requiring the TSF to disable certain Bluetooth profiles when they are inactive such that explicit user authorization is required to re-enable them.
	  </rationale>
          <addressed-by>FPT_SRP_EXT.1</addressed-by>
          <rationale>Supports the objective by requiring the TSF to implement a configurable allowlist mechanism.</rationale>
          <addressed-by>FPT_TST_EXT.1</addressed-by>
          <rationale>Supports the objective by requiring the TSF to verify executable code critical to its operation.</rationale>
          <addressed-by>FPT_TUD_EXT.1</addressed-by>
          <rationale>Supports the objective by requiring that the OS be able to check for critical updates.</rationale>
          <addressed-by>FPT_TUD_EXT.2</addressed-by>
          <rationale>Supports the objective by requiring that the OS verify updates before applying them.</rationale>
          <addressed-by>FPT_W^X_EXT.1</addressed-by>
          <rationale>Supports the objective by requiring the OS to executable only non-writable memory.</rationale>
          <addressed-by>FIA_AFL.1</addressed-by>
          <rationale>Supports the objective by requiring the TSF to respond accordingly when the number of failed authentication attempts reaches a specified threshold.</rationale>
          <addressed-by>FIA_UAU.5</addressed-by>
          <rationale>Supports the objective by requiring the OS to provide standard authentication mechanisms.</rationale>
          <addressed-by>FIA_X509_EXT.1</addressed-by>
          <rationale>Supports the objective by requiring the TSF to validate certificates using industry standards.</rationale>
        </SO>
        <SO name="O.MANAGEMENT">
          <description>To facilitate management by users and the enterprise, conformant OSes provide consistent and supported interfaces for their security-relevant configuration and maintenance. This includes the deployment of applications and application updates through the use of platform-supported deployment mechanisms and formats, as well as providing mechanisms for configuration and application execution control.</description>
          <addressed-by>FMT_MOF_EXT.1</addressed-by>
          <rationale>Supports this objective by requiring the TOE to restrict the ability to perform certain management functions to a privileged user. </rationale>
          <addressed-by>FMT_SMF_EXT.1</addressed-by>
          <rationale>Supports this objective by requiring the TOE to implement specific management functions.</rationale>
          <addressed-by>FTA_TAB.1</addressed-by>
          <rationale>Supports this objective by requiring the TOE to implement a trusted path between the itself and users.</rationale>
        </SO>
        <SO name="O.PROTECTED_COMMS">
          <description>To address both passive (eavesdropping) and active (packet modification) network attack threats, conformant OSes provide mechanisms to create trusted channels for CSP and sensitive data. Both CSP and sensitive data should not be exposed outside of the platform.</description>
          <addressed-by>FCS_CKM.1</addressed-by>
          <rationale>Supports this objective by requiring the TSF to generate asymmetric cryptographic keys to industry standards.</rationale>
          <addressed-by>FCS_CKM.2</addressed-by>
          <rationale>Supports this objective by requiring the TSF to perform key establishment according to industry standards.</rationale>
          <addressed-by>FCS_CKM_EXT.4</addressed-by>
          <rationale>Supports this objective by requiring the TSF to destroy key material according to industry standards.</rationale>
          <addressed-by>FCS_COP.1/ENCRYPT</addressed-by>
          <rationale>Supports this objective by requiring the TSF to encrypt data according to industry standards </rationale>
          <addressed-by>FCS_COP.1/HASH</addressed-by>
          <rationale>Supports this objective by requiring the TSF to hash data according to industry standards.</rationale>
          <addressed-by>FCS_COP.1/KEYHMAC</addressed-by>
          <rationale>Supports this objective by requiring the TSF to perform keyed hashes according to industry standards. </rationale>
          <addressed-by>FCS_COP.1/SIGN</addressed-by>
          <rationale>Supports this objective by requiring the TSF to cryptographically sign data according to industry standards.</rationale>
          <addressed-by>FCS_RBG_EXT.1</addressed-by>
          <rationale>Supports this objective by requiring the OS to generate random bits according to industry standards.</rationale>
          <addressed-by>FDP_IFC_EXT.1</addressed-by>
          <rationale>Supports this objective by requiring the TSF to be compatible with at least one VPN.</rationale>
          <addressed-by>FIA_X509_EXT.1</addressed-by>
          <rationale>Supports the objective by requiring the TSF to validate certificates using industry standards.</rationale>
          <addressed-by>FIA_X509_EXT.2</addressed-by>
          <rationale>Supports this objective by requiring the TSF to validate TLS and related encrypted connections with x509 certificates.</rationale>
        </SO>
        <SO name="O.PROTECTED_STORAGE">
          <description>To address the issue of loss of confidentiality of credentials in the event of loss of physical control of the storage medium, conformant OSes provide data-at-rest protection for credentials. Conformant OSes also provide access controls which allow users to keep their files private from other users of the same system.</description>
          <addressed-by>FCS_COP.1/ENCRYPT</addressed-by>
          <rationale>Supports this objective requiring the OS to perform encryption according to industry stands.</rationale>
          <addressed-by>FCS_RBG_EXT.1</addressed-by>
          <rationale>Supports this objective by requiring the OS to generate random bits according to industry standards.</rationale>
          <addressed-by>FCS_STO_EXT.1</addressed-by>
          <rationale>Supports this objective by requiring the OS to provide encrypted storage.</rationale>
          <addressed-by>FDP_ACF_EXT.1</addressed-by>
          <rationale>Supports this objective by requiring the OS to implement access controls.</rationale>
        </SO>
      </SOs>
    </sec:Security_Objectives_for_the_TOE>
    <!-- 4.2 Security Objctives for the Operational Environment -->
    <sec:Security_Objectives_for_the_Operational_Environment>
      <SOEs>
        <SOE name="OE.PLATFORM">
          <description>The OS relies on being installed on trusted hardware.</description>
        </SOE>
        <SOE name="OE.PROPER_ADMIN">
          <description>The administrator of the OS is not careless, willfully negligent or hostile, and administers the OS within compliance of the applied enterprise security policy.</description>
        </SOE>
        <SOE name="OE.PROPER_USER">
          <description>The user of the OS is not willfully negligent or hostile, and uses the software within compliance of the applied enterprise security policy. Standard user accounts are provisioned in accordance with the least privilege model. Users requiring higher levels of access should have a separate account dedicated for that use.</description>
        </SOE>
      </SOEs>
    </sec:Security_Objectives_for_the_Operational_Environment>
    <!-- 4.3 Security Objectives Rationale -->
    <sec:Security_Objectives_Rationale/>
  </sec:Security_Objectives>
  <!-- 5.0 Security Requirements -->
  <sec:req xmlns="" title="Security Requirements">
    <!-- 5.1 Security Functional Requirements-->
    <sec:SFRs title="Security Functional Requirements">
      <!--5.1.1 Class: Cryptographic Support (FCS)-->
      <section id="fcs" title="Class: Cryptographic Support (FCS)">
        <!--FCS_CKM.1 Cryptographic Key Generation (Refined)-->
        <f-component cc-id="fcs_ckm.1" id="fcs-ckm-1" name="Cryptographic Key Generation (Refined)">
          <f-element id="fel-asym-gen">
            <title>The <h:b>OS</h:b>  shall generate <h:b>asymmetric</h:b>  cryptographic keys in accordance with a specified cryptographic key generation algorithm<selectables ><selectable id="s-keygen-rsa" > <snip>RSA schemes</snip> using cryptographic key sizes of 3072-bit or greater that
		meet the following: FIPS PUB 186-4, "Digital Signature Standard (DSS)", Appendix B.3
                </selectable><selectable> <snip>ECC schemes using "NIST curves"</snip> P-384 and <selectables ><selectable id="fcs_ckm.1.1_1" >P-521</selectable><selectable id="fcs_ckm.1.1_2" exclusive="yes"> no other curves</selectable></selectables> that meet the following: FIPS PUB 186-4, "Digital Signature Standard (DSS)", Appendix B.4 </selectable><selectable> <snip>FFC schemes</snip> using <selectables ><selectable id="s-keygen-ffc-fips" >cryptographic key sizes of 3072-bit
                    or greater that meet the following:  <snip>FIPS PUB 186-4</snip>, "Digital Signature
                  Standard (DSS)", Appendix B.1</selectable><selectable id="s-keygen-ffc-safeprime" > <snip>safe primes</snip> that meet the following: 
		  NIST Special Publication 800-56A Revision 3, “Recommendation for Pair-Wise Key Establishment Schemes"
		  </selectable></selectables></selectable></selectables>.</title>
            <note role="application"><h:p>
	      The ST author will select all key generation schemes used for key establishment and entity authentication.
		  When key generation is used for key establishment, the schemes in
	      FCS_CKM.2 and selected cryptographic protocols must match the selection.
		  When key generation is used for entity authentication, the public key is
          expected to be associated with an X.509v3 certificate.
	      <h:p/>
	      If the OS acts only as a receiver in the RSA key establishment scheme,
	      the OS does not need to implement RSA key generation.
	      </h:p></note>
            <aactivity level="element">
              <Tests>
                <h:p>
	      The evaluator will ensure that the TSS identifies the key
              sizes supported by the OS. If the ST specifies
              more than one scheme, the evaluator will examine the TSS to verify
              that it identifies the usage for each scheme.
	      <h:p/>
	      The evaluator will verify that
              the AGD guidance instructs the administrator how to configure the OS
	      to use the selected key generation scheme(s) and key size(s) for all uses defined
              in this PP.
	      <h:p/>
	      Evaluation Activity Note: The following tests may require the
              vendor to furnish a developer environment and developer
	      tools that are typically not available to end-users of the OS.
          </h:p>
                <testlist>
                  <test>
                    <depends on="s-keygen-rsa"/>
                    <h:b>Key Generation for FIPS PUB 186-4 RSA Schemes</h:b><h:p>The evaluator will verify
		  the implementation of RSA Key Generation by the OS using the Key
		  Generation test. This test verifies the ability of the TSF to
		  correctly produce values for the key components including the public verification
		  exponent e, the private prime factors p and q, the public modulus n and the
		  calculation of the private signature exponent d. Key Pair generation specifies 5 ways
		  (or methods) to generate the primes p and q. These include:
	      <h:ol><h:li> Random Primes:
		<h:ul><h:li>Provable primes</h:li><h:li>Probable primes</h:li></h:ul></h:li><h:li> Primes with Conditions: <h:ul><h:li>Primes p1, p2, q1,q2, p and q shall all be provable primes</h:li><h:li>Primes p1, p2, q1, and q2 shall be provable primes and p and q shall be
                      probable primes</h:li><h:li>Primes p1, p2, q1,q2, p and q shall all be probable primes</h:li></h:ul></h:li></h:ol>
	      To test the key generation method for the Random Provable primes method and for
              all the Primes with Conditions methods, the evaluator must seed the TSF
	      key generation routine with sufficient data to deterministically
              generate the RSA key pair. This includes the random seed(s), the public exponent of
              the RSA key, and the desired key length. For each key length supported, the evaluator
              shall have the TSF generate 25 key pairs. The evaluator will verify
              the correctness of the TSF's implementation by comparing values
              generated by the TSF with those generated from a known good
              implementation.
	      <h:p/>
	      If possible, the Random Probable primes method should also be
              verified against a known good implementation as described above. Otherwise, the
              evaluator will have the TSF generate 10 keys pairs for each
              supported key length nlen and verify: <h:ul><h:li>n = p⋅q,</h:li><h:li>p and q are probably prime according to Miller-Rabin tests,</h:li><h:li>GCD(p-1,e) = 1,</h:li><h:li>GCD(q-1,e) = 1,</h:li><h:li>2<h:sup>16</h:sup> ≤ e ≤ 2<h:sup>256</h:sup> and e is an odd integer,</h:li><h:li>|p-q| > 2<h:sup>nlen/2 - 100</h:sup>,</h:li><h:li>p ≥ 2<h:sup>nlen/2 -1/2</h:sup>,</h:li><h:li>q ≥ 2<h:sup>nlen/2 -1/2</h:sup>,</h:li><h:li>2<h:sup>(nlen/2)</h:sup> &lt; d &lt; LCM(p-1,q-1),</h:li><h:li>e⋅d = 1 mod LCM(p-1,q-1).</h:li></h:ul></h:p>
                  </test>
                </testlist>
                <testlist>
                  <test><h:b>Key Generation for Elliptic Curve Cryptography (ECC)</h:b><h:p> FIPS 186-4 ECC Key Generation Test<h:p/>For each supported NIST curve, i.e., P-384 and P-521, the
              evaluator will require the implementation under test (IUT) to generate 10
              private/public key pairs. The private key shall be generated using an approved random
              bit generator (RBG). To determine correctness, the evaluator will submit the
              generated key pairs to the public key verification (PKV) function of a known good
              implementation.
	     <h:p/>FIPS 186-4 Public Key Verification (PKV) Test<h:p/>
	      For each supported
              NIST curve, i.e., P-384 and P-521, the evaluator will generate 10
              private/public key pairs using the key generation function of a known good
              implementation and modify five of the public key values so that they are incorrect,
              leaving five values unchanged (i.e., correct). The evaluator will obtain in response
              a set of 10 PASS/FAIL values.

	      </h:p></test>
                </testlist>
                <testlist>
                  <test>
                    <depends on="s-keygen-ffc-fips"/>
                    <h:b>Key Generation for Finite-Field Cryptography (FFC)</h:b><h:p>
    
              The evaluator will verify the implementation of the Parameters Generation
              and the Key Generation for FFC by the TOE using the Parameter Generation
              and Key Generation test.
	      This test verifies the ability of the TSF to correctly
              produce values for the field prime p, the cryptographic prime q (dividing p-1),
              the cryptographic group generator g, and the calculation of the private
              key x and public key y.
	      <h:p/>
              The Parameter generation specifies 2 ways (or methods) to generate the
              cryptographic prime q and the field prime p:
              <h:li>Cryptographic and Field Primes:<h:ul><h:li>Primes q and p shall both be provable primes</h:li><h:li>Primes q and field prime p shall both be probable primes</h:li></h:ul></h:li>
              and two ways to generate the cryptographic group generator g:
              
              <h:li>Cryptographic Group Generator:<h:ul><h:li>Generator g constructed through a verifiable process</h:li><h:li>Generator g constructed through an unverifiable process</h:li></h:ul></h:li>

              The Key generation specifies 2 ways to generate the private key x:
              
              <h:li>Private Key:<h:ul><h:li>len(q) bit output of RBG where 1 ≤ x ≤ q-1</h:li><h:li>len(q) + 64 bit output of RBG, followed by a mod q-1 operation where 1 ≤ x ≤ q-1</h:li></h:ul></h:li>
              
              The security strength of the RBG must be at least that of the security offered by the FFC parameter set.
              
              To test the cryptographic and field prime generation method for the provable primes method and/or the
              group generator g for a verifiable process, the evaluator must seed the TSF parameter
              generation routine with sufficient data to deterministically generate the parameter set.
              
              For each key length supported, the evaluator will have the TSF generate 25 parameter sets
              and key pairs. The evaluator will verify the correctness of the TSF's implementation
              by comparing values generated by the TSF with those generated from a known good
              implementation. Verification must also confirm:
              <h:ul><h:li>g != 0,1</h:li><h:li>q divides p-1</h:li><h:li>g<h:sup>q</h:sup> mod p = 1</h:li><h:li>g<h:sup>x</h:sup> mod p = y</h:li></h:ul>
              for each FFC parameter set and key pair.
              </h:p>
                  </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FCS_CKM.2 Cryptographic Key Establishment (Refined)-->
        <f-component cc-id="fcs_ckm.2" id="fcs-ckm-2" name="Cryptographic Key Establishment (Refined)">
          <f-element id="fel-crypt-key-estab">
            <title>The OS shall <h:b>implement functionality to perform cryptographic key establishment</h:b>  in accordance with a specified cryptographic key <h:b>establishment</h:b>  method:<selectables ><selectable id="s-keyestab-rsa" > <snip>RSA-based</snip> key establishment schemes that meets the following:
		RSAES-PKCS1-v1_5 as specified in Section 7.2 of RFC 8017, “Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.2"</selectable><selectable id="s-keyestab-ecc" > <snip>Elliptic curve-based</snip> key establishment schemes that meets the following: NIST Special Publication 800-56A Revision 3, “Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography”</selectable><selectable id="s-keyestab-ffc" > <snip>Finite field-based</snip> key establishment schemes
		  that meets  <snip>NIST Special Publication 800-56A</snip> Revision 3, “Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography”</selectable></selectables>.</title>
            <note role="application"><h:p>
	      The ST author will select all key establishment schemes used
              for the selected cryptographic protocols.
	      <h:p/>
			  The elliptic curves used for the key establishment scheme shall correlate with the curves specified in   <xref to="fel-asym-gen"></xref>.
			  The domain parameters used for the finite field-based key establishment scheme are specified by the key generation according to   <xref to="fel-asym-gen"></xref>.
			  The finite field-based key establishment schemes that conform to NIST SP 800-56A Revision 3 correspond to the "safe-prime" groups selection in  <xref to="fel-asym-gen"></xref>.
				</h:p></note>
            <aactivity level="element">
              <Tests>
                <h:p>
		The evaluator will ensure that the supported key establishment schemes
		correspond to the key generation schemes identified in   <xref to="fel-asym-gen"></xref>
		If the ST specifies more than one scheme,
		the evaluator will examine the TSS to verify that it identifies the usage for each scheme.
	      <h:p/>
		The evaluator will verify that the AGD
		guidance instructs the administrator how to configure the OS to use the selected key
		establishment scheme(s).
	      <h:p/>
		Evaluation Activity Note: The following tests require
		the developer to provide access to a test platform that provides the evaluator with
		tools that are typically not found on factory products.
	      </h:p><h:b>Key Establishment Schemes</h:b><h:p>
		The evaluator will verify the implementation of
		the key establishment schemes supported by the OS using the applicable tests below.
	      </h:p>
                <testlist>
                  <test>
                    <depends on="s-keyestab-ecc"/>
                    <h:b>SP800-56A Key Establishment Schemes</h:b><h:p>
		      The evaluator will verify the OS's
		      implementation of SP800-56A key agreement schemes using the following Function and
		      Validity tests. These validation tests for each key agreement scheme verify that the OS
		      has implemented the components of the key agreement scheme according to the
		      specifications in the Recommendation. These components include the calculation of the
		      discrete logarithm cryptography (DLC) primitives (the shared secret value Z) and the
		      calculation of the derived keying material (DKM) via the Key Derivation Function
		      (KDF). If key confirmation is supported, the evaluator will also verify that the
		      components of key confirmation have been implemented correctly, using the test
		      procedures described below. This includes the parsing of the DKM, the generation of
		    MAC data and the calculation of MAC tag. </h:p><div><h:b>Function Test</h:b><h:p>The Function test verifies the ability of the OS to implement the key agreement schemes correctly.
		      To conduct this test the evaluator will generate or obtain test vectors from a known good implementation of the OS's supported schemes.
		      For each supported key agreement scheme-key agreement role combination, KDF type, and, if supported, key confirmation role- key confirmation type combination,
		      the tester will generate 10 sets of test vectors.
		      The data set consists of one set of domain parameter values (FCC) or the NIST approved curve (ECC) per 10 sets of public keys.
		      These keys are static, ephemeral or both depending on the scheme being tested.
		      <h:p/> The evaluator will obtain the DKM, the
                      corresponding OS's public keys (static and/or ephemeral), the MAC tag(s), and any
                      inputs used in the KDF, such as the Other Information field OI and OS id fields.
		      <h:p/>
			If the OS does not use a KDF defined in SP 800-56A, the evaluator will
			obtain only the public keys and the hashed value of the shared secret.
		      <h:p/>
			The evaluator will verify the correctness of the TSF's implementation of a given scheme
			by using a known good implementation to calculate the shared secret value, derive
			the keying material DKM, and compare hashes or MAC tags generated from these values.
		      <h:p/>
			If key confirmation is supported, the OS will perform the above for each
			implemented approved MAC algorithm.
		      <h:p/><h:b>Validity Test</h:b><h:p> The Validity test verifies the ability of the OS to
                recognize another party's valid and invalid key agreement results with or without
                key confirmation. To conduct this test, the evaluator will obtain a list of the
                supporting cryptographic functions included in the SP800-56A Revision 3 key agreement
                implementation to determine which errors the OS should be able to recognize.
		The
                evaluator generates a set of 24 FCC or 30 ECC test vectors consisting of data
                sets including domain parameter values or NIST approved curves, the evaluator's
                public keys, the OS's public/private key pairs, MAC tag, and any inputs used in the
                KDF, such as the other info and OS id fields.
		<h:p/>
		The evaluator will inject an
                error in some of the test vectors to test that the OS recognizes invalid key
                agreement results caused by the following fields being incorrect: the shared secret
                value Z, the DKM, the other information field OI, the data to be MACed, or the
                generated MAC tag. If the OS contains the full or partial (only ECC) public key
                validation, the evaluator will also individually inject errors in both parties'
                static public keys, both parties' ephemeral public keys and the OS's static private
                key to assure the OS detects errors in the public key validation function and/or
                the partial key validation function (in ECC only).
		At least two of the test vectors will remain unmodified and therefore
		should result in valid key agreement results
                (they should pass).
		<h:p/>
		  The OS will use these modified test vectors to emulate
                  the key agreement scheme using the corresponding parameters. The evaluator will
                  compare the OS's results with the results using a known good implementation
                  verifying that the OS detects these errors.
		</h:p></h:p><div><div><h:b>RSAES-PKCS1-v1_5 Key Establishment Schemes</h:b><h:p>
The evaluator will verify the correctness of the TSF's implementation of RSAES-PKCS1-v1_5 by using a known good implementation for each protocol selected in FTP_ITC_EXT.1 that uses RSAES-PKCS1-v1_5.
			</h:p><div><div><h:b>FFC Schemes using "safe-prime" groups (identified in Appendix D of SP 800-56A Revision 3) </h:b><h:p>
The evaluator will verify the correctness of the TSF's implementation of "safe-prime" groups by using a known good implementation for each protocol selected in FTP_ITC_EXT.1 that uses "safe-prime" groups. This test must be performed for each "safe-prime" group that each protocol uses.
	</h:p><div>
                  </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FCS_CKM_EXT.4 Cryptographic Key Destruction-->
        <f-component cc-id="fcs_ckm_ext.4" id="fcs-ckm-ext-4" name="Cryptographic Key Destruction">
          <f-element id="fel-key-kill-when">
            <title>The OS shall destroy all keys and key material when no longer needed.</title>
            <note role="application"><h:p>
		For the purposes of this requirement, key material refers to authentication data, passwords, secret/private symmetric keys, private asymmetric keys, data used to derive keys, values derived from passwords, etc.
	      <h:p/>Key destruction procedures are performed in accordance with  <xref to="fel-key-kill"></xref>.</h:p></note>
            <aactivity level="element">
              <TSS><h:p>
The evaluator examines the TSS to ensure it describes how the keys are managed in volatile memory. This description includes details of how each identified key is introduced into volatile memory (e.g. by derivation from user input, or by unwrapping a wrapped key stored in non-volatile memory) and how they are overwritten.
	        <h:p/>
The evaluator will check to ensure the TSS lists each type of key that is stored in in non-volatile memory, and identifies how the TOE interacts with the underlying platform to manage keys (e.g., store, retrieve, destroy). The description includes details on the method of how the TOE interacts with the platform, including an identification and description of the interfaces it uses to manage keys (e.g., file system APIs, platform key store APIs).
	        <h:p/>
If the ST makes use of the open assignment and fills in the type of pattern that is used, the evaluator examines the TSS to ensure it describes how that pattern is obtained and used. The evaluator will verify that the pattern does not contain any CSPs.
	        <h:p/>
The evaluator will check that the TSS identifies any configurations or circumstances that may not strictly conform to the key destruction requirement.
	        <h:p/>
If the selection  <xref to="fel-key-kill"></xref> is included 
the evaluator will examine the TOE’s keychain in the TSS and identify each instance when a 
key is destroyed by this method.
In each instance the evaluator will verify all keys capable of decrypting the target key are 
destroyed in accordance with a specified key destruction method in FCS_CKM_EXT.4.1.
The evaluator will verify that all of the keys capable of decrypting the target key are not
able to be derived to reestablish the keychain after their destruction. 	      
	        </h:p></TSS>
              <Guidance><h:p>
There are a variety of concerns that may prevent or delay key destruction in some cases. The evaluator will check that the guidance documentation identifies configurations or circumstances that may not strictly conform to the key destruction requirement, and that this description is consistent with the relevant parts of the TSS and any other relevant Required Supplementary Information. The evaluator will check that the guidance documentation provides guidance on situations where key destruction may be delayed at the physical layer and how such situations can be avoided or mitigated if possible.
	      <h:p/>
Some examples of what is expected to be in the documentation are provided here.
	      <h:p/>
When the TOE does not have full access to the physical memory, it is possible that the storage may be implementing wear-leveling and garbage collection. This may create additional copies of the key that are logically inaccessible but persist physically. In this case, to mitigate this the drive should support the TRIM command and implements garbage collection to destroy these persistent copies when not actively engaged in other tasks.
	      <h:p/>
Drive vendors implement garbage collection in a variety of different ways, as such there is a variable amount of time until data is truly removed from these solutions. There is a risk that data may persist for a longer amount of time if it is contained in a block with other data not ready for erasure. To reduce this risk, the operating system and file system of the OE should support TRIM, instructing the non-volatile memory to erase copies via garbage collection upon their deletion. If a RAID array is being used, only set-ups that support TRIM are utilized. If the drive is connected via PCI-Express, the operating system supports TRIM over that channel.
	      <h:p/>
The drive should be healthy and contains minimal corrupted data and should be end-of-lifed before a significant amount of damage to drive health occurs, this minimizes the risk that small amounts of potentially recoverable data may remain in damaged areas of the drive.
	      </h:p></Guidance>
              <Tests>
                <testlist>
                  <test>Applied to each key held as in volatile memory and subject to destruction by overwrite by the TOE (whether or not the value is subsequently encrypted for storage in volatile or non-volatile memory). In the case where the only selection made for the destruction method key was removal of power, then this test is unnecessary. The evaluator will:
		  <h:ol><h:li>Record the value of the key in the TOE subject to clearing.</h:li><h:li>Cause the TOE to perform a normal cryptographic processing with the key from Step #1.</h:li><h:li>Cause the TOE to clear the key.</h:li><h:li>Cause the TOE to stop the execution but not exit.</h:li><h:li>Cause the TOE to dump the entire memory of the TOE into a binary file.</h:li><h:li>Search the content of the binary file created in Step #5 for instances of the known key value from Step #1.</h:li></h:ol><h:p>
Steps 1-6 ensure that the complete key does not exist anywhere in volatile memory. If a copy is found, then the test fails.
		  </h:p></test>
                  <test>Applied to each key help in non-volatile memory and subject to destruction by the TOE. The evaluator will use special tools (as needed), provided by the TOE developer if necessary, to ensure the tests function as intended.
<h:ol><h:li>Identify the purpose of the key and what access should fail when it is deleted. (e.g. the data encryption key being deleted would cause data decryption to fail.)</h:li><h:li>Cause the TOE to clear the key.</h:li><h:li>Have the TOE attempt the functionality that the cleared key would be necessary for.</h:li></h:ol><h:p>
  The test succeeds if step 3 fails.
</h:p></test>
                  <test><h:p>
Tests 3 and 4 do not apply for the selection 
<h:i>instructing the underlying platform to destroy the representation of the key</h:i>
as the TOE has no visibility into the inner workings and completely relies on the underlying platform.
  <h:p/>
The following tests are used to determine if the TOE is able to request the platform to overwrite the key with a TOE supplied pattern.
  <h:p/>

Applied to each key held in non-volatile memory and subject to destruction by overwrite by the TOE. The evaluator will use a tool that provides a logical view of the media (e.g., MBR file system):
<h:ol><h:li>Record the value of the key in the TOE subject to clearing.</h:li><h:li>Cause the TOE to perform a normal cryptographic processing with the key from Step #1.</h:li><h:li>Cause the TOE to clear the key.</h:li><h:li>Search the logical view that the key was stored in for instances of the known key value from Step #1. If a copy is found, then the test fails.</h:li></h:ol></h:p></test>
                  <test> Applied to each key held as non-volatile memory and subject to destruction by overwrite by the TOE. The evaluator will use a tool that provides a logical view of the media:
<h:ol><h:li>Record the logical storage location of the key in the TOE subject to clearing.</h:li><h:li>Cause the TOE to perform a normal cryptographic processing with the key from Step #1.</h:li><h:li>Cause the TOE to clear the key.</h:li><h:li>Read the logical storage location in Step #1 of non-volatile memory to ensure the appropriate pattern is utilized.</h:li></h:ol><h:p>
  The test succeeds if correct pattern is used to overwrite the key in the memory location. If the pattern is not found the test fails.
</h:p></test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FCS_COP.1/ENCRYPT Cryptographic Operation - Encryption/Decryption (Refined)-->
        <f-component cc-id="fcs_cop.1" id="fcs-cop-1-encrypt" name="Cryptographic Operation - Encryption/Decryption (Refined)" iteration="ENCRYPT">
          <f-element id="fel-encrypt-how">
            <title>The <h:b>OS</h:b>  shall perform [ <h:i>encryption/decryption services for data</h:i>  ] in accordance with a specified cryptographic algorithm  <h:b><selectables ><selectable id="s-aes-xts" > <snip>AES-XTS</snip> (as defined in NIST SP 800-38E)</selectable><selectable id="s-aes-cbc" > <snip>AES-CBC</snip> (as defined in NIST SP 800-38A)</selectable><selectable id="s-aes-ctr" > <snip>AES-CTR</snip> (as defined in NIST SP 800-38A)</selectable></selectables>
	      and
	      <selectables ><selectable id="s-aes-kw" >AES Key Wrap (KW) (as defined in NIST SP 800-38F)</selectable><selectable id="s-aes-kwp" >AES Key Wrap with Padding (KWP) (as defined in NIST SP 800-38F)</selectable><selectable id="s-aes-ccmp" > <snip>AES-CCMP-256</snip> (as defined in NIST SP 800-38C and IEEE 802.11ac-2013)</selectable><selectable id="s-aes-gcmp" > <snip>AES-GCMP-256</snip> (as defined in NIST SP 800-38D and IEEE 802.11ac-2013)</selectable><selectable id="fcs_cop.1.1_ENCRYPT_1" exclusive="yes">no other modes</selectable></selectables>and cryptographic key sizes 256-bit. <h:strike>that meet the following: [assignment: list of standards]</h:strike>  .</title>
            <note role="application"><h:p>
              AES CCMP (which uses AES in CCM as specified in SP 800-38C) becomes mandatory and must
              be selected if the ST includes the  <xref to="mod-wlanclient"></xref>.
	      <h:p/>
	        For the second selection, the ST author should choose the mode
		or modes in which AES operates. For the third selection, the ST author should choose
		the key sizes that are supported by this functionality.
	      </h:p></note>
            <aactivity level="element">
              <Guidance>
		The evaluator will verify that the AGD documents contains instructions required
		to configure the OS to use the required modes and key sizes.
	      </Guidance>
              <Tests>
                <h:p>
	      The evaluator will execute all instructions as specified to configure the OS
	      to the appropriate state.
	      The evaluator will perform all of the following tests for each
              algorithm implemented by the OS and used to satisfy the requirements of this PP:
	      </h:p>
                <testlist>
                  <test>
                    <depends on="s-aes-xts"/>
                    <h:p><h:b>XTS-AES Test</h:b><h:p/>
		The evaluator will test the encrypt functionality of XTS-AES for each combination of the
              following input parameter lengths:
              <h:ul><h:li>512 bit (for AES-256) key</h:li><h:li>Three data unit (i.e., plaintext) lengths. One of the data unit lengths will be a nonzero
                  integer multiple of 256 bits, if supported. One of the data unit lengths will be an
                  integer multiple of 256 bits, if supported. The third data unit length will be either the
                  longest supported data unit length or 216 bits, whichever is smaller.
                </h:li></h:ul>
              using a set of 100 (key, plaintext and 256-bit random tweak value) 3-tuples and obtain the
              ciphertext that results from XTS-AES encrypt.
	      <h:p/>
		The evaluator may supply a data unit sequence number instead of the tweak value if the
		implementation supports it. The data unit sequence number is a base-10 number ranging
		between 0 and 255 that implementations convert to a tweak value internally.
	      <h:p/>
		The evaluator will test the decrypt functionality of XTS-AES using the same test as for
		encrypt, replacing plaintext values with ciphertext values and XTS-AES encrypt with XTSAES
              decrypt.
	      </h:p>
                  </test>
                </testlist>
                <testlist>
                  <test>
                    <depends on="s-aes-cbc"/>
                    <h:p><h:b>AES-CBC Known Answer Tests</h:b><h:p/>
		There are four Known Answer Tests (KATs), described below. In all KATs, the
              plaintext, ciphertext, and IV values will be 256-bit blocks. The results from each
              test may either be obtained by the evaluator directly or by supplying the inputs to
              the implementer and receiving the results in response. To determine correctness, the
              evaluator will compare the resulting values to those obtained by submitting the same
              inputs to a known good implementation.
	      
	      To test the decrypt functionality of AES-CBC, the evaluator will perform the
              same test as for encrypt, using ciphertext values of the same form as the plaintext in
              the encrypt test as input and AES-CBC decryption.
	      </h:p><h:b>AES-CBC Multi-Block Message Test</h:b><h:p>
              The evaluator will test the encrypt functionality by encrypting an i-block
              message where 1 &lt; i ≤ 10. The evaluator will choose a key, an IV and plaintext
              message of length i blocks and encrypt the message, using the mode to be tested, with
              the chosen key and IV. The ciphertext will be compared to the result of encrypting
              the same plaintext message with the same key and IV using a known good implementation.
              The evaluator will also test the decrypt functionality for each mode by decrypting an
              i-block message where 1 &lt; i ≤10. The evaluator will choose a key, an IV and a
              ciphertext message of length i blocks and decrypt the message, using the mode to be
              tested, with the chosen key and IV. The plaintext will be compared to the result of
              decrypting the same ciphertext message with the same key and IV using a known good
              implementation.
	    <h:p/><h:b>AES-CBC Monte Carlo Tests</h:b><h:p/>
	      The evaluator will test the encrypt
              functionality using a set of 100 plaintext, IV, and key 3-tuples.
	      The keys, plaintext, and IV values are each 256-bits.
	      For each 3-tuple, 1000 iterations will be run as follows:
              <h:pre>
              # Input: PT, IV, Key
              for i = 1 to 1000:
                if i == 1:
                      CT[1] = AES-CBC-Encrypt(Key, IV, PT)
                      PT = IV
                else:
                  CT[i] = AES-CBC-Encrypt(Key, PT)
                  PT = CT[i-1]
              </h:pre>The
              ciphertext computed in the 1000th iteration (i.e., CT[1000]) is the result for that
              trial. This result will be compared to the result of running 1000 iterations with the
              same values using a known good implementation.
	    <h:p/>
	      The evaluator will test the
              decrypt functionality using the same test as for encrypt, exchanging CT and PT and
              replacing AES-CBC-Encrypt with AES-CBC-Decrypt.
	    </h:p>
                  </test>
                </testlist>
                <testlist>
                  <test>
                    <depends on="s-aes-ctr"/>
                    <h:b>AES-CTR Test</h:b><h:p><h:b>Known Answer Tests (KATs)</h:b><h:p/>
There are four Known Answer Tests (KATs) described below.
For all KATs, the plaintext, initialization vector (IV), and ciphertext values shall be 256-bit blocks.
The results from each test may either be obtained by the validator directly or by supplying the inputs to the implementer and receiving the results in response.
To determine correctness, the evaluator will compare the resulting values to those obtained by submitting the same inputs to a known good implementation.
	      <h:p/><h:p/><h:b>Multi-Block Message Test</h:b><h:p/>The evaluator will test the encrypt functionality by encrypting an i-block message where 1 less-than i less-than-or-equal to 10.
For each i the evaluator will choose a key, IV, and plaintext message of length i blocks and encrypt the message, using the mode to be tested, with the chosen key.
The ciphertext shall be compared to the result of encrypting the same plaintext message with the same key and IV using a known good implementation.
The evaluator will also test the decrypt functionality by decrypting an i-block message where 1 less-than i less-than-or-equal to 10.
For each i the evaluator will choose a key and a ciphertext message of length i blocks and decrypt the message, using the mode to be tested, with the chosen key.
The plaintext shall be compared to the result of decrypting the same ciphertext message with the same key using a known good implementation.<h:p/><h:b>Monte-Carlo Test</h:b><h:p/>For AES-CTR mode perform the Monte Carlo Test for ECB Mode on the encryption engine of the counter mode implementation. There is no need to test the decryption engine.
	      <h:p/>
		The evaluator will test the encrypt functionality using 100 plaintext/key pairs.
		Each key shall be 256-bit.
		The plaintext values shall be 256-bit blocks.
		For each pair, 1000 iterations shall be run as follows:
	      </h:p>
	      For AES-ECB mode<h:pre>
# Input: PT, Key

for i = 1 to 1000:
CT[i] = AES-ECB-Encrypt(Key, PT)
PT = CT[i]
</h:pre><h:p>The ciphertext computed in the 1000th iteration is the result for that trial.
This result shall be compared to the result of running 1000 iterations with the same values using a known good implementation.
</h:p>
                  </test>
                </testlist>
                <testlist>
                  <test>
                    <depends on="s-aes-kw"/>
                    <h:p><h:b>AES Key Wrap (AES-KW) and Key Wrap with Padding (AES-KWP) Test</h:b><h:p/>
		The evaluator will test the authenticated encryption functionality of AES-KW for EACH
		combination of the following input parameter lengths:
              <h:ul><h:li>256 bit key encryption keys (KEKs)</h:li><h:li>Three plaintext lengths.
		One of the plaintext lengths will be two semi-blocks (256 bits).
		One of the plaintext lengths will be three semi-blocks (192 bits).
		The third data unit length will be the longest supported plaintext
		length less than or equal to 64 semi-blocks (4096 bits).
                </h:li></h:ul>
              using a set of 100 key and plaintext pairs and obtain the ciphertext that results from AES-KW
              authenticated encryption. To determine correctness, the evaluator will use the AES-KW
              authenticated-encryption function of a known good implementation.
	      <h:p/>

              The evaluator will test the authenticated-decryption functionality of AES-KW using the
              same test as for authenticated-encryption, replacing plaintext values with ciphertext values
              and AES-KW authenticated-encryption with AES-KW authenticated-decryption.
	      </h:p>
                  </test>
                </testlist>
                <testlist>
                  <test>
                    <depends on="s-aes-kwp"/>
                    <h:p>
              The evaluator will test the authenticated-encryption functionality of AES-KWP using the
              same test as for AES-KW authenticated-encryption with the following change in the three
              plaintext lengths:
              <h:ul><h:li>One plaintext length will be one octet. One plaintext length will be 20 octets (160
                  bits).</h:li><h:li>
                  One plaintext length will be the longest supported plaintext length less than or equal
                  to 512 octets (4096 bits).
                </h:li></h:ul>
              The evaluator will test the authenticated-decryption functionality of AES-KWP using the
              same test as for AES-KWP authenticated-encryption, replacing plaintext values with
              ciphertext values and AES-KWP authenticated-encryption with AES-KWP authenticated-decryption.
              </h:p>
                  </test>
                </testlist>
                <testlist>
                  <test>
                    <depends on="s-aes-ccmp"/>
                    <h:p><h:b>AES-CCM Tests</h:b><h:p/>
              The evaluator will test the generation-encryption and decryption-verification
              functionality of AES-CCM for the following input parameter and tag lengths: <h:ul><h:li>256 bit key</h:li><h:li>Two payload lengths. One payload length will be the shortest supported payload
                  length, greater than or equal to zero bytes. The other payload length will be the
                  longest supported payload length, less than or equal to 32 bytes (256 bits).
                </h:li><h:li>Two or three associated data lengths. One associated data length will be 0, if
                  supported. One associated data length will be the shortest supported payload length,
                  greater than or equal to zero bytes. One associated data length will be the longest
                  supported payload length, less than or equal to 32 bytes (256 bits). If the
                  implementation supports an associated data length of 2
                  16 bytes, an associated data length of 216 bytes will be tested.
                </h:li><h:li>Nonce lengths.
		The evaluator will test all nonce lengths between 7 and 13 bytes, inclusive, that are supported by the OS.
                </h:li><h:li>Tag lengths.
		The evaluator will test all of the following tag length values that are supported by the OS: 4, 6, 8, 10, 12, 14 and 16 bytes.
                </h:li></h:ul>
              To test the generation-encryption functionality of AES-CCM, the evaluator will perform the
              following four tests:
	      <h:p/>
              To determine correctness in each of the above tests, the evaluator will compare the
              ciphertext with the result of generation-encryption of the same inputs with a known good
              implementation.
	      <h:p/>
              To test the decryption-verification functionality of AES-CCM, for EACH combination of
              supported associated data length, payload length, nonce length and tag length, the evaluator
              will supply a key value and 15 nonce, associated data and ciphertext 3-tuples and obtain
              either a FAIL result or a PASS result with the decrypted payload. The evaluator will supply
              10 tuples that should FAIL and 5 that should PASS per set of 15.
	      <h:p/>
              Additionally, the evaluator will use tests from the IEEE 802.11-02/362r6 document
              "Proposed Test vectors for IEEE 802.11 TGi", dated September 10, 2002, Section 2.1 AESCCMP
              Encapsulation Example and Section 2.2 Additional AES CCMP Test Vectors to
              further verify the IEEE 802.11-2007 implementation of AES-CCMP.
	      </h:p>
                  </test>
                </testlist>
                <testlist>
                  <test>
                    <depends on="s-aes-gcmp"/>
                    <h:p><h:b>AES-GCMP Test</h:b><h:p/>The evaluator will test the authenticated encrypt functionality of AES-GCM for each
                combination of the following input parameter lengths: <h:ul><h:li> 256 bit keys</h:li><h:li>Two plaintext lengths. One of the plaintext lengths will be a non-zero integer
                  multiple of 256 bits, if supported. The other plaintext length will not be an integer
                  multiple of 256 bits, if supported.
                </h:li><h:li>Three AAD lengths. One AAD length will be 0, if supported. One AAD length will
                  be a non-zero integer multiple of 256 bits, if supported. One AAD length will not be
                  an integer multiple of 256 bits, if supported.
                </h:li><h:li>Two IV lengths. If 96 bit IV is supported, 96 bits will be one of the two IV lengths
                  tested.
                </h:li></h:ul>
              The evaluator will test the encrypt functionality using a set of 10 key, plaintext, AAD, and
              IV tuples for each combination of parameter lengths above and obtain the ciphertext value
              and tag that results from AES-GCM authenticated encrypt. Each supported tag length will be
              tested at least once per set of 10. The IV value may be supplied by the evaluator or the
              implementation being tested, as long as it is known.
	      <h:p/>
              The evaluator will test the decrypt functionality using a set of 10 key, ciphertext, tag, AAD,
              and IV 5-tuples for each combination of parameter lengths above and obtain a Pass/Fail result
              on authentication and the decrypted plaintext if Pass. The set will include five tuples that
              Pass and five that Fail.
	      <h:p/>
              The results from each test may either be obtained by the evaluator directly or by supplying
              the inputs to the implementer and receiving the results in response. To determine correctness,
              the evaluator will compare the resulting values to those obtained by submitting the same
              inputs to a known good implementation.
	      </h:p><h:b>AES-GCMP Monte Carlo Tests</h:b><h:p>
              The evaluator will test the authenticated encrypt functionality of AES-GCM for
              each combination of the following input parameter lengths: <h:ul><h:li>256 bit keys</h:li><h:li>Two plaintext lengths. One of the plaintext lengths will be a non-zero integer
                  multiple of 256 bits, if supported. The other plaintext length will not be an
                  integer multiple of 256 bits, if supported.</h:li><h:li>Three AAD lengths. One AAD length will be 0, if supported. One AAD length will
                  be a non-zero integer multiple of 256 bits, if supported. One AAD length will not
                  be an integer multiple of 256 bits, if supported.</h:li><h:li>Two IV lengths. If 96 bit IV is supported, 96 bits will be one of the two IV
                  lengths tested.</h:li></h:ul>The evaluator will test the encrypt functionality using a set of 10 key,
              plaintext, AAD, and IV tuples for each combination of parameter lengths above and
              obtain the ciphertext value and tag that results from AES-GCM authenticated encrypt.
              Each supported tag length will be tested at least once per set of 10. The IV value
              may be supplied by the evaluator or the implementation being tested, as long as it is
              known.
	    <h:p/>


	      The evaluator will test the decrypt functionality using a set of 10 key,
              ciphertext, tag, AAD, and IV 5-tuples for each combination of parameter lengths above
              and obtain a Pass/Fail result on authentication and the decrypted plaintext if Pass.
              The set will include five tuples that Pass and five that Fail.
	    <h:p/>
	      The results from
              each test may either be obtained by the evaluator directly or by supplying the inputs
              to the implementer and receiving the results in response. To determine correctness,
              the evaluator will compare the resulting values to those obtained by submitting the
              same inputs to a known good implementation.
	      </h:p>
                  </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FCS_COP.1/HASH Cryptographic Operation - Hashing (Refined)-->
        <f-component cc-id="fcs_cop.1" id="fcs-cop-1-hash" name="Cryptographic Operation - Hashing (Refined)" iteration="HASH">
          <f-element id="fel-hash-how">
            <title>The <h:b>OS</h:b>  shall perform [ <h:i>cryptographic hashing services</h:i>  ] in accordance with a specified cryptographic algorithm  <h:b><selectables ><selectable id="fcs_cop.1.1_HASH_1" >SHA-256</selectable><selectable id="fcs_cop.1.1_HASH_2" >SHA-384</selectable><selectable id="fcs_cop.1.1_HASH_3" >SHA-512</selectable></selectables>
			  and message digest sizes
              <selectables ><selectable id="fcs_cop.1.1_HASH_4" >160 bits</selectable><selectable id="fcs_cop.1.1_HASH_5" >256 bits</selectable><selectable id="fcs_cop.1.1_HASH_6" >384 bits</selectable><selectable id="fcs_cop.1.1_HASH_7" >512 bits</selectable></selectables>that meet the following: [ <h:i>FIPS Pub 180-4</h:i>  ].</title>
            <note role="application"><h:p>
	      The intent of this requirement is to specify the hashing function.
	      The hash selection must support the message digest
              size selection.
	      The hash selection should be consistent with the overall strength of
              the algorithm used.
	      </h:p></note>
            <aactivity level="element">
              <Tests><h:p>
	      The evaluator will check that the association of the hash function with
              other application cryptographic functions (for example, the digital signature
              verification function) is documented in the TSS.
	      <h:p/>
		The TSF
              hashing functions can be implemented in one of two modes. The first mode is the
              byte-oriented mode. In this mode the TSF only hashes messages that
              are an integral number of bytes in length; i.e., the length (in bits) of the message
              to be hashed is divisible by 8. The second mode is the bit-oriented mode. In this mode
              the TSF hashes messages of arbitrary length. As there are different
              tests for each mode, an indication is given in the following sections for the
              bit-oriented vs. the byte-oriented test MACs. The evaluator will perform all of the
              following tests for each hash algorithm implemented by the TSF and
              used to satisfy the requirements of this PP.
	      <h:p/>
		The following tests require the
		developer to provide access to a test application that provides the evaluator with
		tools that are typically not found in the production application.</h:p></Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FCS_COP.1/KEYHMAC Cryptographic Operation - Keyed-Hash Message Authentication (Refined)-->
        <f-component cc-id="fcs_cop.1" id="fcs-cop-1-keyhmac" name="Cryptographic Operation - Keyed-Hash Message Authentication (Refined)" iteration="KEYHMAC">
          <f-element id="fel-keyed-hash-how">
            <title>The <h:b>OS</h:b>  shall perform [ <h:i>keyed-hash message authentication services</h:i>  ] in accordance with a specified cryptographic algorithm  <h:b><selectables ><selectable id="fcs_cop.1.1_KEYHMAC_1" >SHA-256</selectable><selectable id="fcs_cop.1.1_KEYHMAC_2" >SHA-384</selectable><selectable id="fcs_cop.1.1_KEYHMAC_3" >SHA-512</selectable></selectables>
              with key sizes <assignable>key size (in bits) used in HMAC</assignable>
              and message digest</h:b>  sizes<selectables ><selectable id="fcs_cop.1.1_KEYHMAC_5" >160 bits</selectable><selectable id="fcs_cop.1.1_KEYHMAC_6" >256 bits</selectable><selectable id="fcs_cop.1.1_KEYHMAC_7" >384 bits</selectable><selectable id="fcs_cop.1.1_KEYHMAC_8" >512 bits</selectable></selectables>that meet the following: [ <h:i>FIPS Pub 198-1 The Keyed-Hash Message
                Authentication Code and FIPS Pub 180-4 Secure Hash Standard</h:i>  ].</title>
            <note role="application"><h:p>
	      The intent of this requirement is to specify the keyed-hash
	      message authentication function used for key establishment purposes for the various
	      cryptographic protocols used by the OS (e.g., trusted channel).
	      The hash selection must support the message digest size selection.
	      The hash selection should be consistent with the overall strength of the
	      algorithm used for FCS_COP.1/HASH.
	      </h:p></note>
            <aactivity level="element">
              <Tests><h:p>

		The evaluator will perform the following activities based on the selections
              in the ST.
	      <h:p/>
	      For each of the supported parameter sets, the
              evaluator will compose 15 sets of test data.
	      Each set consists of a key and message data.
	      The evaluator will have the OS generate HMAC tags for these sets of test data.
	      The resulting MAC tags will be compared against the result of generating HMAC
              tags with the same key using a known-good implementation.
	    </h:p></Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FCS_COP.1/SIGN Cryptographic Operation - Signing (Refined)-->
        <f-component cc-id="fcs_cop.1" id="fcs-cop-1-sign" name="Cryptographic Operation - Signing (Refined)" iteration="SIGN">
          <f-element id="fel-sign-how">
            <title>The <h:b>OS</h:b>  shall perform [ <h:i>cryptographic signature services (generation and
              verification)</h:i>  ] in accordance with a specified cryptographic algorithm  <h:b><selectables ><selectable id="s-rsa-certs" >RSA schemes using cryptographic key sizes of 2048-bit or greater
                  that meet the following: FIPS PUB 186-4, "Digital Signature Standard (DSS)",  Section 4</selectable><selectable> <snip>ECDSA schemes</snip> using "NIST curves" P-384 and <selectables ><selectable id="fcs_cop.1.1_SIGN_1" >P-521</selectable><selectable id="fcs_cop.1.1_SIGN_2" exclusive="yes">no other curves</selectable></selectables> that meet the following: FIPS PUB 186-4, "Digital Signature Standard (DSS)", Section 5</selectable></selectables><h:strike>and cryptographic key sizes [assignment: cryptographic algorithm]
                that meet the following: [assignment: list of standards]</h:strike>  .</title>
            <note role="application"> The ST Author should choose the algorithm implemented to
              perform digital signatures; if more than one algorithm is available, this requirement
              should be iterated to specify the functionality. For the algorithm chosen, the ST
              author should make the appropriate assignments/selections to specify the parameters
              that are implemented for that algorithm.
            </note>
            <aactivity level="element">
              <Tests>
                <h:p>
		The following tests require the developer to
		provide access to a test application that provides the evaluator with tools that are
		typically not found in the production application.
	      </h:p>
                <testlist>
                  <test><h:p><h:b>ECDSA Algorithm Tests</h:b><h:p/></h:p></test>
                </testlist>
                <testlist>
                  <test>
                    <depends on="s-rsa-certs"/>
                    <h:p><h:b>RSA Signature Algorithm Tests </h:b><h:p/></h:p>
                  </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FCS_RBG_EXT.1 Random Bit Generation-->
        <f-component cc-id="fcs_rbg_ext.1" id="fcs-rbg-ext-1" name="Random Bit Generation">
          <f-element id="fel-rbg-how">
            <title>The OS shall perform all deterministic random bit generation (DRBG) services in accordance with NIST Special Publication 800-90A using<selectables ><selectable id="fcs_rbg_ext.1.1_1" >Hash_DRBG (any)</selectable><selectable id="fcs_rbg_ext.1.1_2" >HMAC_DRBG (any)</selectable><selectable id="fcs_rbg_ext.1.1_3" >CTR_DRBG (AES)</selectable></selectables>.</title>
            <note role="application">
NIST SP 800-90A contains three different methods of generating random numbers;
each of these, in turn, depends on underlying cryptographic primitives (hash functions/ciphers).
The ST author will select the function used and include the specific underlying cryptographic primitives used in the requirement or in the TSS.
While any of the identified hash functions (SHA-224, SHA-256, SHA-384, SHA-512) are allowed for Hash_DRBG or HMAC_DRBG,
only AES-based implementations for CTR_DRBG are allowed.
            </note>
            <aactivity level="element">
              <Tests><h:p>
	      The evaluator will perform the following tests:
	      <h:p/>
              The evaluator will perform 15 trials for the RNG implementation. If the RNG
              is configurable, the evaluator will perform 15 trials for each configuration. The
              evaluator will also confirm that the operational guidance contains appropriate
              instructions for configuring the RNG functionality.
	      <h:p/>
	      If the RNG has  prediction resistance enabled, each trial consists of (1) instantiate DRBG, (2)
              generate the first block of random bits (3) generate a second block of random bits
              (4) uninstantiate. The evaluator verifies that the second block of random bits is
              the expected value. The evaluator will generate eight input values for each
              trial. The first is a count (0 – 14). The next three are entropy input, nonce, and
              personalization string for the instantiate operation. The next two are additional
              input and entropy input for the first call to generate. The final two are
              additional input and entropy input for the second call to generate. These values
              are randomly generated. "generate one block of random bits" means to generate
              random bits with number of returned bits equal to the Output Block Length (as
              defined in NIST SP 800-90A).
	      <h:p/>
	      If the RNG does not have prediction resistance,
              each trial consists of (1) instantiate DRBG, (2) generate the first block of
              random bits (3) reseed, (4) generate a second block of random bits (5)
              uninstantiate. The evaluator verifies that the second block of random bits is the
              expected value. The evaluator will generate eight input values for each trial.
              The first is a count (0 – 14). The next three are entropy input, nonce, and
              personalization string for the instantiate operation. The fifth value is
              additional input to the first call to generate. The sixth and seventh are
              additional input and entropy input to the call to reseed. The final value is
              additional input to the second generate call.
	      <h:p/>
	      The following list contains more information on some of the input values to be generated/selected by the evaluator.
	      <h:ul><h:li><h:b>Entropy input:</h:b> The length of the entropy input value must equal the seed
                  length.</h:li><h:li><h:b>Nonce:</h:b> If a nonce is supported (CTR_DRBG with no Derivation Function does
                  not use a nonce), the nonce bit length is one-half the seed length. </h:li><h:li><h:b>Personalization string:</h:b> The length of the personalization string must be
                  less than or equal to seed length. If the implementation only supports one
                  personalization string length, then the same length can be used for both values.
                  If more than one string length is support, the evaluator will use personalization
                  strings of two different lengths. If the implementation does not use a
                  personalization string, no value needs to be supplied. </h:li><h:li><h:b>Additional input:</h:b> The additional input bit lengths have the same defaults
                  and restrictions as the personalization string lengths.</h:li></h:ul></h:p></Tests>
            </aactivity>
          </f-element>
          <f-element id="fel-rbg-seed-how">
            <title>The deterministic RBG used by the OS shall be seeded by an entropy source that accumulates entropy from a<selectables ><selectable id="fcs_rbg_ext.1.2_1" >software-based noise source</selectable><selectable id="fcs_rbg_ext.1.2_2" >platform-based noise source</selectable></selectables>with a minimum of 256 bitsof entropy at least equal to the greatest security strength (according to NIST SP 800-57) of the keys and hashes that it will generate.</title>
            <note role="application"><h:p>
		For the first
		selection in this requirement, the ST author selects 'software-based noise source' if
		any additional noise sources are used as input to the DRBG.
	      <h:p/>
	      In the second selection in this requirement, the ST author selects the
              appropriate number of bits of entropy that corresponds to the greatest security
              strength of the algorithms included in the ST.
	      Security strength is defined in Tables
              2 and 3 of NIST SP 800-57A.
	      For example, if the implementation includes 3072-bit RSA
              (security strength of 128 bits), AES 256 (security strength 256 bits), and
              HMAC-SHA-256 (security strength 256 bits), then the ST author would select 256 bits.
	    </h:p></note>
            <aactivity level="element">
              <Tests><h:p>
		Documentation will be produced - and the evaluator will perform the
		activities - in accordance with  <xref to="entropyappendix"></xref> and
		the
		 <h:a href="https://www.niap-ccevs.org/Documents_and_Guidance/ccevs/Entropy%20Documentation%20and%20Assessment%20Clarification.pdf">Clarification to the Entropy Documentation and Assessment Annex</h:a>.
	      <h:p/>
              In the future, specific statistical testing (in line with NIST SP 800-90B) will
              be required to verify the entropy estimates.
	    </h:p></Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FCS_STO_EXT.1 Storage of Sensitive Data-->
        <f-component cc-id="fcs_sto_ext.1" id="fcs-sto-ext-1" name="Storage of Sensitive Data">
          <f-element id="fel-store-sdata">
            <title>The OS shall implement functionality to encrypt sensitive data stored in non-volatile storage and provide interfaces to applications to invoke this functionality.</title>
            <note role="application">Sensitive data will be identified in the TSS by the ST
	    author, and minimally includes credentials and keys.  The interface for invoking the
	    functionality could take a variety of forms: it could consist of an API,
	    or simply well-documented conventions for accessing credentials stored as files.
	    </note>
            <aactivity level="element">
              <TSS>The evaluator will check the TSS to ensure that it lists all persistent
              sensitive data for which the OS provides a storage capability.  For each of these
              items, the evaluator will confirm that the TSS lists for what purpose it can be used,
              and how it is stored.
	      The evaluator will confirm that cryptographic operations used to protect the data occur as specified in FCS_COP.1/ENCRYPT.</TSS>
              <Guidance>
		The evaluator will consult the developer documentation to verify that instructions
		exists on applications should securely store credentials.
	      </Guidance>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!--5.1.2 Class: User Data Protection (FDP)-->
      <section id="fdp" title="Class: User Data Protection (FDP)">
        <!--FDP_ACF_EXT.1 Access Controls for Protecting User Data-->
        <f-component cc-id="fdp_acf_ext.1" id="fdp-acf-ext-1" name="Access Controls for Protecting User Data">
          <f-element id="fel-protect-user-data">
            <title>The OS shall implement access controls which can prohibit unprivileged users from accessing files and directories owned by other users.</title>
            <note role="application">
	      Effective protection by access controls may also depend
	      upon system configuration.  This requirement is designed to ensure
	      that, for example, files and directories owned by one user in a multi user system
	      can be protected from access by another user in that system.
            </note>
            <aactivity level="element">
              <TSS><h:p>
	      The evaluator will confirm that the TSS comprehensively describes the access control policy enforced by the OS.
              The description must include the rules by which accesses to particular files and directories
	      are determined for particular users.
              The evaluator will inspect the TSS to ensure that it describes the access control rules
              in such detail that given any possible scenario between a user and a file governed by
              the OS the access control decision is unambiguous.
	      </h:p></TSS>
              <Tests><h:p>
              The evaluator will create two new standard user accounts on the system and conduct the following tests:
              </h:p></Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FDP_IFC_EXT.1 Information flow control-->
        <f-component cc-id="fdp_ifc_ext.1" id="fdp-ifc-ext-1" name="Information flow control" status="sel-based">
          <depends on="s-itc-ipsec"/>
          <depends>
            <optional/>
          </depends>
          <f-element id="fel-dit-vpn">
            <title>The OS shall<selectables ><selectable id="fdp_ifc_ext.1.1_1" >provide an interface which allows a VPN client to protect all IP traffic using IPsec</selectable><selectable id="s-provides-vpnclient" > <snip>provide a VPN client</snip> that can protect all IP traffic using IPsec</selectable></selectables>with the exception of IP traffic required to establish the VPN connection and<selectables ><selectable id="fdp_ifc_ext.1.1_2" >signed updates directly from the OS vendor</selectable><selectable id="fdp_ifc_ext.1.1_3" exclusive="yes">no other traffic</selectable></selectables>.</title>
            <note role="application"><h:p>
		Typically, the traffic required to establish the VPN connection is referred to as "Control Plane" traffic,
		whereas the IP traffic protected by the IPsec VPN is referred to as "Data Plane" traffic.
		All Data Plane traffic must flow through the VPN connection and the VPN must not split-tunnel.
	      <h:p/>
		  If no native IPsec client is validated or third-party VPN clients may
		  also implement the required Information Flow Control, the first
		  option must be selected. In these cases, the TOE provides an API to
		  third-party VPN clients that allows them to configure the TOE's
		  network stack to perform the required Information Flow Control.
	      <h:p/>
		If the TSF implements a native VPN client, then the ST author must select 
		 <xref to="s-provides-vpnclient"></xref> and includes the PP-Module for VPN Client
		as part of the ST.
		  <h:p/>
		  In the future, this requirement may also make a distinction between the
		  current requirement (which requires that when the IPsec trusted
		  channel is enabled, all traffic from the TSF is routed through that
		  channel) and having an option to force the establishment of an IPsec
		  trusted channel to allow any communication by the TSF.
	      </h:p></note>
            <aactivity level="element">
              <TSS>The evaluator will verify that the TSS section of the ST describes the
              routing of IP traffic when a VPN client is enabled.
	      The evaluator will ensure that the description indicates which traffic does not go
              through the VPN and which traffic does, and that a configuration exists for each
              in which only the traffic identified by the ST author as necessary
              for establishing the VPN connection (IKE traffic and perhaps HTTPS or DNS traffic) is
              not encapsulated by the VPN protocol (IPsec).</TSS>
              <Tests>
                
	      The evaluator will perform the following test:
	      
                <testlist>
	      The evaluator will perform the following test:
	      </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!--5.1.3 Class: Security Management (FMT)-->
      <section id="fmt" title="Class: Security Management (FMT)">
        <!--FMT_MOF_EXT.1 Management of security functions behavior-->
        <f-component cc-id="fmt_mof_ext.1" id="fmt-mof-ext-1" name="Management of security functions behavior">
          <f-element id="fel-man-sec-func">
            <title>The OS shall restrict the ability to perform the function indicated in the "Administrator" column into the administrator.</title>
            <note role="application">
        The functions with an "X" in the "Administrator" column must be restricted
        to (or overridden by) the administrator in the TOE.
	The functions with an "O" in the "Administrator" column may be restricted
        to (or overridden by) the administrator when implemented in the TOE at
        the discretion of the ST author.  For such functions, the ST author indicates this
        by replacing an "O" with an "X" in the ST.
	    </note>
            <aactivity level="element">
              <TSS><h:p>
		The evaluator will verify that the TSS describes those management functions
		that are restricted to Administrators, including how the user is prevented
		from performing those functions, or not able to use any interfaces that
		allow access to that function.
	      </h:p></TSS>
              <Tests>
                
		The evaluator will also perform the following test.
  	      
                <testlist>
                  
		The evaluator will also perform the following test.
  	      
                  <test>For each function that is indicated as restricted to the administrator,
              the evaluation will perform the function as an administrator, as specified in the
              Operational Guidance, and determine that it has the expected effect as outlined by
              the Operational Guidance and the SFR.  The evaluator will then perform the function
              (or otherwise attempt to access the function) as a non-administrator and observe
              that they are unable to invoke that functionality.
              </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FMT_SMF_EXT.1 Specification of Management Functions-->
        <f-component cc-id="fmt_smf_ext.1" id="fmt-smf-ext-1" name="Specification of Management Functions">
          <f-element id="fel-manage-functions">
            <title><!-- NOTE: There is currently no support for Management Function tables, so the following raw XML will be used in the XML Export --> <br/>
                        <title>
	      The OS shall be capable of performing the following management functions:
	      <h:br></h:br><management-function-set default="O"><manager cid="a">Administrator</manager><manager cid="u">User</manager><management-function><text>Enable/disable <selectables><selectable>screen lock</selectable><selectable>session timeout</selectable></selectables></text><m ref="a"></m></management-function><management-function><text>Configure <selectables><selectable>screen lock</selectable><selectable>session</selectable></selectables> inactivity timeout</text><m ref="a"></m></management-function><management-function><text>import keys/secrets into  the secure key storage</text></management-function><management-function><text>Configure local audit storage capacity</text></management-function><management-function><text>Configure minimum password length</text></management-function><management-function><text>Configure minimum number of special characters in password</text></management-function><management-function><text>Configure minimum number of numeric characters in password</text></management-function><management-function><text>Configure minimum number of uppercase characters in password</text></management-function><management-function><text>Configure minimum number of lowercase characters in password</text></management-function><management-function><text>
Configure lockout policy for unsuccessful authentication attempts through
                  <selectables><selectable>timeouts between attempts</selectable><selectable>limiting number of attempts during a time period</selectable></selectables></text></management-function><management-function><text>Configure host-based firewall</text></management-function><management-function><text>Configure name/address of directory server with which to bind</text></management-function><management-function><text>Configure name/address of remote management server from which to receive management settings</text></management-function><management-function><text>Configure name/address of audit/logging server to which to send audit/logging records</text></management-function><management-function><text>Configure audit rules</text></management-function><management-function><text>Configure name/address of network time server</text></management-function><management-function><text>Enable/disable automatic software update</text></management-function><management-function><text>Configure Wi-Fi interface</text></management-function><management-function><text>Enable/disable Bluetooth interface</text></management-function><management-function><text>Enable/disable <assignable> list of other external interfaces</assignable></text></management-function><management-function><text><assignable>list of other management functions to be provided by the TSF</assignable></text></management-function></management-function-set>
	      .
	    </title>  The OS shall be capable of performing the following management functions:  .</title>
            <note role="application"><h:p>
          The ST should indicate which of the optional management functions are implemented in the TOE.
          This can be done by copying the above table into the ST and adjusting the "Administrator"
          and "User" columns to "X" according to which capabilities are present or not present,
          and for which privilege level. The Application Note for FMT_MOF_EXT.1 explains
          how to indicate Administrator or User capability.
	      <h:p/>
          The terms "Administrator" and "User" are defined in the  <xref g="glossary"></xref>.
          The intent of this requirement is to ensure that the ST is populated with the
          relevant management functions that are provided by the OS.	      <h:p/>
Sophisticated account management policies, such as intricate password complexity requirements and handling of temporary accounts, are a function of directory servers.
The OS can enroll in such account management and enable the overall information system to achieve such policies by binding to a directory server.
	      </h:p></note>
            <aactivity level="element">
              <Guidance>
		The evaluator will verify that every management function captured in the ST is described in the operational guidance and that the description contains the information required to perform the management duties associated with the management function.
	      </Guidance>
              <Tests>
	      The evaluator will test the OS's ability to provide the management functions by configuring the operating system and testing each option selected from above.
	      The evaluator is expected to test these functions in all the ways in which the ST and guidance documentation state the configuration can be managed.
	      </Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!--5.1.4 Class: Protection of the TSF (FPT)-->
      <section id="fpt" title="Class: Protection of the TSF (FPT)">
        <!--FPT_ACF_EXT.1 Access controls-->
        <f-component cc-id="fpt_acf_ext.1" id="fpt-acf-ext-1" name="Access controls">
          <f-element id="fel-protect-priv">
            <title>The OS shall implement access controls which prohibit unprivileged users from modifying:  <h:ul><h:li>Kernel and its drivers/modules</h:li><h:li>Security audit logs</h:li><h:li>Shared libraries</h:li><h:li>System executables</h:li><h:li>System configuration files</h:li><h:li><assignable>other objects</assignable></h:li></h:ul>  .</title>
            <note role="application"/>
            <aactivity level="element">
              <TSS>The evaluator will confirm that the TSS specifies the locations of kernel drivers/modules, security
	      audit logs, shared libraries, system executables, and system configuration files.  Every
	      file does not need to be individually identified, but the system's conventions for storing and protecting
	      such files must be specified.</TSS>
              <Tests>
                
	      The evaluator will create an unprivileged user account.
	      Using this account, the evaluator will ensure that the following tests result in a negative
              outcome (i.e., the action results in the OS denying the evaluator permission to
              complete the action):
              
                <testlist>
                  
	      The evaluator will create an unprivileged user account.
	      Using this account, the evaluator will ensure that the following tests result in a negative
              outcome (i.e., the action results in the OS denying the evaluator permission to
              complete the action):
              
                  <test>The evaluator will attempt to modify all kernel drivers and modules.</test>
                  <test>The evaluator will attempt to modify all security audit logs generated by the logging subsystem.</test>
                  <test>The evaluator will attempt to modify all shared libraries that are used throughout the system.</test>
                  <test>The evaluator will attempt to modify all system executables.</test>
                  <test>The evaluator will attempt to modify all system configuration files.</test>
                  <test>The evaluator will attempt to modify any additional components selected.</test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
          <f-element id="fel-no-read">
            <title>The OS shall implement access controls which prohibit unprivileged users from reading:  <h:ul><h:li>Security audit logs</h:li><h:li>System-wide credential repositories</h:li><h:li><assignable>list of other objects</assignable></h:li></h:ul>  .</title>
            <note role="application">
	      "Credential repositories" refer, in this case, to structures containing cryptographic keys or passwords.
	    </note>
            <aactivity level="element">
              <Tests>
                
	      The evaluator will create an unprivileged user account.
	      Using this account, the evaluator will ensure that the following tests result in a negative
              outcome (i.e., the action results in the OS denying the evaluator permission to
              complete the action):
              
                <testlist>
                  
	      The evaluator will create an unprivileged user account.
	      Using this account, the evaluator will ensure that the following tests result in a negative
              outcome (i.e., the action results in the OS denying the evaluator permission to
              complete the action):
              
                  <test>The evaluator will attempt to read security audit logs generated by the auditing subsystem</test>
                  <test>The evaluator will attempt to read system-wide credential repositories</test>
                  <test>The evaluator will attempt to read any other object specified in the assignment</test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FPT_ASLR_EXT.1 Address Space Layout Randomization-->
        <f-component cc-id="fpt_aslr_ext.1" id="fpt-aslr-ext-1" name="Address Space Layout Randomization">
          <f-element id="fel-aslr">
            <title>The OS shall always randomize process address space memory locations with<selectables ><selectable id="fpt_aslr_ext.1.1_1" >8</selectable><selectable id="fpt_aslr_ext.1.1_3" >number greater than 8 </selectable></selectables>bits of entropy except for<assignable>list of explicit exceptions</assignable>.</title>
            <note role="application"/>
            <aactivity level="element">
              <Tests>
The evaluator will select 3 executables included with the TSF.
If the TSF includes a web browser it must be selected.
If the TSF includes a mail client it must be selected.
For each of these apps, the evaluator will launch the same executables on two separate instances of the
OS on identical hardware and compare all memory mapping locations.
The evaluator will ensure that no memory mappings are placed in the same location.
If the rare chance occurs that two mappings are the same for a single executable and
not the same for the other two, the evaluator will repeat the test with that executable to verify
that in the second test the mappings are different.
This test can also be completed on the same hardware and rebooting between application launches.
	      </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FPT_BLT_EXT.1 Limitation of Bluetooth Profile Support-->
        <f-component cc-id="fpt_blt_ext.1" id="fpt-blt-ext-1" name="Limitation of Bluetooth Profile Support" status="objective">
          <comp-lev> requires the TSF to maintain a disabled by default posture for Bluetooth profiles.</comp-lev>
          <management>There are no management activities foreseen.</management>
          <audit>There are no auditable events foreseen.</audit>
          <dependencies>No dependencies.</dependencies>
          <f-element id="fel-bluetooth-stop">
            <title>The TSF shall disable support for<assignable>list of Bluetooth profiles</assignable>Bluetooth profiles when they are not currently being used by an application on the TOE and shall require explicit user action to enable them.</title>
            <note role="application"><h:p>
		Some Bluetooth services incur more serious consequences if
		unauthorized remote devices gain access to them.
		Such services should be protected by measures like disabling support for
		the associated Bluetooth profile unless it is actively being used by an application on the OS
		(in order to prevent discovery by a Service Discovery Protocol search), and then requiring explicit user
		action to enable those profiles in order to use the services.
		It may be further appropriate to require additional user action before granting a remote device access
		to that service.
		<h:p/>
		  For example, it may be appropriate to disable the
		  OBEX Push Profile until a user  pushes a button in an application
		  indicating readiness to transfer an object.
		  After completion of the object transfer,
		  support for the OBEX profile should be suspended until the next time the user requests
		  its use.
		</h:p></note>
            <aactivity level="element">
              <TSS>The evaluator will ensure that the TSS lists all Bluetooth profiles that are
                disabled while not in use by an application and which need explicit user action in
                order to become enabled.</TSS>
              <Guidance>There are no guidance evaluation activities for this component.</Guidance>
              <Tests>
                The evaluator will perform the following tests:
	      
                <testlist>
                  The evaluator will perform the following tests:
	      
                  <test>
		  The evaluator will perform this test with a test device that does not have a trust relationship with the TOE.
		  While the service is not in active use by an application on the TOE, the
                  evaluator will attempt to discover a service associated with a "protected"
                  Bluetooth profile (as specified by the requirement) on the TOE via a Service
                  Discovery Protocol search.
		  The evaluator will verify that the service does not
                  appear in the Service Discovery Protocol search results.
		  Next, the evaluator shall attempt to gain remote access to the service from a device that does not
                  currently have a trusted device relationship with the TOE.
		  The evaluator will verify that this attempt fails due to the unavailability of the service and
                  profile.
		</test>
                  <test>The evaluator will repeat Test 1 with a device that currently has a trusted
                device relationship with the TOE and verify that the same behavior is exhibited.
                </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FPT_SBOP_EXT.1 Stack Buffer Overflow Protection-->
        <f-component cc-id="fpt_sbop_ext.1" id="fpt-sbop-ext-1" name="Stack Buffer Overflow Protection">
          <f-element id="fel-sbop">
            <title>The OS shall<selectables ><selectable id="fpt_sbop_ext.1.1_1" >employ stack-based buffer overflow protections</selectable><selectable id="fpt_sbop_ext.1.1_2" >not store parameters/variables in the same data structures as control flow values</selectable></selectables>.</title>
            <note role="application">
Many OSes store control flow values (i.e. return addresses) in stack data structures that also contain parameters and variables.
For these OSes, it is expected that most of the OS, to include the kernel, libraries, and application software from the OS vendor be compiled with stack-based buffer overflow protection enabled.
OSes that store parameters and variables separately from control flow values do not need additional stack protections.
            </note>
            <aactivity level="element">
              <Tests><h:p>For stack-based OSes, the evaluator will determine that the TSS contains a description of stack-based buffer overflow protections used by the OS.
These are referred to by a variety of terms, such as stack cookie, stack guard, and stack canaries.
The TSS must include a rationale for any binaries that are not protected in this manner.
The evaluator will also preform the following test:
            <h:p/>For OSes that store parameters/variables separately from control flow values, the evaluator will verify that the TSS describes what data structures control values, parameters, and variables are stored.
The evaluator will also ensure that the TSS includes a description of the safeguards that ensure parameters and variables do not intermix with control flow values.
</h:p></Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FPT_SRP_EXT.1 Software Restriction Policies-->
        <f-component cc-id="fpt_srp_ext.1" id="fpt-srp-ext-1" name="Software Restriction Policies" status="objective">
          <f-element id="fel-srp">
            <title>The OS shall restrict execution to only programs which match an administrator-specified<selectables ><selectable id="s-srp-path" >file path</selectable><selectable id="s-srp-signature" >file digital signature</selectable><selectable id="s-srp-version" >version</selectable><selectable id="s-srp-hash" >hash</selectable><selectable id="fpt_srp_ext.1.1_1" >other characteristics </selectable></selectables>.</title>
            <note role="application">
              The assignment permits implementations which provide a low
              level of granularity such as a volume.
	      The restriction is only against direct execution of
              executable programs.
	      It does not forbid interpreters which may take data as an input, even if
              this data can subsequently result in arbitrary computation.
            </note>
            <aactivity level="element">
              <TSS>The evaluator will ensure that the description of the supported characteristics in the TSS is consistent with the SFR.
		The evaluator will also ensure that any characteristics specified by the ST-author are described in sufficient detail to understand how to test those characteristics.</TSS>
              <Guidance>
		The evaluator will ensure that that the characteristics are described in sufficient detail for administrators to configure policies using them, and that the list of characteristics in the guidance is consistent with the information in the TSS.
	      </Guidance>
              <Tests>
                
		There are two tests for each selection above.
              
                <testlist>
                  
		There are two tests for each selection above.
              
                  <test>
                  The evaluator will configure the OS to only allow code execution from the core
                  OS directories. The evaluator will then attempt to execute code from a directory
                  that is in the allowed list. The evaluator will ensure that the code they
                  attempted to execute has been executed.
                </test>
                  <test>
                  The evaluator will configure the OS to only allow code execution from the core
                  OS directories. The evaluator will then attempt to execute code from a directory
                  that is not in the allowed list. The evaluator will ensure that the code they
                  attempted to execute has not been executed.
                </test>
                  <test>
                  The evaluator will configure the OS to only allow code that has been signed by
                  the OS vendor to execute. The evaluator will then attempt to execute code signed
                  by the OS vendor. The evaluator will ensure that the code they
                  attempted to execute has been executed.
                </test>
                  <test>
                  The evaluator will configure the OS to only allow code that has been signed by
                  the OS vendor to execute. The evaluator will then attempt to execute code signed
                  by another digital authority. The evaluator will ensure that the code they
                  attempted to execute has not been executed.
                </test>
                  <test>
                  The evaluator will configure the OS to allow execution of a specific
                  application based on version. The evaluator will then attempt to execute the same
                  version of the application. The evaluator will ensure that the code they attempted
                  to execute has been executed.
                </test>
                  <test>
                  The evaluator will configure the OS to allow execution of a specific
                  application based on version. The evaluator will then attempt to execute an older
                  version of the application. The evaluator will ensure that the code they attempted
                  to execute has not been executed.
                </test>
                  <test>
                  The evaluator will configure the OS to allow execution based on the hash of the application
                  executable. The evaluator will then attempt to execute
                  the application with the matching hash. The evaluator will
                  ensure that the code they attempted to execute has been executed.
                </test>
                  <test>
                  The evaluator will configure the OS to allow execution based on the hash of the application
                  executable. The evaluator will modify the
                  application in such a way that the application hash is changed. The evaluator
                  will then attempt to execute the application with the matching hash. The evaluator will
                  ensure that the code they attempted to execute has not been executed.
                </test>
                  <test>
		  The evaluator will attempt to run an application that should be allowed based on the defined software restriction policy and ensure that it runs.
		</test>
                  <test>
		  The evaluator will then attempt to run an application that should not be allowed the defined software restriction policy and ensure that it does not run.
		</test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FPT_TST_EXT.1 Boot Integrity-->
        <f-component cc-id="fpt_tst_ext.1" id="fpt-tst-ext-1" name="Boot Integrity">
          <f-element id="fel-boot">
            <title>The OS shall verify the integrity of the bootchain up through the OS kernel and<selectables ><selectable id="s-verify-all-code" >all executable code stored in mutable media</selectable><selectable id="fpt_tst_ext.1.1_2" >list of other executable code </selectable><selectable id="fpt_tst_ext.1.1_3" exclusive="yes">no other executable code</selectable></selectables>prior to its execution through the use of<selectables ><selectable id="fpt_tst_ext.1.1_4" >a digital signature using a hardware-protected asymmetric key</selectable><selectable id="s-boot-x509" >a digital signature using an X509 certificate with hardware-based protection</selectable><selectable id="fpt_tst_ext.1.1_5" >a hardware-protected hash</selectable></selectables>.</title>
            <note role="application"><h:p>
              The bootchain of the OS is the sequence of software, to include the OS loader, the kernel, system
              drivers or modules, and system files, which ultimately result in loading the OS.
	          The first part of the OS, usually referred to as the first-stage bootloader,
	          must be loaded by the platform.
	          Assessing its integrity, while critical, is the platform's responsibility; and therefore outside
	          the scope of this PP. 
		      All software loaded after this stage is potentially within the control of the OS and is in scope.
	      <h:p/>
              The verification may be transitive in nature:
	      a hardware-protected public key, X509 certificate or hash may be used to verify the mutable bootloader code
              which contains a key, certificate, or hash used by the bootloader to verify the mutable OS kernel code,
              which contains a key, certificate, or hash to verify the next layer of executable code, and so on.
	      However, the way in which the hardware stores and protects these keys is out of scope.
	      <h:p/>
              If all executable code (including bootloader(s), kernel, device drivers, pre-loaded applications, user-loaded
              applications, and libraries) is verified,  <xref to="s-verify-all-code"></xref> should
              be selected.
              <h:p/>
		If certificates are used, they can be hardware-protected trust store elements or leaf certificates in a certificate chain that terminates in a root CA which is an element of a hardware protected trust store.
		If the certificates themselves are not trust store elements, revocation information is expected to be available for each CA certificate in the chain that is not a trust element, in accordance to FIA_X509_EXT.1.
	      </h:p></note>
            <aactivity level="element">
              <TSS><h:p>
              The evaluator will verify that the TSS section of the ST includes a comprehensive description of the boot
              procedures, including a description of the entire bootchain, for the TSF.
              The evaluator will ensure that the OS cryptographically verifies each
	      piece of software it loads in the bootchain to include bootloaders and the kernel.
	      Software loaded for execution directly by the platform (e.g. first-stage bootloaders) is out of scope.
	      For each additional category of executable code verified before
              execution, the evaluator will verify that the description in the TSS describes how that
              software is cryptographically verified.
	      <h:p/>
              The evaluator will verify that the TSS contains a description of the
              protection afforded to the mechanism performing the cryptographic verification.
	      </h:p></TSS>
              <Tests><h:p>
              The evaluator will also perform the following tests:
              </h:p></Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FPT_TUD_EXT.1 Trusted Update-->
        <f-component cc-id="fpt_tud_ext.1" id="fpt-tud-ext-1" name="Trusted Update">
          <f-element id="fel-os-update">
            <title>The OS shall provide the ability to check for updates to the OS software itself and shall use a digital signature scheme specified in FCS_COP.1/SIGN to validate the authenticity of the response.</title>
            <note role="application">
				This requirement is about the ability to check for the availability of
			    authentic updates, while the installation of authentic updates is covered by
                 <xref to="fel-verify-updates"></xref>.
				Use of the digital signature scheme ensures that an attacker cannot influence the response, 
				regarding of whether updates are available.
			</note>
            <aactivity level="element">
              <Tests><h:p>The evaluator will check for an update using procedures described in the
              documentation and verify that the OS provides a list of available updates.
			  Testing this capability may require
			  installing and temporarily placing the system into a
			  configuration in conflict with secure configuration guidance
			  which specifies automatic update.
			  <h:p/>The evaluator is also to ensure that the response to this query is authentic by using a digital signature scheme specified in FCS_COP.1/SIGN. 
				The digital signature verification may be performed as part of a network protocol occurs over a trusted channel as described in FTP_ITC_EXT.1.)
				If the signature verification is not performed as part of a trusted channel, the evaluator will send a query response with a bad signature and verify that the signature verification fails.
				The evaluator will then send a query response with a good signature and verify that the signature verification is successful.</h:p></Tests>
            </aactivity>
          </f-element>
          <f-element id="fel-verify-updates">
            <title>The OS shall<selectables ><selectable id="fpt_tud_ext.1.2_1" >cryptographically verify</selectable><selectable id="fpt_tud_ext.1.2_2" >invoke platform-provided functionality to cryptographically verify</selectable></selectables>updates to itself using a digital signature prior to installation using schemes specified in FCS_COP.1/SIGN.</title>
            <note role="application">The intent of the requirement is to ensure that only digitally signed and verified TOE updates are applied to the TOE.</note>
            <aactivity level="element">
              <Tests>
                
                  For the following tests, the evaluator will initiate the download of an update and
				  capture the update prior to installation.
				  The download could originate from the vendor's website, an enterprise-hosted
				  update repository, or another system (e.g. network peer).
				  All supported origins
				  for the update must be indicated in the TSS and evaluated.
              
                <testlist>
                  
                  For the following tests, the evaluator will initiate the download of an update and
				  capture the update prior to installation.
				  The download could originate from the vendor's website, an enterprise-hosted
				  update repository, or another system (e.g. network peer).
				  All supported origins
				  for the update must be indicated in the TSS and evaluated.
              
                  <test>
				  The evaluator will ensure that the update has a digital
				  signature belonging to the vendor prior to its installation.
				  The evaluator will modify the downloaded update in such a way
				  that the digital signature is no longer valid. The evaluator
				  will then attempt to install the modified update. The
				  evaluator will ensure that the OS does not install the
				  modified update.
                </test>
                  <test>
				  The evaluator will ensure that the update has a digital
				  signature belonging to the vendor. The evaluator will then
				  attempt to install the update (or permit installation to continue).
				  The evaluator will ensure that
				  the OS successfully installs the update.
                </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FPT_TUD_EXT.2 Trusted Update for Application Software-->
        <f-component cc-id="fpt_tud_ext.2" id="fpt-tud-ext-2" name="Trusted Update for Application Software">
          <f-element id="fel-app-check-update">
            <title>The OS shall provide the ability to check for updates to application software and shall use a digital signature scheme specified in FCS_COP.1/SIGN to validate the authenticity of the response.</title>
            <note role="application">This requirement is about the ability to check for authentic updates,
              while the actual installation of such updates is covered by  <xref to="fel-verify-app-updates"></xref>.
			  Use of the digital signature scheme ensures that an attacker cannot influence the response,
			  regarding of whether updates are available.

            </note>
            <aactivity level="element">
              <Tests><h:p>
	      The evaluator will check for updates to application software
			  using procedures described in the
			  documentation and verify that the OS provides a list of available
			  updates.  Testing this capability may require
			  temporarily placing the system into a configuration in conflict
			  with secure configuration guidance which specifies automatic
			  update.
			  <h:p/>
				The evaluator is also to ensure that the response to this query is authentic by using a digital signature scheme specified in FCS_COP.1/SIGN.
    			The digital signature verification may be performed as part of a network protocol
			     as described in FTP_ITC_EXT.1. 
                If the signature verification is not performed as part of a trusted channel, the evaluator will send a query response with a bad signature and verify that the signature verification fails. 
				The evaluator will then send a query response with a good signature and verify that the signature verification is successful.
			  </h:p></Tests>
            </aactivity>
          </f-element>
          <f-element id="fel-verify-app-updates">
            <title>The OS shall cryptographically verify the integrity of updates to applications using a digital signature specified by FCS_COP.1/SIGN prior to installation.</title>
            <note role="application"/>
            <aactivity level="element">
              <Tests>
                
                  The evaluator will initiate an update to an application.  This may vary depending on the application,
		          but it could be through the application vendor's website, a commercial app store, or another system.
				  All origins supported by the OS must be indicated in the TSS and evaluated.  However, this only includes
				  those mechanisms for which the OS is providing a trusted installation and update functionality.
				  It does not include user or administrator-driven download and installation of arbitrary files.
              
                <testlist>
                  
                  The evaluator will initiate an update to an application.  This may vary depending on the application,
		          but it could be through the application vendor's website, a commercial app store, or another system.
				  All origins supported by the OS must be indicated in the TSS and evaluated.  However, this only includes
				  those mechanisms for which the OS is providing a trusted installation and update functionality.
				  It does not include user or administrator-driven download and installation of arbitrary files.
              
                  <test>
				  The evaluator will ensure that the update has a digital
				  signature which chains to the OS vendor or another trusted
				  root managed through the OS.  The evaluator will modify the
				  downloaded update in such a way that the
                  digital signature is no longer valid. The evaluator will then attempt to install the
                  modified update. The evaluator will ensure that the OS does not install the modified
                  update.
                </test>
                  <test>
				  The evaluator will ensure that the update has a digital
				  signature belonging to the OS vendor or another trusted root
				  managed through the OS. The evaluator will then attempt to
				  install the update.  The evaluator will ensure that the OS
				  successfully installs the update.
                </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FPT_W^X_EXT.1 Write XOR Execute Memory Pages-->
        <f-component cc-id="fpt_w^x_ext.1" id="fpt-w^x-ext-1" name="Write XOR Execute Memory Pages">
          <f-element id="fel-no-rw-mem">
            <title>The OS shall prevent allocation of any memory region with both write and execute permissions except for<assignable>list of exceptions</assignable>.</title>
            <note role="application">Requesting a memory mapping with both write and execute
              permissions subverts the platform protection provided by DEP.
	      If the OS provides no exceptions (such as for just-in-time compilation),
	      then "no exceptions" should be indicated in the assignment.
	      Full realization of this requirement requires hardware support, but this is commonly available.
            </note>
            <aactivity level="element">
              <TSS>The evaluator will inspect the vendor-provided developer documentation and
	      verify that no memory-mapping can be made with
              write and execute permissions except for the cases listed in the assignment.</TSS>
              <Tests>
                
	      The evaluator will also perform the following tests.
	      
                <testlist>
                  
	      The evaluator will also perform the following tests.
	      
                  <test>
                  The evaluator will acquire or construct a test program which attempts
		  to allocate memory that is both writable and executable.
		  The evaluator will run the program and confirm that it fails to
		  allocate memory that is both writable and executable.
		</test>
                  <test>
                  The evaluator will acquire or construct a test program which
		  allocates memory that is executable and then
		  subsequently requests additional write/modify permissions on that memory.
		  The evaluator will run the program and confirm that at no time
		  during the lifetime of the process is the memory both writable and executable.
		</test>
                  <test>
                  The evaluator will acquire or construct a test program which
		  allocates memory that is writable and then
		  subsequently requests additional execute permissions on that memory.
		  The evaluator will run the program and confirm that at no time
		  during the lifetime of the process is the memory both writable and executable.
		</test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!--5.1.5 Class: Audit Data Generation (FAU)-->
      <section id="fau" title="Class: Audit Data Generation (FAU)">
        <!--FAU_GEN.1 Audit Data Generation (Refined)-->
        <f-component cc-id="fau_gen.1" id="fau-gen-1" name="Audit Data Generation (Refined)">
          <f-element id="fel-faugen">
            <title>The <h:b>OS</h:b>  shall be able to generate an audit record of the following auditable events:  <h:ol><h:li>Start-up and shut-down of the audit functions;</h:li><h:li>All auditable events for the [<h:i>not specified</h:i>] level of audit; and [</h:li><h:li><h:i><h:ul><h:li>Authentication events (Success/Failure);</h:li><h:li>Use of privileged/special rights events (Successful and unsuccessful security, audit, and configuration changes);</h:li><h:li>Privilege or role escalation events (Success/Failure);</h:li><h:li><selectables ><selectable id="fau_gen.1.1_1" >File and object events (Successful and unsuccessful attempts to create, access, delete, modify, modify permissions)</selectable><selectable id="fau_gen.1.1_2" >User and Group management events (Successful and unsuccessful add, delete, modify, disable, enable, and credential change)</selectable><selectable id="fau_gen.1.1_3" >Audit and log data access events (Success/Failure)</selectable><selectable id="fau_gen.1.1_4" >Cryptographic verification of software (Success/Failure)</selectable><selectable id="fau_gen.1.1_5" >Attempted application invocation with arguments (Success/Failure e.g. due to software restriction policy)</selectable><selectable id="fau_gen.1.1_6" >System reboot, restart, and shutdown events (Success/Failure)</selectable><selectable id="fau_gen.1.1_7" >Kernel module loading and unloading events (Success/Failure)</selectable><selectable id="fau_gen.1.1_8" >Administrator or root-level access events (Success/Failure)</selectable><selectable id="fau_gen.1.1_10" >other specifically defined auditable events </selectable><selectable>.</selectable></selectables></h:li></h:ul></h:i>].
		</h:li></h:ol></title>
            <note role="application"/>
            <aactivity level="element">
              <Guidance><h:p>
			  The evaluator will check the administrative guide and ensure
			  that it lists all of the auditable events.  The evaluator will
			  check to make sure that every audit event type selected in the ST
			  is included.
	      </h:p></Guidance>
              <Tests><h:p>
			  The evaluator will test the OS's ability to correctly generate
			  audit records by having the TOE generate audit records for the
			  events listed in the ST.  This should include all instance types
			  of an event specified.
			  When verifying the test results, the evaluator will ensure the
			  audit records generated during testing match the format specified
			  in the administrative guide, and that the fields in each audit
			  record have the proper entries.
	      </h:p></Tests>
            </aactivity>
          </f-element>
          <f-element id="fel-audit-content">
            <title>The <h:b>OS</h:b>  shall record within each audit record at least the following information:  <h:ol><h:li>Date and time of the event, type of event, subject identity (if applicable),
	      and outcome (success or failure) of the event; and </h:li><h:li>For each audit event type, based on the auditable event
              definitions of the functional components included in the PP/ST,
              <assignable>other audit relevant information</assignable></h:li></h:ol>  .</title>
            <note role="application">
	      The term <h:i>subject</h:i> here is understood to be the user that the process
	      is acting on behalf of.  If no auditable event definitions of
		  functional components are provided, then no additional audit-relevant information
		  is required.
	    </note>
            <aactivity level="element">
              <Guidance><h:p>
			  The evaluator will check the administrative guide and ensure
			  that it provides a format
			  for audit records. Each audit record format type must be covered,
			  along with a brief description of each field. The evaluator will
			  ensure that the fields contains the information required.
	      </h:p></Guidance>
              <Tests><h:p>
			  The evaluator will test the OS's ability to correctly generate
			  audit records by having the TOE generate audit records for the
			  events listed in the ST.
			  The evaluator will
			  ensure the audit records generated during testing match the
			  format specified in the administrative guide, and that the fields
			  in each audit record provide the required information.
	      </h:p></Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!--5.1.6 Class: Identification and Authentication (FIA)-->
      <section id="fia" title="Class: Identification and Authentication (FIA)">
        <!--FIA_AFL.1 Authentication failure handling (Refined)-->
        <f-component cc-id="fia_afl.1" id="fia-afl-1" name="Authentication failure handling (Refined)">
          <f-element id="fel-id-and-auth">
            <title>The <h:b>OS</h:b>  shall detect when<selectables ><selectable id="fia_afl.1.1_2" >positive integer number </selectable><selectable>an administrator configurable positive integer within <assignable id="fia_afl.1.1_4" >range of acceptable values </assignable></selectable></selectables>unsuccessful authentication attempts occur related to  <h:b>
	      events with
            <selectables ><selectable id="fia_afl.1.1_5" >authentication based on user name and password</selectable><selectable id="fia_afl.1.1_6" >authentication based on user name and a PIN that
	      releases an asymmetric key stored in OE-protected storage</selectable><selectable id="fia_afl.1.1_7" >authentication based on X.509 certificates</selectable></selectables>.</title>
            <note role="application"/>
            <aactivity level="element">
              <Tests>
		  The evaluator will set an administrator-configurable threshold for
		  failed attempts, or note the ST-specified assignment.  The evaluator
		  will then (per selection) repeatedly attempt to authenticate with an
		  incorrect password, PIN, or certificate until the number of attempts
		  reaches the threshold.  Note that the authentication attempts and
		  lockouts must also be logged as specified in
		  FAU_GEN.1.

	      </Tests>
            </aactivity>
          </f-element>
          <f-element id="fel-bad-attempts">
            <title>When the defined number of unsuccessful authentication attempts for an account has been <h:b>met</h:b>  , the <h:b>OS</h:b>  shall:  <h:b><selectables ><selectable id="fia_afl.1.2_1" >Account Lockout</selectable><selectable id="fia_afl.1.2_2" >Account Disablement</selectable><selectable id="fia_afl.1.2_3" >Mandatory Credential Reset</selectable><selectable id="fia_afl.1.2_5" >list of actions </selectable></selectables>.</title>
            <note role="application">
            	The action to be taken will be populated in the assignment of the ST and defined
            	in the administrator guidance.
            </note>
            <aactivity level="element">
              <Tests>
                <testlist>
                  <test>
                  The evaluator will attempt to authenticate repeatedly to the system with a
                  known bad password. Once the defined number of failed authentication attempts has been
                  reached the evaluator will ensure that the account that was being used for testing
                  has had the actions detailed in the assignment list above applied to it. The evaluator will ensure that
                  an event has been logged to the security event log detailing that the account has had these actions applied.
                </test>
                  <test>
                  The evaluator will attempt to authenticate repeatedly to the system with a
                  known bad certificate. Once the defined number of failed authentication attempts has been
                  reached the evaluator will ensure that the account that was being used for testing
                  has had the actions detailed in the assignment list above applied to it. The evaluator will ensure that
                  an event has been logged to the security event log detailing that the account has had these actions applied.
                </test>
                  <test>
                  The evaluator will attempt to authenticate repeatedly to the system using both a bad password and a bad certificate.
                  Once the defined number of failed authentication attempts has been
                  reached the evaluator will ensure that the account that was being used for testing
                  has had the actions detailed in the assignment list above applied to it. The evaluator will ensure that
                  an event has been logged to the security event log detailing that the account has had these actions applied.
                </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FIA_UAU.5 Multiple Authentication Mechanisms (Refined)-->
        <f-component cc-id="fia_uau.5" id="fia-uau-5" name="Multiple Authentication Mechanisms (Refined)">
          <f-element id="fel-mult-auth">
            <title>The <h:b>OS</h:b>  shall provide the following authentication mechanisms  <h:b><selectables ><selectable id="s-pass" >authentication based on username and password</selectable><selectable id="s-pin" >authentication based on  <snip>username and a PIN that releases an asymmetric key</snip> stored
		in OE-protected storage</selectable><selectable id="s-otp" >combination of authentication based on user name, password, and time-based one-time password</selectable><selectable id="s-x509-auth" >authentication based on X.509 certificates</selectable><selectable id="s-uau-ssh" >for use in SSH only,  <snip>SSH public key-based authentication</snip> as specified by the  <xref to="pkg-ssh"></xref></selectable></selectables>to support user authentication.</title>
            <note role="application">
	      The  <xref to="s-uau-ssh"></xref> selection can only be included, and must be included, if
		     <xref to="fel-trust-comms"></xref> selects  <xref to="s-ftp_ssh"></xref>.
	    </note>
            <aactivity level="element">
              <Tests>
                <testlist>
                  <test/>
                </testlist>
                <testlist>
                  <test>
		  The evaluator will examine the TSS for guidance on supported
		  protected storage and will then configure the TOE or OE to establish a PIN
		  which enables release of the asymmetric key from the protected storage (such as a TPM, a hardware token, or
		  isolated execution environment) with which the
		  OS can interface.  The evaluator will then conduct the following tests:
		  </test>
                </testlist>
                <testlist>
                  <test>
		  The evaluator will configure the OS to authentication to authenticate to the OS using
		  a username, password, and one-time password mechanism.
		  The evaluator will then perform the following tests.
		  </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
          <f-element id="fel-auth-how">
            <title>The <h:b>OS</h:b>  shall authenticate any user's claimed identity according to the<assignable>              rules describing how the multiple authenticationmechanisms provide authentication              </assignable>.</title>
            <note role="application"/>
            <aactivity level="element">
              <TSS>The evaluator will ensure that the TSS describes
		  the rules as to how each authentication mechanism specified in
		   <xref to="fel-mult-auth"></xref> is implemented and used.
		  Example rules are how the authentication mechanism authenticates the user
		  (i.e. how does the TSF verify that the correct password or authentication
		  factor is used),
		  the result of a successful authentication
		  (i.e. is the user input used to derive or unlock a key) and which
		  authentication mechanism can be used at which authentication factor
		  interfaces (i.e. if there are times, for example, after a reboot,
		  that only specific authentication mechanisms can be used).
		  Rules regarding how the authentication factors interact in terms of
		  unsuccessful authentication are covered in FIA_AFL.1.</TSS>
              <Guidance><h:p>
		The evaluator will verify that
		configuration guidance for each authentication mechanism is
		addressed in the AGD guidance.
	      </h:p></Guidance>
              <Tests><h:p>
		  For each authentication mechanism rule, the evaluator will ensure that
		  the authentication mechanism(s) behave as documented in the TSS.
	      </h:p></Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FIA_X509_EXT.1 X.509 Certificate Validation-->
        <f-component cc-id="fia_x509_ext.1" id="fc-cert-val" name="X.509 Certificate Validation">
          <f-element id="fel-cert-val">
            <title>The OS shall implement functionality to validate certificates in accordance with the following rules:  <h:ul><h:li>RFC 5280 certificate validation and certificate path validation</h:li><h:li>The certificate path must terminate with a trusted CA certificate</h:li><h:li>The OS shall validate a certificate path by ensuring the presence of the 
	        basicConstraints extension, that the CA flag is set to TRUE for all CA certificates,
                and that any path constraints are met.</h:li><h:li>The TSF shall validate that any CA certificate includes "Certificate Signing" as a  purpose the key usage field</h:li><h:li>The OS shall validate the revocation status of the certificate using 
		<selectables ><selectable id="fia_x509_ext.1.1_1" >OCSP as specified in RFC 6960</selectable><selectable id="fia_x509_ext.1.1_2" >CRL as specified in RFC 8603</selectable><selectable id="fia_x509_ext.1.1_3" >an OCSP TLS Status Request Extension (OCSP stapling) as specified
		  in RFC 6066</selectable><selectable id="fia_x509_ext.1.1_4" > OCSP TLS Multi-Certificate Status Request Extension 
		  (i.e., OCSP Multi-Stapling) as specified in RFC 6961</selectable></selectables>
		with
		<selectables ><selectable id="fia_x509_ext.1.1_5" >no exceptions</selectable><selectable id="fia_x509_ext.1.1_6" >exceptional use cases and alternative status check </selectable></selectables></h:li><h:li>The OS shall validate the extendedKeyUsage field according to the following rules:
		<h:ul><h:li> Certificates used for trusted updates and executable code integrity verification shall have the Code Signing Purpose (id-kp 3 with OID 1.3.6.1.5.5.7.3.3) in the extendedKeyUsage field.</h:li><h:li>Server certificates presented for TLS shall have the Server Authentication purpose (id-kp 1 with OID 1.3.6.1.5.5.7.3.1) in the extendedKeyUsage field.</h:li><h:li>Client certificates presented for TLS shall have the Client Authentication purpose (id-kp 2 with OID 1.3.6.1.5.5.7.3.2) in the EKU field.</h:li><h:li>S/MIME certificates presented for email encryption and signature shall have the Email Protection purpose (id-kp 4 with OID 1.3.6.1.5.5.7.3.4) in the EKU field.</h:li><h:li>OCSP certificates presented for OCSP responses shall have the OCSP Signing Purpose (id-kp 9 with OID 1.3.6.1.5.5.7.3.9) in the EKU field.</h:li><h:li>Server certificates presented for EST shall have the CMC Registration Authority (RA) purpose (id-kp-cmcRA with OID 1.3.6.1.5.5.7.3.28) in the EKU field. (conditional)</h:li></h:ul></h:li></h:ul>  .</title>
            <note role="application"><h:p> <xref to="fel-cert-val"></xref> lists the rules for validating certificates.
		The ST author will select whether revocation status is verified using OCSP or CRLs.
		FIA_X509_EXT.2 requires that certificates are used for HTTPS, TLS, and DTLS;
		this use requires that the <h:i>extendedKeyUsage</h:i> rules are verified.
	      <h:p/>
		OCSP stapling and OCSP multi-stapling only support TLS server certificate validation. If other certificate types are validated, either OCSP or CRL should be claimed.
		If OCSP is not supported the EKU provision for checking the OCSP Signing purpose is met by default.
	      <h:p/>
		If the OS receives server certificates presented for EST, then the ST author should make the selection for EST in the SFR.
	      <h:p/>
		If the OS cannot perform revocation in accordance with one of the specified revocation methods,
		then the specific use cases where revocation checking is not possible must be described, along with any alternative to certificate status checking for each use case.
		For example, for the use case "update functions when network connections are not available, notice of a compromised certificate disables automatic updates."
	      </h:p></note>
            <aactivity level="element">
              <TSS><h:p>
		The evaluator will ensure the TSS describes where the
		check of validity of the certificates takes place.
		The evaluator ensures the TSS also provides a description of the certificate path validation algorithm.
		<h:p/>
		  If the OS cannot perform revocation in accordance with one of the revocation methods, the evaluator will ensure the TSS describes each revocation checking exception use case, and for each exception, the alternate functionality the TOE implements to determine the status of the certificate and disable functionality dependent on the validity of the certificate.
		</h:p></TSS>
              <Tests>
                <testlist>
                   
The tests described must be performed in conjunction with the other certificate services evaluation activities, including the functions in FIA_X509_EXT.2.1.
The evaluator will create a chain of at least four certificates: the node certificate to be tested, two Intermediate CAs, and the self-signed Root CA.

	
                  <test> The evaluator will demonstrate that validating a certificate without a valid certification path results in the function failing, for each of the following reasons, in turn:
by establishing a certificate path in which one of the issuing certificates is not a CA certificate,
by omitting the basicConstraints field in one of the issuing certificates,
by setting the basicConstraints field in an issuing certificate to have CA=False,
by omitting the CA signing bit of the key usage field in an issuing certificate, and
by setting the path length field of a valid CA field to a value strictly less than the certificate path.
The evaluator will then establish a valid certificate path consisting of valid CA certificates, and demonstrate that the function succeeds.
The evaluator will then remove trust in one of the CA certificates, and show that the function fails.
</test>
                  <test> The evaluator will demonstrate that validating an expired certificate results in the function failing.</test>
                  <test> The evaluator will test that the OS can properly handle revoked certificates - conditional on whether CRL, OCSP, OCSP stapling, or OCSP multi-stapling is selected; if multiple methods are selected, then a test will be performed for each method.
The evaluator will test revocation of the node certificate and revocation of the intermediate CA certificate (i.e. the intermediate CA certificate should be revoked by the root CA).
If OCSP stapling per RFC 6066 is the only supported revocation method, testing revocation of the intermediate CA certificate is omitted.
The evaluator will ensure that a valid certificate is used, and that the validation function succeeds.
The evaluator then attempts the test with a certificate that has been revoked (for each method chosen in the selection) to ensure when the certificate is no longer valid that the validation function fails.</test>
                  <test> If any OCSP option is selected, the evaluator will configure the OCSP server or use a man-in-the-middle tool to present a certificate that does not have the OCSP signing purpose and verify that validation of the OCSP response fails.
If CRL is selected, the evaluator will configure the CA to sign a CRL with a certificate that does not have the cRLsign key usage bit set and verify that validation of the CRL fails.</test>
                  <test> The evaluator will modify any byte in the first eight bytes of the certificate and demonstrate that the certificate fails to validate.
(The certificate will fail to parse correctly.)</test>
                  <test> The evaluator will modify any byte in the last byte of the certificate and demonstrate that the certificate fails to validate.
(The signature on the certificate will not validate.)</test>
                  <test> The evaluator will modify any byte in the public key of the certificate and demonstrate that the certificate fails to validate.
(The signature of the certificate will not validate.)</test>
                  <test>
    For each exceptional use case for revocation checking described in the ST, the evaluator shall attempt to establish the conditions of the use case, designate the certificate as invalid and perform the function relying on the certificate. The evaluator shall observe that the alternate revocation checking mechanism successfully prevents performance of the function.
</test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
          <f-element id="fel-cacert">
            <title>The OS shall only treat a certificate as a CA certificate if the <h:i>basicConstraints</h:i>  extension is present and the CA flag is set to TRUE.</title>
            <note role="application"> This requirement applies to certificates that are used and
              processed by the TSF and restricts the certificates that may be
              added as trusted CA certificates. </note>
            <aactivity level="element">
              <Tests>
                
The tests described must be performed in conjunction with the other
certificate services evaluation activities, including the functions in
 <xref to="fel-cert-auth"></xref>.
The evaluator will create a chain of at least four certificates:
the node certificate to be tested, two Intermediate CAs, and the
              self-signed Root CA.

                <testlist>
                  .
The evaluator will create a chain of at least four certificates:
the node certificate to be tested, two Intermediate CAs, and the
              self-signed Root CA.

                  <test> The evaluator will construct a certificate path, such that the certificate
  of the CA issuing the OS's certificate does not contain the
  <h:i>basicConstraints</h:i> extension. The validation of the certificate path fails. </test>
                  <test> The evaluator will construct a certificate path, such that the certificate
  of the CA issuing the OS's certificate has the CA flag in the
  <h:i>basicConstraints</h:i> extension not set. The validation of the certificate path fails. </test>
                  <test> The evaluator will construct a certificate path, such that the certificate
  of the CA issuing the OS's certificate has the CA flag in the
  <h:i>basicConstraints</h:i> extension set to TRUE. The validation of the certificate path
  succeeds. </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FIA_X509_EXT.2 X.509 Certificate Authentication-->
        <f-component cc-id="fia_x509_ext.2" id="fia-x509-ext-2" name="X.509 Certificate Authentication">
          <f-element id="fel-cert-auth">
            <title>The OS shall use X.509v3 certificates as defined by RFC 5280 to support authentication for TLS and<selectables ><selectable id="fia_x509_ext.2.1_1" >DTLS</selectable><selectable id="fia_x509_ext.2.1_2" >HTTPS</selectable><selectable id="fia_x509_ext.2.1_4" >other protocols </selectable><selectable id="fia_x509_ext.2.1_5" exclusive="yes">no other protocols</selectable></selectables>connections.</title>
            <note role="application"/>
            <aactivity level="element">
              <Tests><h:p>
		The evaluator will acquire or develop an application that uses the OS
		TLS mechanism with an X.509v3 certificate. The evaluator will then run the
		application and ensure that the provided certificate is used to authenticate the
		connection.
	      <h:p/>
		The evaluator will repeat the activity for any other selections listed.
	      </h:p></Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!--5.1.7 Class: TOE Access (FTA)-->
      <section id="fta" title="Class: TOE Access (FTA)">
        <!--FTA_TAB.1 Default TOE access banners-->
        <f-component cc-id="fta_tab.1" id="fta-tab-1" name="Default TOE access banners" status="optional">
          <f-element id="fel-banner">
            <title>Before establishing a user session, the <h:b>OS</h:b>  shall display an advisory warning message regarding unauthorized use of the OS.</title>
            <note role="application"/>
            <aactivity level="element">
              <Tests>
            The evaluator will configure the OS, per instructions in the OS manual,
            to display the advisory warning message "TEST TEST Warning Message TEST TEST".
            The evaluator will then log out and confirm that the advisory message is
            displayed before logging in can occur.
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!--5.1.8 Class: Trusted Path/Channels (FTP)-->
      <section id="ftp" title="Class: Trusted Path/Channels (FTP)">
        <!--FTP_ITC_EXT.1 Trusted channel communication-->
        <f-component cc-id="ftp_itc_ext.1" id="ftp-itc-ext-1" name="Trusted channel communication">
          <f-element id="fel-trust-comms">
            <title>The OS shall use<selectables ><selectable> <snip>TLS</snip> as conforming to the <xref to="pkg-tls"></xref> as a <selectables ><selectable id="s-tls-client" >client</selectable><selectable id="s-tls-server" >server</selectable></selectables></selectable><selectable> <snip>DTLS</snip> as conforming to the <xref to="pkg-tls"></xref> as a <selectables ><selectable id="s-dtls-client" >client</selectable><selectable id="s-dtls-server" >server</selectable></selectables></selectable><selectable id="s-itc-ipsec" >IPsec as conforming to the  <xref to="mod-vpnclient"></xref></selectable><selectable> <snip>SSH</snip> as conforming to the <xref to="pkg-ssh"></xref> as a <selectables ><selectable id="s-ssh-client" >client</selectable><selectable id="s-ssh-server" >server</selectable></selectables></selectable></selectables>to provide a trusted communication channel between itself and authorized IT entities supporting the following capabilities:<selectables ><selectable id="ftp_itc_ext.1.1_1" >audit server</selectable><selectable id="ftp_itc_ext.1.1_2" >authentication server</selectable><selectable id="ftp_itc_ext.1.1_3" >management server</selectable><selectable id="ftp_itc_ext.1.1_5" >other capabilities </selectable></selectables>that is logically distinct from other communication channels and provides assured identification of its end points and protection of the channel data from disclosure and detection of modification of the channel data.</title>
            <note role="application">
              The ST author must include the security functional requirements for the trusted
              channel protocol selected in  <xref to="fel-trust-comms"></xref> in the main body of the ST.
	      <h:p>
		Regardless of the selections made in this requirement, the TSF must be validated against the client TLS requirements in the  <xref to="pkg-tls"></xref>.
		 <rule id="r-need-client-tls"><doc ref="pkg-tls"><ref-id>tlsc_impl</ref-id></doc></rule>
		It must also be validated against additional requirements in the  <xref to="pkg-tls"></xref> if  <xref to="dtls"></xref> or  <xref to="s-tls-server"></xref> selections are made.
		 <rule id="r-tlss"><if><ref-id>s-tls-server</ref-id></if><then><doc ref="pkg-tls"><ref-id>tlss_impl</ref-id></doc></then></rule> <rule id="r-dtlsc"><if><ref-id>s-dtls-client</ref-id></if><then><doc ref="pkg-tls"><ref-id>dtlsc_impl</ref-id></doc></then></rule> <rule id="r-dtlss"><if><ref-id>s-dtls-server</ref-id></if><then><doc ref="pkg-tls"><ref-id>dtlss_impl</ref-id></doc></then></rule><h:p/>
If  <xref to="s-itc-ipsec"></xref> is selected, then FDP_IFC_EXT.1 must be included in the ST.
	      <h:p/>
If  <xref to="s-ftp_ssh"></xref> is selected, the TSF must be validated against
the  <xref to="pkg-ssh"></xref> and the corresponding selection is expected to be made in FIA_UAU.5.1.
 <rule id="r-sshclient"><if><ref-id>s-ssh-client</ref-id></if><then><doc ref="pkg-ssh"><ref-id>ssh-client</ref-id></doc></then></rule> <rule id="r-sshserver"><if><ref-id>s-ssh-server</ref-id></if><then><doc ref="pkg-ssh"><ref-id>ssh-server</ref-id></doc></then></rule>

The ST author must include the security functional requirements for the trusted channel protocol selected in FTP_ITC_EXT.1 in the main body of the ST.
	      </h:p></note>
            <aactivity level="element">
              <Tests>
	      The evaluator will configure the OS to communicate with another
	      trusted IT product as identified in the second selection.
      	  The evaluator will monitor network traffic while the OS performs communication with each of the
      	  servers identified in the second selection.
      	  The evaluator will ensure that for each session a trusted channel was established
      	  in conformance with the protocols identified in the first selection.
      	      </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!--FTP_TRP.1 Trusted Path-->
        <f-component cc-id="ftp_trp.1" id="ftp-trp-1" name="Trusted Path">
          <f-element id="fel-trust-ends">
            <title>The <h:b>OS</h:b>  shall provide a communication path between itself and<selectables ><selectable id="s-remote" >remote</selectable><selectable id="s-local" >local</selectable></selectables>users that is logically distinct from other communication paths and provides assured identification of its endpoints and protection of the communicated data from [modification, disclosure].</title>
            <note role="application"><h:p>
This requirement ensures that all remote administrative actions are protected.
Authorized remote administrators must initiate all communication with the OS via
a trusted path and all communication with the OS by remote administrators must
be performed over this path. The data passed in this trusted communication
channel is encrypted as defined in  <xref to="fel-trust-comms"></xref>.
If  <xref to="s-local"></xref> users access is selected and no unprotected traffic is sent to remote
users, then this requirement is met.
If  <xref to="s-remote"></xref> users access is selected, the
ST author must include the security functional requirements for the trusted
channel protocol selected in
 <xref to="fel-trust-comms"></xref> in the main body of the ST.
		</h:p></note>
          </f-element>
          <f-element id="fel-trust-users">
            <title>The <h:b>OS</h:b>  shall permit<selectables ><selectable id="ftp_trp.1.2_1" >the TSF</selectable><selectable id="ftp_trp.1.2_2" >local users</selectable><selectable id="ftp_trp.1.2_3" >remote users</selectable></selectables>to initiate communication via the trusted path.</title>
            <note role="application"/>
          </f-element>
          <f-element id="fel-trust-path">
            <title>The <h:b>OS</h:b>  shall require use of the trusted path for [[ <h:i>all remote administrative actions</h:i>  ]].</title>
            <note role="application"><h:p>
		  This requirement ensures that authorized remote administrators initiate all communication
                with the OS via a trusted path, and that all communication with the OS by remote administrators
                is performed over this path. The data passed in this trusted communication channel is encrypted as
                defined in FTP_ITC_EXT.1.
	      </h:p></note>
            <aactivity level="element">
              <TSS>The evaluator will examine the TSS to determine that the methods of remote OS administration
                are indicated, along with how those communications are protected. The evaluator will also
                confirm that all protocols listed in the TSS in support of OS administration are consistent with those
                specified in the requirement, and are included in the requirements in the ST.</TSS>
              <Guidance>
		The evaluator will
                confirm that the operational guidance contains instructions for establishing the remote
                administrative sessions for each supported method.
		</Guidance>
              <Tests>
                

The evaluator will also perform the following
                tests:
                
                <testlist>
                  

The evaluator will also perform the following
                tests:
                
                  <test>
                    The evaluator will ensure that communications using each remote administration method is
                    tested during the course of the evaluation, setting up the connections as described in the
                    operational guidance and ensuring that communication is successful.
                  </test>
                  <test>
                    For each method of remote administration supported, the evaluator will
                    follow the operational guidance to ensure that there is no available interface that can be
                    used by a remote user to establish a remote administrative sessions without invoking the
                    trusted path.
                  </test>
                  <test>
                    The evaluator will ensure, for each method of remote administration, the
                    channel data is not sent in plaintext.
                  </test>
                  <test>
                    The evaluator will ensure, for each method of remote administration,
                    modification of the channel data is detected by the OS.
                  </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
    </sec:SFRs>
    <!--5.2 Security Assurance Requirements-->
    <section title="Security Assurance Requirements" id="SARS"/>
  </sec:req>
  <appendix title="Entropy Documentation and Assessment" id="entropyappendix"/>
  <bibliography>
    <cc-entry/>
    <entry id="qqq">
      <tag>CEM</tag>
      <description>
        <h:a xmlns="" href="url">QQQQ</h:a>
      </description>
    </entry>
  </bibliography>
</PP>